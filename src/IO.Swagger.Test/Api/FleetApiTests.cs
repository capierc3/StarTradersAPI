/* 
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * OpenAPI spec version: 2.3.0
 * Contact: joel@spacetraders.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing FleetApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class FleetApiTests
    {
        private FleetApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new FleetApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of FleetApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' FleetApi
            //Assert.IsInstanceOfType(typeof(FleetApi), instance, "instance is a FleetApi");
        }

        /// <summary>
        /// Test CreateChart
        /// </summary>
        [Test]
        public void CreateChartTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shipSymbol = null;
            //var response = instance.CreateChart(shipSymbol);
            //Assert.IsInstanceOf<InlineResponse2013> (response, "response is InlineResponse2013");
        }
        /// <summary>
        /// Test CreateShipShipScan
        /// </summary>
        [Test]
        public void CreateShipShipScanTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shipSymbol = null;
            //var response = instance.CreateShipShipScan(shipSymbol);
            //Assert.IsInstanceOf<InlineResponse20110> (response, "response is InlineResponse20110");
        }
        /// <summary>
        /// Test CreateShipSystemScan
        /// </summary>
        [Test]
        public void CreateShipSystemScanTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shipSymbol = null;
            //var response = instance.CreateShipSystemScan(shipSymbol);
            //Assert.IsInstanceOf<InlineResponse2018> (response, "response is InlineResponse2018");
        }
        /// <summary>
        /// Test CreateShipWaypointScan
        /// </summary>
        [Test]
        public void CreateShipWaypointScanTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shipSymbol = null;
            //var response = instance.CreateShipWaypointScan(shipSymbol);
            //Assert.IsInstanceOf<InlineResponse2019> (response, "response is InlineResponse2019");
        }
        /// <summary>
        /// Test CreateSurvey
        /// </summary>
        [Test]
        public void CreateSurveyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shipSymbol = null;
            //var response = instance.CreateSurvey(shipSymbol);
            //Assert.IsInstanceOf<InlineResponse2014> (response, "response is InlineResponse2014");
        }
        /// <summary>
        /// Test DockShip
        /// </summary>
        [Test]
        public void DockShipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shipSymbol = null;
            //var response = instance.DockShip(shipSymbol);
            //Assert.IsInstanceOf<DockShip200Response> (response, "response is DockShip200Response");
        }
        /// <summary>
        /// Test ExtractResources
        /// </summary>
        [Test]
        public void ExtractResourcesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shipSymbol = null;
            //ShipSymbolExtractBody body = null;
            //var response = instance.ExtractResources(shipSymbol, body);
            //Assert.IsInstanceOf<InlineResponse2015> (response, "response is InlineResponse2015");
        }
        /// <summary>
        /// Test ExtractResourcesWithSurvey
        /// </summary>
        [Test]
        public void ExtractResourcesWithSurveyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shipSymbol = null;
            //Survey body = null;
            //var response = instance.ExtractResourcesWithSurvey(shipSymbol, body);
            //Assert.IsInstanceOf<InlineResponse2017> (response, "response is InlineResponse2017");
        }
        /// <summary>
        /// Test GetMounts
        /// </summary>
        [Test]
        public void GetMountsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shipSymbol = null;
            //var response = instance.GetMounts(shipSymbol);
            //Assert.IsInstanceOf<GetMounts200Response> (response, "response is GetMounts200Response");
        }
        /// <summary>
        /// Test GetMyShip
        /// </summary>
        [Test]
        public void GetMyShipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shipSymbol = null;
            //var response = instance.GetMyShip(shipSymbol);
            //Assert.IsInstanceOf<InlineResponse20019> (response, "response is InlineResponse20019");
        }
        /// <summary>
        /// Test GetMyShipCargo
        /// </summary>
        [Test]
        public void GetMyShipCargoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shipSymbol = null;
            //var response = instance.GetMyShipCargo(shipSymbol);
            //Assert.IsInstanceOf<InlineResponse20020> (response, "response is InlineResponse20020");
        }
        /// <summary>
        /// Test GetMyShips
        /// </summary>
        [Test]
        public void GetMyShipsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //var response = instance.GetMyShips(page, limit);
            //Assert.IsInstanceOf<InlineResponse20018> (response, "response is InlineResponse20018");
        }
        /// <summary>
        /// Test GetRepairShip
        /// </summary>
        [Test]
        public void GetRepairShipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shipSymbol = null;
            //var response = instance.GetRepairShip(shipSymbol);
            //Assert.IsInstanceOf<InlineResponse20031> (response, "response is InlineResponse20031");
        }
        /// <summary>
        /// Test GetScrapShip
        /// </summary>
        [Test]
        public void GetScrapShipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shipSymbol = null;
            //var response = instance.GetScrapShip(shipSymbol);
            //Assert.IsInstanceOf<InlineResponse20029> (response, "response is InlineResponse20029");
        }
        /// <summary>
        /// Test GetShipCooldown
        /// </summary>
        [Test]
        public void GetShipCooldownTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shipSymbol = null;
            //var response = instance.GetShipCooldown(shipSymbol);
            //Assert.IsInstanceOf<InlineResponse20021> (response, "response is InlineResponse20021");
        }
        /// <summary>
        /// Test GetShipModules
        /// </summary>
        [Test]
        public void GetShipModulesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shipSymbol = null;
            //var response = instance.GetShipModules(shipSymbol);
            //Assert.IsInstanceOf<InlineResponse20034> (response, "response is InlineResponse20034");
        }
        /// <summary>
        /// Test GetShipNav
        /// </summary>
        [Test]
        public void GetShipNavTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shipSymbol = null;
            //var response = instance.GetShipNav(shipSymbol);
            //Assert.IsInstanceOf<InlineResponse20025> (response, "response is InlineResponse20025");
        }
        /// <summary>
        /// Test InstallMount
        /// </summary>
        [Test]
        public void InstallMountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shipSymbol = null;
            //InstallMountRequest body = null;
            //var response = instance.InstallMount(shipSymbol, body);
            //Assert.IsInstanceOf<InstallMount201Response> (response, "response is InstallMount201Response");
        }
        /// <summary>
        /// Test InstallShipModule
        /// </summary>
        [Test]
        public void InstallShipModuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shipSymbol = null;
            //ModulesInstallBody body = null;
            //var response = instance.InstallShipModule(shipSymbol, body);
            //Assert.IsInstanceOf<InlineResponse20111> (response, "response is InlineResponse20111");
        }
        /// <summary>
        /// Test Jettison
        /// </summary>
        [Test]
        public void JettisonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shipSymbol = null;
            //ShipSymbolJettisonBody body = null;
            //var response = instance.Jettison(shipSymbol, body);
            //Assert.IsInstanceOf<InlineResponse20022> (response, "response is InlineResponse20022");
        }
        /// <summary>
        /// Test JumpShip
        /// </summary>
        [Test]
        public void JumpShipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shipSymbol = null;
            //ShipSymbolJumpBody body = null;
            //var response = instance.JumpShip(shipSymbol, body);
            //Assert.IsInstanceOf<InlineResponse20023> (response, "response is InlineResponse20023");
        }
        /// <summary>
        /// Test NavigateShip
        /// </summary>
        [Test]
        public void NavigateShipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shipSymbol = null;
            //ShipSymbolNavigateBody body = null;
            //var response = instance.NavigateShip(shipSymbol, body);
            //Assert.IsInstanceOf<InlineResponse20024> (response, "response is InlineResponse20024");
        }
        /// <summary>
        /// Test NegotiateContract
        /// </summary>
        [Test]
        public void NegotiateContractTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shipSymbol = null;
            //var response = instance.NegotiateContract(shipSymbol);
            //Assert.IsInstanceOf<NegotiateContract200Response> (response, "response is NegotiateContract200Response");
        }
        /// <summary>
        /// Test OrbitShip
        /// </summary>
        [Test]
        public void OrbitShipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shipSymbol = null;
            //var response = instance.OrbitShip(shipSymbol);
            //Assert.IsInstanceOf<OrbitShip200Response> (response, "response is OrbitShip200Response");
        }
        /// <summary>
        /// Test PatchShipNav
        /// </summary>
        [Test]
        public void PatchShipNavTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shipSymbol = null;
            //ShipSymbolNavBody body = null;
            //var response = instance.PatchShipNav(shipSymbol, body);
            //Assert.IsInstanceOf<InlineResponse20026> (response, "response is InlineResponse20026");
        }
        /// <summary>
        /// Test PurchaseCargo
        /// </summary>
        [Test]
        public void PurchaseCargoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shipSymbol = null;
            //PurchaseCargoRequest body = null;
            //var response = instance.PurchaseCargo(shipSymbol, body);
            //Assert.IsInstanceOf<PurchaseCargo201Response> (response, "response is PurchaseCargo201Response");
        }
        /// <summary>
        /// Test PurchaseShip
        /// </summary>
        [Test]
        public void PurchaseShipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MyShipsBody body = null;
            //var response = instance.PurchaseShip(body);
            //Assert.IsInstanceOf<InlineResponse2012> (response, "response is InlineResponse2012");
        }
        /// <summary>
        /// Test RefuelShip
        /// </summary>
        [Test]
        public void RefuelShipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shipSymbol = null;
            //ShipSymbolRefuelBody body = null;
            //var response = instance.RefuelShip(shipSymbol, body);
            //Assert.IsInstanceOf<InlineResponse20028> (response, "response is InlineResponse20028");
        }
        /// <summary>
        /// Test RemoveMount
        /// </summary>
        [Test]
        public void RemoveMountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shipSymbol = null;
            //RemoveMountRequest body = null;
            //var response = instance.RemoveMount(shipSymbol, body);
            //Assert.IsInstanceOf<RemoveMount201Response> (response, "response is RemoveMount201Response");
        }
        /// <summary>
        /// Test RemoveShipModule
        /// </summary>
        [Test]
        public void RemoveShipModuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shipSymbol = null;
            //ModulesRemoveBody body = null;
            //var response = instance.RemoveShipModule(shipSymbol, body);
            //Assert.IsInstanceOf<RemoveModule201Response> (response, "response is RemoveModule201Response");
        }
        /// <summary>
        /// Test RepairShip
        /// </summary>
        [Test]
        public void RepairShipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shipSymbol = null;
            //var response = instance.RepairShip(shipSymbol);
            //Assert.IsInstanceOf<InlineResponse20032> (response, "response is InlineResponse20032");
        }
        /// <summary>
        /// Test ScrapShip
        /// </summary>
        [Test]
        public void ScrapShipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shipSymbol = null;
            //var response = instance.ScrapShip(shipSymbol);
            //Assert.IsInstanceOf<InlineResponse20030> (response, "response is InlineResponse20030");
        }
        /// <summary>
        /// Test SellCargo
        /// </summary>
        [Test]
        public void SellCargoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shipSymbol = null;
            //SellCargoRequest body = null;
            //var response = instance.SellCargo(shipSymbol, body);
            //Assert.IsInstanceOf<SellCargo201Response> (response, "response is SellCargo201Response");
        }
        /// <summary>
        /// Test ShipRefine
        /// </summary>
        [Test]
        public void ShipRefineTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shipSymbol = null;
            //ShipSymbolRefineBody body = null;
            //var response = instance.ShipRefine(shipSymbol, body);
            //Assert.IsInstanceOf<ShipRefine201Response> (response, "response is ShipRefine201Response");
        }
        /// <summary>
        /// Test SiphonResources
        /// </summary>
        [Test]
        public void SiphonResourcesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shipSymbol = null;
            //var response = instance.SiphonResources(shipSymbol);
            //Assert.IsInstanceOf<InlineResponse2016> (response, "response is InlineResponse2016");
        }
        /// <summary>
        /// Test TransferCargo
        /// </summary>
        [Test]
        public void TransferCargoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shipSymbol = null;
            //TransferCargoRequest body = null;
            //var response = instance.TransferCargo(shipSymbol, body);
            //Assert.IsInstanceOf<TransferCargo200Response> (response, "response is TransferCargo200Response");
        }
        /// <summary>
        /// Test WarpShip
        /// </summary>
        [Test]
        public void WarpShipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shipSymbol = null;
            //ShipSymbolWarpBody body = null;
            //var response = instance.WarpShip(shipSymbol, body);
            //Assert.IsInstanceOf<InlineResponse20027> (response, "response is InlineResponse20027");
        }
    }

}
