/* 
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * OpenAPI spec version: 2.3.0
 * Contact: joel@spacetraders.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing SystemsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SystemsApiTests
    {
        private SystemsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SystemsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SystemsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SystemsApi
            //Assert.IsInstanceOfType(typeof(SystemsApi), instance, "instance is a SystemsApi");
        }

        /// <summary>
        /// Test GetConstruction
        /// </summary>
        [Test]
        public void GetConstructionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string systemSymbol = null;
            //string waypointSymbol = null;
            //var response = instance.GetConstruction(systemSymbol, waypointSymbol);
            //Assert.IsInstanceOf<InlineResponse2008> (response, "response is InlineResponse2008");
        }
        /// <summary>
        /// Test GetJumpGate
        /// </summary>
        [Test]
        public void GetJumpGateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string systemSymbol = null;
            //string waypointSymbol = null;
            //var response = instance.GetJumpGate(systemSymbol, waypointSymbol);
            //Assert.IsInstanceOf<InlineResponse2007> (response, "response is InlineResponse2007");
        }
        /// <summary>
        /// Test GetMarket
        /// </summary>
        [Test]
        public void GetMarketTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string systemSymbol = null;
            //string waypointSymbol = null;
            //var response = instance.GetMarket(systemSymbol, waypointSymbol);
            //Assert.IsInstanceOf<InlineResponse2005> (response, "response is InlineResponse2005");
        }
        /// <summary>
        /// Test GetShipyard
        /// </summary>
        [Test]
        public void GetShipyardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string systemSymbol = null;
            //string waypointSymbol = null;
            //var response = instance.GetShipyard(systemSymbol, waypointSymbol);
            //Assert.IsInstanceOf<InlineResponse2006> (response, "response is InlineResponse2006");
        }
        /// <summary>
        /// Test GetSystem
        /// </summary>
        [Test]
        public void GetSystemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string systemSymbol = null;
            //var response = instance.GetSystem(systemSymbol);
            //Assert.IsInstanceOf<InlineResponse2002> (response, "response is InlineResponse2002");
        }
        /// <summary>
        /// Test GetSystemWaypoints
        /// </summary>
        [Test]
        public void GetSystemWaypointsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string systemSymbol = null;
            //int? page = null;
            //int? limit = null;
            //WaypointType type = null;
            //Traits traits = null;
            //var response = instance.GetSystemWaypoints(systemSymbol, page, limit, type, traits);
            //Assert.IsInstanceOf<InlineResponse2003> (response, "response is InlineResponse2003");
        }
        /// <summary>
        /// Test GetSystems
        /// </summary>
        [Test]
        public void GetSystemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //var response = instance.GetSystems(page, limit);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        /// <summary>
        /// Test GetWaypoint
        /// </summary>
        [Test]
        public void GetWaypointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string systemSymbol = null;
            //string waypointSymbol = null;
            //var response = instance.GetWaypoint(systemSymbol, waypointSymbol);
            //Assert.IsInstanceOf<InlineResponse2004> (response, "response is InlineResponse2004");
        }
        /// <summary>
        /// Test SupplyConstruction
        /// </summary>
        [Test]
        public void SupplyConstructionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string systemSymbol = null;
            //string waypointSymbol = null;
            //ConstructionSupplyBody body = null;
            //var response = instance.SupplyConstruction(systemSymbol, waypointSymbol, body);
            //Assert.IsInstanceOf<InlineResponse2011> (response, "response is InlineResponse2011");
        }
    }

}
