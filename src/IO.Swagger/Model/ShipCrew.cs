/* 
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * OpenAPI spec version: 2.3.0
 * Contact: joel@spacetraders.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// The ship&#x27;s crew service and maintain the ship&#x27;s systems and equipment.
    /// </summary>
    [DataContract]
        public partial class ShipCrew :  IEquatable<ShipCrew>, IValidatableObject
    {
        /// <summary>
        /// The rotation of crew shifts. A stricter shift improves the ship&#x27;s performance. A more relaxed shift improves the crew&#x27;s morale.
        /// </summary>
        /// <value>The rotation of crew shifts. A stricter shift improves the ship&#x27;s performance. A more relaxed shift improves the crew&#x27;s morale.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum RotationEnum
        {
            /// <summary>
            /// Enum STRICT for value: STRICT
            /// </summary>
            [EnumMember(Value = "STRICT")]
            STRICT = 1,
            /// <summary>
            /// Enum RELAXED for value: RELAXED
            /// </summary>
            [EnumMember(Value = "RELAXED")]
            RELAXED = 2        }
        /// <summary>
        /// The rotation of crew shifts. A stricter shift improves the ship&#x27;s performance. A more relaxed shift improves the crew&#x27;s morale.
        /// </summary>
        /// <value>The rotation of crew shifts. A stricter shift improves the ship&#x27;s performance. A more relaxed shift improves the crew&#x27;s morale.</value>
        [DataMember(Name="rotation", EmitDefaultValue=false)]
        public RotationEnum Rotation { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipCrew" /> class.
        /// </summary>
        /// <param name="current">The current number of crew members on the ship. (required).</param>
        /// <param name="required">The minimum number of crew members required to maintain the ship. (required).</param>
        /// <param name="capacity">The maximum number of crew members the ship can support. (required).</param>
        /// <param name="rotation">The rotation of crew shifts. A stricter shift improves the ship&#x27;s performance. A more relaxed shift improves the crew&#x27;s morale. (required) (default to RotationEnum.STRICT).</param>
        /// <param name="morale">A rough measure of the crew&#x27;s morale. A higher morale means the crew is happier and more productive. A lower morale means the ship is more prone to accidents. (required).</param>
        /// <param name="wages">The amount of credits per crew member paid per hour. Wages are paid when a ship docks at a civilized waypoint. (required).</param>
        public ShipCrew(int? current = default(int?), int? required = default(int?), int? capacity = default(int?), RotationEnum rotation = RotationEnum.STRICT, int? morale = default(int?), int? wages = default(int?))
        {
            // to ensure "current" is required (not null)
            if (current == null)
            {
                throw new InvalidDataException("current is a required property for ShipCrew and cannot be null");
            }
            else
            {
                this.Current = current;
            }
            // to ensure "required" is required (not null)
            if (required == null)
            {
                throw new InvalidDataException("required is a required property for ShipCrew and cannot be null");
            }
            else
            {
                this.Required = required;
            }
            // to ensure "capacity" is required (not null)
            if (capacity == null)
            {
                throw new InvalidDataException("capacity is a required property for ShipCrew and cannot be null");
            }
            else
            {
                this.Capacity = capacity;
            }
            // to ensure "rotation" is required (not null)
            if (rotation == null)
            {
                throw new InvalidDataException("rotation is a required property for ShipCrew and cannot be null");
            }
            else
            {
                this.Rotation = rotation;
            }
            // to ensure "morale" is required (not null)
            if (morale == null)
            {
                throw new InvalidDataException("morale is a required property for ShipCrew and cannot be null");
            }
            else
            {
                this.Morale = morale;
            }
            // to ensure "wages" is required (not null)
            if (wages == null)
            {
                throw new InvalidDataException("wages is a required property for ShipCrew and cannot be null");
            }
            else
            {
                this.Wages = wages;
            }
        }
        
        /// <summary>
        /// The current number of crew members on the ship.
        /// </summary>
        /// <value>The current number of crew members on the ship.</value>
        [DataMember(Name="current", EmitDefaultValue=false)]
        public int? Current { get; set; }

        /// <summary>
        /// The minimum number of crew members required to maintain the ship.
        /// </summary>
        /// <value>The minimum number of crew members required to maintain the ship.</value>
        [DataMember(Name="required", EmitDefaultValue=false)]
        public int? Required { get; set; }

        /// <summary>
        /// The maximum number of crew members the ship can support.
        /// </summary>
        /// <value>The maximum number of crew members the ship can support.</value>
        [DataMember(Name="capacity", EmitDefaultValue=false)]
        public int? Capacity { get; set; }


        /// <summary>
        /// A rough measure of the crew&#x27;s morale. A higher morale means the crew is happier and more productive. A lower morale means the ship is more prone to accidents.
        /// </summary>
        /// <value>A rough measure of the crew&#x27;s morale. A higher morale means the crew is happier and more productive. A lower morale means the ship is more prone to accidents.</value>
        [DataMember(Name="morale", EmitDefaultValue=false)]
        public int? Morale { get; set; }

        /// <summary>
        /// The amount of credits per crew member paid per hour. Wages are paid when a ship docks at a civilized waypoint.
        /// </summary>
        /// <value>The amount of credits per crew member paid per hour. Wages are paid when a ship docks at a civilized waypoint.</value>
        [DataMember(Name="wages", EmitDefaultValue=false)]
        public int? Wages { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShipCrew {\n");
            sb.Append("  Current: ").Append(Current).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  Capacity: ").Append(Capacity).Append("\n");
            sb.Append("  Rotation: ").Append(Rotation).Append("\n");
            sb.Append("  Morale: ").Append(Morale).Append("\n");
            sb.Append("  Wages: ").Append(Wages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShipCrew);
        }

        /// <summary>
        /// Returns true if ShipCrew instances are equal
        /// </summary>
        /// <param name="input">Instance of ShipCrew to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShipCrew input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Current == input.Current ||
                    (this.Current != null &&
                    this.Current.Equals(input.Current))
                ) && 
                (
                    this.Required == input.Required ||
                    (this.Required != null &&
                    this.Required.Equals(input.Required))
                ) && 
                (
                    this.Capacity == input.Capacity ||
                    (this.Capacity != null &&
                    this.Capacity.Equals(input.Capacity))
                ) && 
                (
                    this.Rotation == input.Rotation ||
                    (this.Rotation != null &&
                    this.Rotation.Equals(input.Rotation))
                ) && 
                (
                    this.Morale == input.Morale ||
                    (this.Morale != null &&
                    this.Morale.Equals(input.Morale))
                ) && 
                (
                    this.Wages == input.Wages ||
                    (this.Wages != null &&
                    this.Wages.Equals(input.Wages))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Current != null)
                    hashCode = hashCode * 59 + this.Current.GetHashCode();
                if (this.Required != null)
                    hashCode = hashCode * 59 + this.Required.GetHashCode();
                if (this.Capacity != null)
                    hashCode = hashCode * 59 + this.Capacity.GetHashCode();
                if (this.Rotation != null)
                    hashCode = hashCode * 59 + this.Rotation.GetHashCode();
                if (this.Morale != null)
                    hashCode = hashCode * 59 + this.Morale.GetHashCode();
                if (this.Wages != null)
                    hashCode = hashCode * 59 + this.Wages.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
