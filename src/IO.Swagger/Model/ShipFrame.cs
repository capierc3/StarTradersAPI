/* 
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * OpenAPI spec version: 2.3.0
 * Contact: joel@spacetraders.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// The frame of the ship. The frame determines the number of modules and mounting points of the ship, as well as base fuel capacity. As the condition of the frame takes more wear, the ship will become more sluggish and less maneuverable.
    /// </summary>
    [DataContract]
        public partial class ShipFrame :  IEquatable<ShipFrame>, IValidatableObject
    {
        /// <summary>
        /// Symbol of the frame.
        /// </summary>
        /// <value>Symbol of the frame.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum SymbolEnum
        {
            /// <summary>
            /// Enum PROBE for value: FRAME_PROBE
            /// </summary>
            [EnumMember(Value = "FRAME_PROBE")]
            PROBE = 1,
            /// <summary>
            /// Enum DRONE for value: FRAME_DRONE
            /// </summary>
            [EnumMember(Value = "FRAME_DRONE")]
            DRONE = 2,
            /// <summary>
            /// Enum INTERCEPTOR for value: FRAME_INTERCEPTOR
            /// </summary>
            [EnumMember(Value = "FRAME_INTERCEPTOR")]
            INTERCEPTOR = 3,
            /// <summary>
            /// Enum RACER for value: FRAME_RACER
            /// </summary>
            [EnumMember(Value = "FRAME_RACER")]
            RACER = 4,
            /// <summary>
            /// Enum FIGHTER for value: FRAME_FIGHTER
            /// </summary>
            [EnumMember(Value = "FRAME_FIGHTER")]
            FIGHTER = 5,
            /// <summary>
            /// Enum FRIGATE for value: FRAME_FRIGATE
            /// </summary>
            [EnumMember(Value = "FRAME_FRIGATE")]
            FRIGATE = 6,
            /// <summary>
            /// Enum SHUTTLE for value: FRAME_SHUTTLE
            /// </summary>
            [EnumMember(Value = "FRAME_SHUTTLE")]
            SHUTTLE = 7,
            /// <summary>
            /// Enum EXPLORER for value: FRAME_EXPLORER
            /// </summary>
            [EnumMember(Value = "FRAME_EXPLORER")]
            EXPLORER = 8,
            /// <summary>
            /// Enum MINER for value: FRAME_MINER
            /// </summary>
            [EnumMember(Value = "FRAME_MINER")]
            MINER = 9,
            /// <summary>
            /// Enum LIGHTFREIGHTER for value: FRAME_LIGHT_FREIGHTER
            /// </summary>
            [EnumMember(Value = "FRAME_LIGHT_FREIGHTER")]
            LIGHTFREIGHTER = 10,
            /// <summary>
            /// Enum HEAVYFREIGHTER for value: FRAME_HEAVY_FREIGHTER
            /// </summary>
            [EnumMember(Value = "FRAME_HEAVY_FREIGHTER")]
            HEAVYFREIGHTER = 11,
            /// <summary>
            /// Enum TRANSPORT for value: FRAME_TRANSPORT
            /// </summary>
            [EnumMember(Value = "FRAME_TRANSPORT")]
            TRANSPORT = 12,
            /// <summary>
            /// Enum DESTROYER for value: FRAME_DESTROYER
            /// </summary>
            [EnumMember(Value = "FRAME_DESTROYER")]
            DESTROYER = 13,
            /// <summary>
            /// Enum CRUISER for value: FRAME_CRUISER
            /// </summary>
            [EnumMember(Value = "FRAME_CRUISER")]
            CRUISER = 14,
            /// <summary>
            /// Enum CARRIER for value: FRAME_CARRIER
            /// </summary>
            [EnumMember(Value = "FRAME_CARRIER")]
            CARRIER = 15,
            /// <summary>
            /// Enum BULKFREIGHTER for value: FRAME_BULK_FREIGHTER
            /// </summary>
            [EnumMember(Value = "FRAME_BULK_FREIGHTER")]
            BULKFREIGHTER = 16        }
        /// <summary>
        /// Symbol of the frame.
        /// </summary>
        /// <value>Symbol of the frame.</value>
        [DataMember(Name="symbol", EmitDefaultValue=false)]
        public SymbolEnum Symbol { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipFrame" /> class.
        /// </summary>
        /// <param name="symbol">Symbol of the frame. (required).</param>
        /// <param name="name">Name of the frame. (required).</param>
        /// <param name="description">Description of the frame. (required).</param>
        /// <param name="condition">condition (required).</param>
        /// <param name="integrity">integrity (required).</param>
        /// <param name="moduleSlots">The amount of slots that can be dedicated to modules installed in the ship. Each installed module take up a number of slots, and once there are no more slots, no new modules can be installed. (required).</param>
        /// <param name="mountingPoints">The amount of slots that can be dedicated to mounts installed in the ship. Each installed mount takes up a number of points, and once there are no more points remaining, no new mounts can be installed. (required).</param>
        /// <param name="fuelCapacity">The maximum amount of fuel that can be stored in this ship. When refueling, the ship will be refueled to this amount. (required).</param>
        /// <param name="requirements">requirements (required).</param>
        /// <param name="quality">quality (required).</param>
        public ShipFrame(SymbolEnum symbol = default(SymbolEnum), string name = default(string), string description = default(string), double? condition = default(double?), double? integrity = default(double?), int? moduleSlots = default(int?), int? mountingPoints = default(int?), int? fuelCapacity = default(int?), ShipRequirements requirements = default(ShipRequirements), decimal? quality = default(decimal?))
        {
            // to ensure "symbol" is required (not null)
            if (symbol == null)
            {
                throw new InvalidDataException("symbol is a required property for ShipFrame and cannot be null");
            }
            else
            {
                this.Symbol = symbol;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for ShipFrame and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for ShipFrame and cannot be null");
            }
            else
            {
                this.Description = description;
            }
            // to ensure "condition" is required (not null)
            if (condition == null)
            {
                throw new InvalidDataException("condition is a required property for ShipFrame and cannot be null");
            }
            else
            {
                this.Condition = condition;
            }
            // to ensure "integrity" is required (not null)
            if (integrity == null)
            {
                throw new InvalidDataException("integrity is a required property for ShipFrame and cannot be null");
            }
            else
            {
                this.Integrity = integrity;
            }
            // to ensure "moduleSlots" is required (not null)
            if (moduleSlots == null)
            {
                throw new InvalidDataException("moduleSlots is a required property for ShipFrame and cannot be null");
            }
            else
            {
                this.ModuleSlots = moduleSlots;
            }
            // to ensure "mountingPoints" is required (not null)
            if (mountingPoints == null)
            {
                throw new InvalidDataException("mountingPoints is a required property for ShipFrame and cannot be null");
            }
            else
            {
                this.MountingPoints = mountingPoints;
            }
            // to ensure "fuelCapacity" is required (not null)
            if (fuelCapacity == null)
            {
                throw new InvalidDataException("fuelCapacity is a required property for ShipFrame and cannot be null");
            }
            else
            {
                this.FuelCapacity = fuelCapacity;
            }
            // to ensure "requirements" is required (not null)
            if (requirements == null)
            {
                throw new InvalidDataException("requirements is a required property for ShipFrame and cannot be null");
            }
            else
            {
                this.Requirements = requirements;
            }
            // to ensure "quality" is required (not null)
            if (quality == null)
            {
                throw new InvalidDataException("quality is a required property for ShipFrame and cannot be null");
            }
            else
            {
                this.Quality = quality;
            }
        }
        

        /// <summary>
        /// Name of the frame.
        /// </summary>
        /// <value>Name of the frame.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Description of the frame.
        /// </summary>
        /// <value>Description of the frame.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Condition
        /// </summary>
        [DataMember(Name="condition", EmitDefaultValue=false)]
        public double? Condition { get; set; }

        /// <summary>
        /// Gets or Sets Integrity
        /// </summary>
        [DataMember(Name="integrity", EmitDefaultValue=false)]
        public double? Integrity { get; set; }

        /// <summary>
        /// The amount of slots that can be dedicated to modules installed in the ship. Each installed module take up a number of slots, and once there are no more slots, no new modules can be installed.
        /// </summary>
        /// <value>The amount of slots that can be dedicated to modules installed in the ship. Each installed module take up a number of slots, and once there are no more slots, no new modules can be installed.</value>
        [DataMember(Name="moduleSlots", EmitDefaultValue=false)]
        public int? ModuleSlots { get; set; }

        /// <summary>
        /// The amount of slots that can be dedicated to mounts installed in the ship. Each installed mount takes up a number of points, and once there are no more points remaining, no new mounts can be installed.
        /// </summary>
        /// <value>The amount of slots that can be dedicated to mounts installed in the ship. Each installed mount takes up a number of points, and once there are no more points remaining, no new mounts can be installed.</value>
        [DataMember(Name="mountingPoints", EmitDefaultValue=false)]
        public int? MountingPoints { get; set; }

        /// <summary>
        /// The maximum amount of fuel that can be stored in this ship. When refueling, the ship will be refueled to this amount.
        /// </summary>
        /// <value>The maximum amount of fuel that can be stored in this ship. When refueling, the ship will be refueled to this amount.</value>
        [DataMember(Name="fuelCapacity", EmitDefaultValue=false)]
        public int? FuelCapacity { get; set; }

        /// <summary>
        /// Gets or Sets Requirements
        /// </summary>
        [DataMember(Name="requirements", EmitDefaultValue=false)]
        public ShipRequirements Requirements { get; set; }

        /// <summary>
        /// Gets or Sets Quality
        /// </summary>
        [DataMember(Name="quality", EmitDefaultValue=false)]
        public decimal? Quality { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShipFrame {\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  Integrity: ").Append(Integrity).Append("\n");
            sb.Append("  ModuleSlots: ").Append(ModuleSlots).Append("\n");
            sb.Append("  MountingPoints: ").Append(MountingPoints).Append("\n");
            sb.Append("  FuelCapacity: ").Append(FuelCapacity).Append("\n");
            sb.Append("  Requirements: ").Append(Requirements).Append("\n");
            sb.Append("  Quality: ").Append(Quality).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShipFrame);
        }

        /// <summary>
        /// Returns true if ShipFrame instances are equal
        /// </summary>
        /// <param name="input">Instance of ShipFrame to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShipFrame input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Condition == input.Condition ||
                    (this.Condition != null &&
                    this.Condition.Equals(input.Condition))
                ) && 
                (
                    this.Integrity == input.Integrity ||
                    (this.Integrity != null &&
                    this.Integrity.Equals(input.Integrity))
                ) && 
                (
                    this.ModuleSlots == input.ModuleSlots ||
                    (this.ModuleSlots != null &&
                    this.ModuleSlots.Equals(input.ModuleSlots))
                ) && 
                (
                    this.MountingPoints == input.MountingPoints ||
                    (this.MountingPoints != null &&
                    this.MountingPoints.Equals(input.MountingPoints))
                ) && 
                (
                    this.FuelCapacity == input.FuelCapacity ||
                    (this.FuelCapacity != null &&
                    this.FuelCapacity.Equals(input.FuelCapacity))
                ) && 
                (
                    this.Requirements == input.Requirements ||
                    (this.Requirements != null &&
                    this.Requirements.Equals(input.Requirements))
                ) && 
                (
                    this.Quality == input.Quality ||
                    (this.Quality != null &&
                    this.Quality.Equals(input.Quality))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Condition != null)
                    hashCode = hashCode * 59 + this.Condition.GetHashCode();
                if (this.Integrity != null)
                    hashCode = hashCode * 59 + this.Integrity.GetHashCode();
                if (this.ModuleSlots != null)
                    hashCode = hashCode * 59 + this.ModuleSlots.GetHashCode();
                if (this.MountingPoints != null)
                    hashCode = hashCode * 59 + this.MountingPoints.GetHashCode();
                if (this.FuelCapacity != null)
                    hashCode = hashCode * 59 + this.FuelCapacity.GetHashCode();
                if (this.Requirements != null)
                    hashCode = hashCode * 59 + this.Requirements.GetHashCode();
                if (this.Quality != null)
                    hashCode = hashCode * 59 + this.Quality.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
