/* 
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * OpenAPI spec version: 2.3.0
 * Contact: joel@spacetraders.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// MarketTradeGood
    /// </summary>
    [DataContract]
        public partial class MarketTradeGood :  IEquatable<MarketTradeGood>, IValidatableObject
    {
        /// <summary>
        /// The type of trade good (export, import, or exchange).
        /// </summary>
        /// <value>The type of trade good (export, import, or exchange).</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum EXPORT for value: EXPORT
            /// </summary>
            [EnumMember(Value = "EXPORT")]
            EXPORT = 1,
            /// <summary>
            /// Enum IMPORT for value: IMPORT
            /// </summary>
            [EnumMember(Value = "IMPORT")]
            IMPORT = 2,
            /// <summary>
            /// Enum EXCHANGE for value: EXCHANGE
            /// </summary>
            [EnumMember(Value = "EXCHANGE")]
            EXCHANGE = 3        }
        /// <summary>
        /// The type of trade good (export, import, or exchange).
        /// </summary>
        /// <value>The type of trade good (export, import, or exchange).</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MarketTradeGood" /> class.
        /// </summary>
        /// <param name="symbol">symbol (required).</param>
        /// <param name="type">The type of trade good (export, import, or exchange). (required).</param>
        /// <param name="tradeVolume">This is the maximum number of units that can be purchased or sold at this market in a single trade for this good. Trade volume also gives an indication of price volatility. A market with a low trade volume will have large price swings, while high trade volume will be more resilient to price changes. (required).</param>
        /// <param name="supply">supply (required).</param>
        /// <param name="activity">activity.</param>
        /// <param name="purchasePrice">The price at which this good can be purchased from the market. (required).</param>
        /// <param name="sellPrice">The price at which this good can be sold to the market. (required).</param>
        public MarketTradeGood(TradeSymbol symbol = default(TradeSymbol), TypeEnum type = default(TypeEnum), int? tradeVolume = default(int?), SupplyLevel supply = default(SupplyLevel), ActivityLevel activity = default(ActivityLevel), int? purchasePrice = default(int?), int? sellPrice = default(int?))
        {
            // to ensure "symbol" is required (not null)
            if (symbol == null)
            {
                throw new InvalidDataException("symbol is a required property for MarketTradeGood and cannot be null");
            }
            else
            {
                this.Symbol = symbol;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for MarketTradeGood and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "tradeVolume" is required (not null)
            if (tradeVolume == null)
            {
                throw new InvalidDataException("tradeVolume is a required property for MarketTradeGood and cannot be null");
            }
            else
            {
                this.TradeVolume = tradeVolume;
            }
            // to ensure "supply" is required (not null)
            if (supply == null)
            {
                throw new InvalidDataException("supply is a required property for MarketTradeGood and cannot be null");
            }
            else
            {
                this.Supply = supply;
            }
            // to ensure "purchasePrice" is required (not null)
            if (purchasePrice == null)
            {
                throw new InvalidDataException("purchasePrice is a required property for MarketTradeGood and cannot be null");
            }
            else
            {
                this.PurchasePrice = purchasePrice;
            }
            // to ensure "sellPrice" is required (not null)
            if (sellPrice == null)
            {
                throw new InvalidDataException("sellPrice is a required property for MarketTradeGood and cannot be null");
            }
            else
            {
                this.SellPrice = sellPrice;
            }
            this.Activity = activity;
        }
        
        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name="symbol", EmitDefaultValue=false)]
        public TradeSymbol Symbol { get; set; }


        /// <summary>
        /// This is the maximum number of units that can be purchased or sold at this market in a single trade for this good. Trade volume also gives an indication of price volatility. A market with a low trade volume will have large price swings, while high trade volume will be more resilient to price changes.
        /// </summary>
        /// <value>This is the maximum number of units that can be purchased or sold at this market in a single trade for this good. Trade volume also gives an indication of price volatility. A market with a low trade volume will have large price swings, while high trade volume will be more resilient to price changes.</value>
        [DataMember(Name="tradeVolume", EmitDefaultValue=false)]
        public int? TradeVolume { get; set; }

        /// <summary>
        /// Gets or Sets Supply
        /// </summary>
        [DataMember(Name="supply", EmitDefaultValue=false)]
        public SupplyLevel Supply { get; set; }

        /// <summary>
        /// Gets or Sets Activity
        /// </summary>
        [DataMember(Name="activity", EmitDefaultValue=false)]
        public ActivityLevel Activity { get; set; }

        /// <summary>
        /// The price at which this good can be purchased from the market.
        /// </summary>
        /// <value>The price at which this good can be purchased from the market.</value>
        [DataMember(Name="purchasePrice", EmitDefaultValue=false)]
        public int? PurchasePrice { get; set; }

        /// <summary>
        /// The price at which this good can be sold to the market.
        /// </summary>
        /// <value>The price at which this good can be sold to the market.</value>
        [DataMember(Name="sellPrice", EmitDefaultValue=false)]
        public int? SellPrice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MarketTradeGood {\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TradeVolume: ").Append(TradeVolume).Append("\n");
            sb.Append("  Supply: ").Append(Supply).Append("\n");
            sb.Append("  Activity: ").Append(Activity).Append("\n");
            sb.Append("  PurchasePrice: ").Append(PurchasePrice).Append("\n");
            sb.Append("  SellPrice: ").Append(SellPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MarketTradeGood);
        }

        /// <summary>
        /// Returns true if MarketTradeGood instances are equal
        /// </summary>
        /// <param name="input">Instance of MarketTradeGood to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MarketTradeGood input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.TradeVolume == input.TradeVolume ||
                    (this.TradeVolume != null &&
                    this.TradeVolume.Equals(input.TradeVolume))
                ) && 
                (
                    this.Supply == input.Supply ||
                    (this.Supply != null &&
                    this.Supply.Equals(input.Supply))
                ) && 
                (
                    this.Activity == input.Activity ||
                    (this.Activity != null &&
                    this.Activity.Equals(input.Activity))
                ) && 
                (
                    this.PurchasePrice == input.PurchasePrice ||
                    (this.PurchasePrice != null &&
                    this.PurchasePrice.Equals(input.PurchasePrice))
                ) && 
                (
                    this.SellPrice == input.SellPrice ||
                    (this.SellPrice != null &&
                    this.SellPrice.Equals(input.SellPrice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.TradeVolume != null)
                    hashCode = hashCode * 59 + this.TradeVolume.GetHashCode();
                if (this.Supply != null)
                    hashCode = hashCode * 59 + this.Supply.GetHashCode();
                if (this.Activity != null)
                    hashCode = hashCode * 59 + this.Activity.GetHashCode();
                if (this.PurchasePrice != null)
                    hashCode = hashCode * 59 + this.PurchasePrice.GetHashCode();
                if (this.SellPrice != null)
                    hashCode = hashCode * 59 + this.SellPrice.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
