/* 
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * OpenAPI spec version: 2.3.0
 * Contact: joel@spacetraders.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// A cooldown is a period of time in which a ship cannot perform certain actions.
    /// </summary>
    [DataContract]
        public partial class Cooldown :  IEquatable<Cooldown>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Cooldown" /> class.
        /// </summary>
        /// <param name="shipSymbol">The symbol of the ship that is on cooldown (required).</param>
        /// <param name="totalSeconds">The total duration of the cooldown in seconds (required).</param>
        /// <param name="remainingSeconds">The remaining duration of the cooldown in seconds (required).</param>
        /// <param name="expiration">The date and time when the cooldown expires in ISO 8601 format.</param>
        public Cooldown(string shipSymbol = default(string), int? totalSeconds = default(int?), int? remainingSeconds = default(int?), DateTime? expiration = default(DateTime?))
        {
            // to ensure "shipSymbol" is required (not null)
            if (shipSymbol == null)
            {
                throw new InvalidDataException("shipSymbol is a required property for Cooldown and cannot be null");
            }
            else
            {
                this.ShipSymbol = shipSymbol;
            }
            // to ensure "totalSeconds" is required (not null)
            if (totalSeconds == null)
            {
                throw new InvalidDataException("totalSeconds is a required property for Cooldown and cannot be null");
            }
            else
            {
                this.TotalSeconds = totalSeconds;
            }
            // to ensure "remainingSeconds" is required (not null)
            if (remainingSeconds == null)
            {
                throw new InvalidDataException("remainingSeconds is a required property for Cooldown and cannot be null");
            }
            else
            {
                this.RemainingSeconds = remainingSeconds;
            }
            this.Expiration = expiration;
        }
        
        /// <summary>
        /// The symbol of the ship that is on cooldown
        /// </summary>
        /// <value>The symbol of the ship that is on cooldown</value>
        [DataMember(Name="shipSymbol", EmitDefaultValue=false)]
        public string ShipSymbol { get; set; }

        /// <summary>
        /// The total duration of the cooldown in seconds
        /// </summary>
        /// <value>The total duration of the cooldown in seconds</value>
        [DataMember(Name="totalSeconds", EmitDefaultValue=false)]
        public int? TotalSeconds { get; set; }

        /// <summary>
        /// The remaining duration of the cooldown in seconds
        /// </summary>
        /// <value>The remaining duration of the cooldown in seconds</value>
        [DataMember(Name="remainingSeconds", EmitDefaultValue=false)]
        public int? RemainingSeconds { get; set; }

        /// <summary>
        /// The date and time when the cooldown expires in ISO 8601 format
        /// </summary>
        /// <value>The date and time when the cooldown expires in ISO 8601 format</value>
        [DataMember(Name="expiration", EmitDefaultValue=false)]
        public DateTime? Expiration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Cooldown {\n");
            sb.Append("  ShipSymbol: ").Append(ShipSymbol).Append("\n");
            sb.Append("  TotalSeconds: ").Append(TotalSeconds).Append("\n");
            sb.Append("  RemainingSeconds: ").Append(RemainingSeconds).Append("\n");
            sb.Append("  Expiration: ").Append(Expiration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Cooldown);
        }

        /// <summary>
        /// Returns true if Cooldown instances are equal
        /// </summary>
        /// <param name="input">Instance of Cooldown to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Cooldown input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ShipSymbol == input.ShipSymbol ||
                    (this.ShipSymbol != null &&
                    this.ShipSymbol.Equals(input.ShipSymbol))
                ) && 
                (
                    this.TotalSeconds == input.TotalSeconds ||
                    (this.TotalSeconds != null &&
                    this.TotalSeconds.Equals(input.TotalSeconds))
                ) && 
                (
                    this.RemainingSeconds == input.RemainingSeconds ||
                    (this.RemainingSeconds != null &&
                    this.RemainingSeconds.Equals(input.RemainingSeconds))
                ) && 
                (
                    this.Expiration == input.Expiration ||
                    (this.Expiration != null &&
                    this.Expiration.Equals(input.Expiration))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ShipSymbol != null)
                    hashCode = hashCode * 59 + this.ShipSymbol.GetHashCode();
                if (this.TotalSeconds != null)
                    hashCode = hashCode * 59 + this.TotalSeconds.GetHashCode();
                if (this.RemainingSeconds != null)
                    hashCode = hashCode * 59 + this.RemainingSeconds.GetHashCode();
                if (this.Expiration != null)
                    hashCode = hashCode * 59 + this.Expiration.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
