/* 
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * OpenAPI spec version: 2.3.0
 * Contact: joel@spacetraders.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponse201Data
    /// </summary>
    [DataContract]
        public partial class InlineResponse201Data :  IEquatable<InlineResponse201Data>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse201Data" /> class.
        /// </summary>
        /// <param name="agent">agent (required).</param>
        /// <param name="contract">contract (required).</param>
        /// <param name="faction">faction (required).</param>
        /// <param name="ships">ships.</param>
        /// <param name="token">A Bearer token for accessing secured API endpoints. (required).</param>
        public InlineResponse201Data(Agent agent = default(Agent), Contract contract = default(Contract), Faction faction = default(Faction), List<Ship> ships = default(List<Ship>), string token = default(string))
        {
            // to ensure "agent" is required (not null)
            if (agent == null)
            {
                throw new InvalidDataException("agent is a required property for InlineResponse201Data and cannot be null");
            }
            else
            {
                this.Agent = agent;
            }
            // to ensure "contract" is required (not null)
            if (contract == null)
            {
                throw new InvalidDataException("contract is a required property for InlineResponse201Data and cannot be null");
            }
            else
            {
                this.Contract = contract;
            }
            // to ensure "faction" is required (not null)
            if (faction == null)
            {
                throw new InvalidDataException("faction is a required property for InlineResponse201Data and cannot be null");
            }
            else
            {
                this.Faction = faction;
            }
            // to ensure "token" is required (not null)
            if (token == null)
            {
                throw new InvalidDataException("token is a required property for InlineResponse201Data and cannot be null");
            }
            else
            {
                this.Token = token;
            }
            this.Ships = ships;
        }
        
        /// <summary>
        /// Gets or Sets Agent
        /// </summary>
        [DataMember(Name="agent", EmitDefaultValue=false)]
        public Agent Agent { get; set; }

        /// <summary>
        /// Gets or Sets Contract
        /// </summary>
        [DataMember(Name="contract", EmitDefaultValue=false)]
        public Contract Contract { get; set; }

        /// <summary>
        /// Gets or Sets Faction
        /// </summary>
        [DataMember(Name="faction", EmitDefaultValue=false)]
        public Faction Faction { get; set; }

        /// <summary>
        /// Gets or Sets Ships
        /// </summary>
        [DataMember(Name="ships", EmitDefaultValue=false)]
        public List<Ship> Ships { get; set; }

        /// <summary>
        /// A Bearer token for accessing secured API endpoints.
        /// </summary>
        /// <value>A Bearer token for accessing secured API endpoints.</value>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse201Data {\n");
            sb.Append("  Agent: ").Append(Agent).Append("\n");
            sb.Append("  Contract: ").Append(Contract).Append("\n");
            sb.Append("  Faction: ").Append(Faction).Append("\n");
            sb.Append("  Ships: ").Append(Ships).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse201Data);
        }

        /// <summary>
        /// Returns true if InlineResponse201Data instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse201Data to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse201Data input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Agent == input.Agent ||
                    (this.Agent != null &&
                    this.Agent.Equals(input.Agent))
                ) && 
                (
                    this.Contract == input.Contract ||
                    (this.Contract != null &&
                    this.Contract.Equals(input.Contract))
                ) && 
                (
                    this.Faction == input.Faction ||
                    (this.Faction != null &&
                    this.Faction.Equals(input.Faction))
                ) && 
                (
                    this.Ships == input.Ships ||
                    this.Ships != null &&
                    input.Ships != null &&
                    this.Ships.SequenceEqual(input.Ships)
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Agent != null)
                    hashCode = hashCode * 59 + this.Agent.GetHashCode();
                if (this.Contract != null)
                    hashCode = hashCode * 59 + this.Contract.GetHashCode();
                if (this.Faction != null)
                    hashCode = hashCode * 59 + this.Faction.GetHashCode();
                if (this.Ships != null)
                    hashCode = hashCode * 59 + this.Ships.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
