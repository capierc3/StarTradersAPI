/* 
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * OpenAPI spec version: 2.3.0
 * Contact: joel@spacetraders.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// Details of a system was that scanned.
    /// </summary>
    [DataContract]
        public partial class ScannedSystem :  IEquatable<ScannedSystem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScannedSystem" /> class.
        /// </summary>
        /// <param name="symbol">Symbol of the system. (required).</param>
        /// <param name="sectorSymbol">Symbol of the system&#x27;s sector. (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="x">Position in the universe in the x axis. (required).</param>
        /// <param name="y">Position in the universe in the y axis. (required).</param>
        /// <param name="distance">The system&#x27;s distance from the scanning ship. (required).</param>
        public ScannedSystem(string symbol = default(string), string sectorSymbol = default(string), SystemType type = default(SystemType), int? x = default(int?), int? y = default(int?), int? distance = default(int?))
        {
            // to ensure "symbol" is required (not null)
            if (symbol == null)
            {
                throw new InvalidDataException("symbol is a required property for ScannedSystem and cannot be null");
            }
            else
            {
                this.Symbol = symbol;
            }
            // to ensure "sectorSymbol" is required (not null)
            if (sectorSymbol == null)
            {
                throw new InvalidDataException("sectorSymbol is a required property for ScannedSystem and cannot be null");
            }
            else
            {
                this.SectorSymbol = sectorSymbol;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for ScannedSystem and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "x" is required (not null)
            if (x == null)
            {
                throw new InvalidDataException("x is a required property for ScannedSystem and cannot be null");
            }
            else
            {
                this.X = x;
            }
            // to ensure "y" is required (not null)
            if (y == null)
            {
                throw new InvalidDataException("y is a required property for ScannedSystem and cannot be null");
            }
            else
            {
                this.Y = y;
            }
            // to ensure "distance" is required (not null)
            if (distance == null)
            {
                throw new InvalidDataException("distance is a required property for ScannedSystem and cannot be null");
            }
            else
            {
                this.Distance = distance;
            }
        }
        
        /// <summary>
        /// Symbol of the system.
        /// </summary>
        /// <value>Symbol of the system.</value>
        [DataMember(Name="symbol", EmitDefaultValue=false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Symbol of the system&#x27;s sector.
        /// </summary>
        /// <value>Symbol of the system&#x27;s sector.</value>
        [DataMember(Name="sectorSymbol", EmitDefaultValue=false)]
        public string SectorSymbol { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public SystemType Type { get; set; }

        /// <summary>
        /// Position in the universe in the x axis.
        /// </summary>
        /// <value>Position in the universe in the x axis.</value>
        [DataMember(Name="x", EmitDefaultValue=false)]
        public int? X { get; set; }

        /// <summary>
        /// Position in the universe in the y axis.
        /// </summary>
        /// <value>Position in the universe in the y axis.</value>
        [DataMember(Name="y", EmitDefaultValue=false)]
        public int? Y { get; set; }

        /// <summary>
        /// The system&#x27;s distance from the scanning ship.
        /// </summary>
        /// <value>The system&#x27;s distance from the scanning ship.</value>
        [DataMember(Name="distance", EmitDefaultValue=false)]
        public int? Distance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScannedSystem {\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  SectorSymbol: ").Append(SectorSymbol).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  X: ").Append(X).Append("\n");
            sb.Append("  Y: ").Append(Y).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScannedSystem);
        }

        /// <summary>
        /// Returns true if ScannedSystem instances are equal
        /// </summary>
        /// <param name="input">Instance of ScannedSystem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScannedSystem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.SectorSymbol == input.SectorSymbol ||
                    (this.SectorSymbol != null &&
                    this.SectorSymbol.Equals(input.SectorSymbol))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.X == input.X ||
                    (this.X != null &&
                    this.X.Equals(input.X))
                ) && 
                (
                    this.Y == input.Y ||
                    (this.Y != null &&
                    this.Y.Equals(input.Y))
                ) && 
                (
                    this.Distance == input.Distance ||
                    (this.Distance != null &&
                    this.Distance.Equals(input.Distance))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.SectorSymbol != null)
                    hashCode = hashCode * 59 + this.SectorSymbol.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.X != null)
                    hashCode = hashCode * 59 + this.X.GetHashCode();
                if (this.Y != null)
                    hashCode = hashCode * 59 + this.Y.GetHashCode();
                if (this.Distance != null)
                    hashCode = hashCode * 59 + this.Distance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
