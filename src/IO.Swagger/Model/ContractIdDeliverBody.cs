/* 
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * OpenAPI spec version: 2.3.0
 * Contact: joel@spacetraders.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// ContractIdDeliverBody
    /// </summary>
    [DataContract]
        public partial class ContractIdDeliverBody :  IEquatable<ContractIdDeliverBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContractIdDeliverBody" /> class.
        /// </summary>
        /// <param name="shipSymbol">Symbol of a ship located in the destination to deliver a contract and that has a good to deliver in its cargo. (required).</param>
        /// <param name="tradeSymbol">The symbol of the good to deliver. (required).</param>
        /// <param name="units">Amount of units to deliver. (required).</param>
        public ContractIdDeliverBody(string shipSymbol = default(string), string tradeSymbol = default(string), int? units = default(int?))
        {
            // to ensure "shipSymbol" is required (not null)
            if (shipSymbol == null)
            {
                throw new InvalidDataException("shipSymbol is a required property for ContractIdDeliverBody and cannot be null");
            }
            else
            {
                this.ShipSymbol = shipSymbol;
            }
            // to ensure "tradeSymbol" is required (not null)
            if (tradeSymbol == null)
            {
                throw new InvalidDataException("tradeSymbol is a required property for ContractIdDeliverBody and cannot be null");
            }
            else
            {
                this.TradeSymbol = tradeSymbol;
            }
            // to ensure "units" is required (not null)
            if (units == null)
            {
                throw new InvalidDataException("units is a required property for ContractIdDeliverBody and cannot be null");
            }
            else
            {
                this.Units = units;
            }
        }
        
        /// <summary>
        /// Symbol of a ship located in the destination to deliver a contract and that has a good to deliver in its cargo.
        /// </summary>
        /// <value>Symbol of a ship located in the destination to deliver a contract and that has a good to deliver in its cargo.</value>
        [DataMember(Name="shipSymbol", EmitDefaultValue=false)]
        public string ShipSymbol { get; set; }

        /// <summary>
        /// The symbol of the good to deliver.
        /// </summary>
        /// <value>The symbol of the good to deliver.</value>
        [DataMember(Name="tradeSymbol", EmitDefaultValue=false)]
        public string TradeSymbol { get; set; }

        /// <summary>
        /// Amount of units to deliver.
        /// </summary>
        /// <value>Amount of units to deliver.</value>
        [DataMember(Name="units", EmitDefaultValue=false)]
        public int? Units { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContractIdDeliverBody {\n");
            sb.Append("  ShipSymbol: ").Append(ShipSymbol).Append("\n");
            sb.Append("  TradeSymbol: ").Append(TradeSymbol).Append("\n");
            sb.Append("  Units: ").Append(Units).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContractIdDeliverBody);
        }

        /// <summary>
        /// Returns true if ContractIdDeliverBody instances are equal
        /// </summary>
        /// <param name="input">Instance of ContractIdDeliverBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContractIdDeliverBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ShipSymbol == input.ShipSymbol ||
                    (this.ShipSymbol != null &&
                    this.ShipSymbol.Equals(input.ShipSymbol))
                ) && 
                (
                    this.TradeSymbol == input.TradeSymbol ||
                    (this.TradeSymbol != null &&
                    this.TradeSymbol.Equals(input.TradeSymbol))
                ) && 
                (
                    this.Units == input.Units ||
                    (this.Units != null &&
                    this.Units.Equals(input.Units))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ShipSymbol != null)
                    hashCode = hashCode * 59 + this.ShipSymbol.GetHashCode();
                if (this.TradeSymbol != null)
                    hashCode = hashCode * 59 + this.TradeSymbol.GetHashCode();
                if (this.Units != null)
                    hashCode = hashCode * 59 + this.Units.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
