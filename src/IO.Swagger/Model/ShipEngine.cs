/* 
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * OpenAPI spec version: 2.3.0
 * Contact: joel@spacetraders.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// The engine determines how quickly a ship travels between waypoints.
    /// </summary>
    [DataContract]
        public partial class ShipEngine :  IEquatable<ShipEngine>, IValidatableObject
    {
        /// <summary>
        /// The symbol of the engine.
        /// </summary>
        /// <value>The symbol of the engine.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum SymbolEnum
        {
            /// <summary>
            /// Enum IMPULSEDRIVEI for value: ENGINE_IMPULSE_DRIVE_I
            /// </summary>
            [EnumMember(Value = "ENGINE_IMPULSE_DRIVE_I")]
            IMPULSEDRIVEI = 1,
            /// <summary>
            /// Enum IONDRIVEI for value: ENGINE_ION_DRIVE_I
            /// </summary>
            [EnumMember(Value = "ENGINE_ION_DRIVE_I")]
            IONDRIVEI = 2,
            /// <summary>
            /// Enum IONDRIVEII for value: ENGINE_ION_DRIVE_II
            /// </summary>
            [EnumMember(Value = "ENGINE_ION_DRIVE_II")]
            IONDRIVEII = 3,
            /// <summary>
            /// Enum HYPERDRIVEI for value: ENGINE_HYPER_DRIVE_I
            /// </summary>
            [EnumMember(Value = "ENGINE_HYPER_DRIVE_I")]
            HYPERDRIVEI = 4        }
        /// <summary>
        /// The symbol of the engine.
        /// </summary>
        /// <value>The symbol of the engine.</value>
        [DataMember(Name="symbol", EmitDefaultValue=false)]
        public SymbolEnum Symbol { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipEngine" /> class.
        /// </summary>
        /// <param name="symbol">The symbol of the engine. (required).</param>
        /// <param name="name">The name of the engine. (required).</param>
        /// <param name="description">The description of the engine. (required).</param>
        /// <param name="condition">condition (required).</param>
        /// <param name="integrity">integrity (required).</param>
        /// <param name="speed">The speed stat of this engine. The higher the speed, the faster a ship can travel from one point to another. Reduces the time of arrival when navigating the ship. (required).</param>
        /// <param name="requirements">requirements (required).</param>
        /// <param name="quality">quality (required).</param>
        public ShipEngine(SymbolEnum symbol = default(SymbolEnum), string name = default(string), string description = default(string), double? condition = default(double?), double? integrity = default(double?), int? speed = default(int?), ShipRequirements requirements = default(ShipRequirements), decimal? quality = default(decimal?))
        {
            // to ensure "symbol" is required (not null)
            if (symbol == null)
            {
                throw new InvalidDataException("symbol is a required property for ShipEngine and cannot be null");
            }
            else
            {
                this.Symbol = symbol;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for ShipEngine and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for ShipEngine and cannot be null");
            }
            else
            {
                this.Description = description;
            }
            // to ensure "condition" is required (not null)
            if (condition == null)
            {
                throw new InvalidDataException("condition is a required property for ShipEngine and cannot be null");
            }
            else
            {
                this.Condition = condition;
            }
            // to ensure "integrity" is required (not null)
            if (integrity == null)
            {
                throw new InvalidDataException("integrity is a required property for ShipEngine and cannot be null");
            }
            else
            {
                this.Integrity = integrity;
            }
            // to ensure "speed" is required (not null)
            if (speed == null)
            {
                throw new InvalidDataException("speed is a required property for ShipEngine and cannot be null");
            }
            else
            {
                this.Speed = speed;
            }
            // to ensure "requirements" is required (not null)
            if (requirements == null)
            {
                throw new InvalidDataException("requirements is a required property for ShipEngine and cannot be null");
            }
            else
            {
                this.Requirements = requirements;
            }
            // to ensure "quality" is required (not null)
            if (quality == null)
            {
                throw new InvalidDataException("quality is a required property for ShipEngine and cannot be null");
            }
            else
            {
                this.Quality = quality;
            }
        }
        

        /// <summary>
        /// The name of the engine.
        /// </summary>
        /// <value>The name of the engine.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The description of the engine.
        /// </summary>
        /// <value>The description of the engine.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Condition
        /// </summary>
        [DataMember(Name="condition", EmitDefaultValue=false)]
        public double? Condition { get; set; }

        /// <summary>
        /// Gets or Sets Integrity
        /// </summary>
        [DataMember(Name="integrity", EmitDefaultValue=false)]
        public double? Integrity { get; set; }

        /// <summary>
        /// The speed stat of this engine. The higher the speed, the faster a ship can travel from one point to another. Reduces the time of arrival when navigating the ship.
        /// </summary>
        /// <value>The speed stat of this engine. The higher the speed, the faster a ship can travel from one point to another. Reduces the time of arrival when navigating the ship.</value>
        [DataMember(Name="speed", EmitDefaultValue=false)]
        public int? Speed { get; set; }

        /// <summary>
        /// Gets or Sets Requirements
        /// </summary>
        [DataMember(Name="requirements", EmitDefaultValue=false)]
        public ShipRequirements Requirements { get; set; }

        /// <summary>
        /// Gets or Sets Quality
        /// </summary>
        [DataMember(Name="quality", EmitDefaultValue=false)]
        public decimal? Quality { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShipEngine {\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  Integrity: ").Append(Integrity).Append("\n");
            sb.Append("  Speed: ").Append(Speed).Append("\n");
            sb.Append("  Requirements: ").Append(Requirements).Append("\n");
            sb.Append("  Quality: ").Append(Quality).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShipEngine);
        }

        /// <summary>
        /// Returns true if ShipEngine instances are equal
        /// </summary>
        /// <param name="input">Instance of ShipEngine to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShipEngine input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Condition == input.Condition ||
                    (this.Condition != null &&
                    this.Condition.Equals(input.Condition))
                ) && 
                (
                    this.Integrity == input.Integrity ||
                    (this.Integrity != null &&
                    this.Integrity.Equals(input.Integrity))
                ) && 
                (
                    this.Speed == input.Speed ||
                    (this.Speed != null &&
                    this.Speed.Equals(input.Speed))
                ) && 
                (
                    this.Requirements == input.Requirements ||
                    (this.Requirements != null &&
                    this.Requirements.Equals(input.Requirements))
                ) && 
                (
                    this.Quality == input.Quality ||
                    (this.Quality != null &&
                    this.Quality.Equals(input.Quality))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Condition != null)
                    hashCode = hashCode * 59 + this.Condition.GetHashCode();
                if (this.Integrity != null)
                    hashCode = hashCode * 59 + this.Integrity.GetHashCode();
                if (this.Speed != null)
                    hashCode = hashCode * 59 + this.Speed.GetHashCode();
                if (this.Requirements != null)
                    hashCode = hashCode * 59 + this.Requirements.GetHashCode();
                if (this.Quality != null)
                    hashCode = hashCode * 59 + this.Quality.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
