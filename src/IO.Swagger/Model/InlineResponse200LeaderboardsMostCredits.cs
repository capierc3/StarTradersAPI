/* 
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * OpenAPI spec version: 2.3.0
 * Contact: joel@spacetraders.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponse200LeaderboardsMostCredits
    /// </summary>
    [DataContract]
        public partial class InlineResponse200LeaderboardsMostCredits :  IEquatable<InlineResponse200LeaderboardsMostCredits>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse200LeaderboardsMostCredits" /> class.
        /// </summary>
        /// <param name="agentSymbol">Symbol of the agent. (required).</param>
        /// <param name="credits">Amount of credits. (required).</param>
        public InlineResponse200LeaderboardsMostCredits(string agentSymbol = default(string), long? credits = default(long?))
        {
            // to ensure "agentSymbol" is required (not null)
            if (agentSymbol == null)
            {
                throw new InvalidDataException("agentSymbol is a required property for InlineResponse200LeaderboardsMostCredits and cannot be null");
            }
            else
            {
                this.AgentSymbol = agentSymbol;
            }
            // to ensure "credits" is required (not null)
            if (credits == null)
            {
                throw new InvalidDataException("credits is a required property for InlineResponse200LeaderboardsMostCredits and cannot be null");
            }
            else
            {
                this.Credits = credits;
            }
        }
        
        /// <summary>
        /// Symbol of the agent.
        /// </summary>
        /// <value>Symbol of the agent.</value>
        [DataMember(Name="agentSymbol", EmitDefaultValue=false)]
        public string AgentSymbol { get; set; }

        /// <summary>
        /// Amount of credits.
        /// </summary>
        /// <value>Amount of credits.</value>
        [DataMember(Name="credits", EmitDefaultValue=false)]
        public long? Credits { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse200LeaderboardsMostCredits {\n");
            sb.Append("  AgentSymbol: ").Append(AgentSymbol).Append("\n");
            sb.Append("  Credits: ").Append(Credits).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse200LeaderboardsMostCredits);
        }

        /// <summary>
        /// Returns true if InlineResponse200LeaderboardsMostCredits instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse200LeaderboardsMostCredits to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse200LeaderboardsMostCredits input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AgentSymbol == input.AgentSymbol ||
                    (this.AgentSymbol != null &&
                    this.AgentSymbol.Equals(input.AgentSymbol))
                ) && 
                (
                    this.Credits == input.Credits ||
                    (this.Credits != null &&
                    this.Credits.Equals(input.Credits))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AgentSymbol != null)
                    hashCode = hashCode * 59 + this.AgentSymbol.GetHashCode();
                if (this.Credits != null)
                    hashCode = hashCode * 59 + this.Credits.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
