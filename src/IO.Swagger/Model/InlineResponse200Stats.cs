/* 
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * OpenAPI spec version: 2.3.0
 * Contact: joel@spacetraders.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponse200Stats
    /// </summary>
    [DataContract]
        public partial class InlineResponse200Stats :  IEquatable<InlineResponse200Stats>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse200Stats" /> class.
        /// </summary>
        /// <param name="accounts">Total number of accounts registered on the game server..</param>
        /// <param name="agents">Number of registered agents in the game. (required).</param>
        /// <param name="ships">Total number of ships in the game. (required).</param>
        /// <param name="systems">Total number of systems in the game. (required).</param>
        /// <param name="waypoints">Total number of waypoints in the game. (required).</param>
        public InlineResponse200Stats(int? accounts = default(int?), int? agents = default(int?), int? ships = default(int?), int? systems = default(int?), int? waypoints = default(int?))
        {
            // to ensure "agents" is required (not null)
            if (agents == null)
            {
                throw new InvalidDataException("agents is a required property for InlineResponse200Stats and cannot be null");
            }
            else
            {
                this.Agents = agents;
            }
            // to ensure "ships" is required (not null)
            if (ships == null)
            {
                throw new InvalidDataException("ships is a required property for InlineResponse200Stats and cannot be null");
            }
            else
            {
                this.Ships = ships;
            }
            // to ensure "systems" is required (not null)
            if (systems == null)
            {
                throw new InvalidDataException("systems is a required property for InlineResponse200Stats and cannot be null");
            }
            else
            {
                this.Systems = systems;
            }
            // to ensure "waypoints" is required (not null)
            if (waypoints == null)
            {
                throw new InvalidDataException("waypoints is a required property for InlineResponse200Stats and cannot be null");
            }
            else
            {
                this.Waypoints = waypoints;
            }
            this.Accounts = accounts;
        }
        
        /// <summary>
        /// Total number of accounts registered on the game server.
        /// </summary>
        /// <value>Total number of accounts registered on the game server.</value>
        [DataMember(Name="accounts", EmitDefaultValue=false)]
        public int? Accounts { get; set; }

        /// <summary>
        /// Number of registered agents in the game.
        /// </summary>
        /// <value>Number of registered agents in the game.</value>
        [DataMember(Name="agents", EmitDefaultValue=false)]
        public int? Agents { get; set; }

        /// <summary>
        /// Total number of ships in the game.
        /// </summary>
        /// <value>Total number of ships in the game.</value>
        [DataMember(Name="ships", EmitDefaultValue=false)]
        public int? Ships { get; set; }

        /// <summary>
        /// Total number of systems in the game.
        /// </summary>
        /// <value>Total number of systems in the game.</value>
        [DataMember(Name="systems", EmitDefaultValue=false)]
        public int? Systems { get; set; }

        /// <summary>
        /// Total number of waypoints in the game.
        /// </summary>
        /// <value>Total number of waypoints in the game.</value>
        [DataMember(Name="waypoints", EmitDefaultValue=false)]
        public int? Waypoints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse200Stats {\n");
            sb.Append("  Accounts: ").Append(Accounts).Append("\n");
            sb.Append("  Agents: ").Append(Agents).Append("\n");
            sb.Append("  Ships: ").Append(Ships).Append("\n");
            sb.Append("  Systems: ").Append(Systems).Append("\n");
            sb.Append("  Waypoints: ").Append(Waypoints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse200Stats);
        }

        /// <summary>
        /// Returns true if InlineResponse200Stats instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse200Stats to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse200Stats input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Accounts == input.Accounts ||
                    (this.Accounts != null &&
                    this.Accounts.Equals(input.Accounts))
                ) && 
                (
                    this.Agents == input.Agents ||
                    (this.Agents != null &&
                    this.Agents.Equals(input.Agents))
                ) && 
                (
                    this.Ships == input.Ships ||
                    (this.Ships != null &&
                    this.Ships.Equals(input.Ships))
                ) && 
                (
                    this.Systems == input.Systems ||
                    (this.Systems != null &&
                    this.Systems.Equals(input.Systems))
                ) && 
                (
                    this.Waypoints == input.Waypoints ||
                    (this.Waypoints != null &&
                    this.Waypoints.Equals(input.Waypoints))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Accounts != null)
                    hashCode = hashCode * 59 + this.Accounts.GetHashCode();
                if (this.Agents != null)
                    hashCode = hashCode * 59 + this.Agents.GetHashCode();
                if (this.Ships != null)
                    hashCode = hashCode * 59 + this.Ships.GetHashCode();
                if (this.Systems != null)
                    hashCode = hashCode * 59 + this.Systems.GetHashCode();
                if (this.Waypoints != null)
                    hashCode = hashCode * 59 + this.Waypoints.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
