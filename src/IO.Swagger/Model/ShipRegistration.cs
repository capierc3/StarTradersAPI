/* 
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * OpenAPI spec version: 2.3.0
 * Contact: joel@spacetraders.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// The public registration information of the ship
    /// </summary>
    [DataContract]
        public partial class ShipRegistration :  IEquatable<ShipRegistration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipRegistration" /> class.
        /// </summary>
        /// <param name="name">The agent&#x27;s registered name of the ship (required).</param>
        /// <param name="factionSymbol">The symbol of the faction the ship is registered with (required).</param>
        /// <param name="role">role (required).</param>
        public ShipRegistration(string name = default(string), string factionSymbol = default(string), ShipRole role = default(ShipRole))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for ShipRegistration and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "factionSymbol" is required (not null)
            if (factionSymbol == null)
            {
                throw new InvalidDataException("factionSymbol is a required property for ShipRegistration and cannot be null");
            }
            else
            {
                this.FactionSymbol = factionSymbol;
            }
            // to ensure "role" is required (not null)
            if (role == null)
            {
                throw new InvalidDataException("role is a required property for ShipRegistration and cannot be null");
            }
            else
            {
                this.Role = role;
            }
        }
        
        /// <summary>
        /// The agent&#x27;s registered name of the ship
        /// </summary>
        /// <value>The agent&#x27;s registered name of the ship</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The symbol of the faction the ship is registered with
        /// </summary>
        /// <value>The symbol of the faction the ship is registered with</value>
        [DataMember(Name="factionSymbol", EmitDefaultValue=false)]
        public string FactionSymbol { get; set; }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [DataMember(Name="role", EmitDefaultValue=false)]
        public ShipRole Role { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShipRegistration {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FactionSymbol: ").Append(FactionSymbol).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShipRegistration);
        }

        /// <summary>
        /// Returns true if ShipRegistration instances are equal
        /// </summary>
        /// <param name="input">Instance of ShipRegistration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShipRegistration input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.FactionSymbol == input.FactionSymbol ||
                    (this.FactionSymbol != null &&
                    this.FactionSymbol.Equals(input.FactionSymbol))
                ) && 
                (
                    this.Role == input.Role ||
                    (this.Role != null &&
                    this.Role.Equals(input.Role))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.FactionSymbol != null)
                    hashCode = hashCode * 59 + this.FactionSymbol.GetHashCode();
                if (this.Role != null)
                    hashCode = hashCode * 59 + this.Role.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
