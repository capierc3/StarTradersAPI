/* 
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * OpenAPI spec version: 2.3.0
 * Contact: joel@spacetraders.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// A resource survey of a waypoint, detailing a specific extraction location and the types of resources that can be found there.
    /// </summary>
    [DataContract]
        public partial class Survey :  IEquatable<Survey>, IValidatableObject
    {
        /// <summary>
        /// The size of the deposit. This value indicates how much can be extracted from the survey before it is exhausted.
        /// </summary>
        /// <value>The size of the deposit. This value indicates how much can be extracted from the survey before it is exhausted.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum SizeEnum
        {
            /// <summary>
            /// Enum SMALL for value: SMALL
            /// </summary>
            [EnumMember(Value = "SMALL")]
            SMALL = 1,
            /// <summary>
            /// Enum MODERATE for value: MODERATE
            /// </summary>
            [EnumMember(Value = "MODERATE")]
            MODERATE = 2,
            /// <summary>
            /// Enum LARGE for value: LARGE
            /// </summary>
            [EnumMember(Value = "LARGE")]
            LARGE = 3        }
        /// <summary>
        /// The size of the deposit. This value indicates how much can be extracted from the survey before it is exhausted.
        /// </summary>
        /// <value>The size of the deposit. This value indicates how much can be extracted from the survey before it is exhausted.</value>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public SizeEnum Size { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Survey" /> class.
        /// </summary>
        /// <param name="signature">A unique signature for the location of this survey. This signature is verified when attempting an extraction using this survey. (required).</param>
        /// <param name="symbol">The symbol of the waypoint that this survey is for. (required).</param>
        /// <param name="deposits">A list of deposits that can be found at this location. A ship will extract one of these deposits when using this survey in an extraction request. If multiple deposits of the same type are present, the chance of extracting that deposit is increased. (required).</param>
        /// <param name="expiration">The date and time when the survey expires. After this date and time, the survey will no longer be available for extraction. (required).</param>
        /// <param name="size">The size of the deposit. This value indicates how much can be extracted from the survey before it is exhausted. (required).</param>
        public Survey(string signature = default(string), string symbol = default(string), List<SurveyDeposit> deposits = default(List<SurveyDeposit>), DateTime? expiration = default(DateTime?), SizeEnum size = default(SizeEnum))
        {
            // to ensure "signature" is required (not null)
            if (signature == null)
            {
                throw new InvalidDataException("signature is a required property for Survey and cannot be null");
            }
            else
            {
                this.Signature = signature;
            }
            // to ensure "symbol" is required (not null)
            if (symbol == null)
            {
                throw new InvalidDataException("symbol is a required property for Survey and cannot be null");
            }
            else
            {
                this.Symbol = symbol;
            }
            // to ensure "deposits" is required (not null)
            if (deposits == null)
            {
                throw new InvalidDataException("deposits is a required property for Survey and cannot be null");
            }
            else
            {
                this.Deposits = deposits;
            }
            // to ensure "expiration" is required (not null)
            if (expiration == null)
            {
                throw new InvalidDataException("expiration is a required property for Survey and cannot be null");
            }
            else
            {
                this.Expiration = expiration;
            }
            // to ensure "size" is required (not null)
            if (size == null)
            {
                throw new InvalidDataException("size is a required property for Survey and cannot be null");
            }
            else
            {
                this.Size = size;
            }
        }
        
        /// <summary>
        /// A unique signature for the location of this survey. This signature is verified when attempting an extraction using this survey.
        /// </summary>
        /// <value>A unique signature for the location of this survey. This signature is verified when attempting an extraction using this survey.</value>
        [DataMember(Name="signature", EmitDefaultValue=false)]
        public string Signature { get; set; }

        /// <summary>
        /// The symbol of the waypoint that this survey is for.
        /// </summary>
        /// <value>The symbol of the waypoint that this survey is for.</value>
        [DataMember(Name="symbol", EmitDefaultValue=false)]
        public string Symbol { get; set; }

        /// <summary>
        /// A list of deposits that can be found at this location. A ship will extract one of these deposits when using this survey in an extraction request. If multiple deposits of the same type are present, the chance of extracting that deposit is increased.
        /// </summary>
        /// <value>A list of deposits that can be found at this location. A ship will extract one of these deposits when using this survey in an extraction request. If multiple deposits of the same type are present, the chance of extracting that deposit is increased.</value>
        [DataMember(Name="deposits", EmitDefaultValue=false)]
        public List<SurveyDeposit> Deposits { get; set; }

        /// <summary>
        /// The date and time when the survey expires. After this date and time, the survey will no longer be available for extraction.
        /// </summary>
        /// <value>The date and time when the survey expires. After this date and time, the survey will no longer be available for extraction.</value>
        [DataMember(Name="expiration", EmitDefaultValue=false)]
        public DateTime? Expiration { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Survey {\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Deposits: ").Append(Deposits).Append("\n");
            sb.Append("  Expiration: ").Append(Expiration).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Survey);
        }

        /// <summary>
        /// Returns true if Survey instances are equal
        /// </summary>
        /// <param name="input">Instance of Survey to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Survey input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Signature == input.Signature ||
                    (this.Signature != null &&
                    this.Signature.Equals(input.Signature))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.Deposits == input.Deposits ||
                    this.Deposits != null &&
                    input.Deposits != null &&
                    this.Deposits.SequenceEqual(input.Deposits)
                ) && 
                (
                    this.Expiration == input.Expiration ||
                    (this.Expiration != null &&
                    this.Expiration.Equals(input.Expiration))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Signature != null)
                    hashCode = hashCode * 59 + this.Signature.GetHashCode();
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.Deposits != null)
                    hashCode = hashCode * 59 + this.Deposits.GetHashCode();
                if (this.Expiration != null)
                    hashCode = hashCode * 59 + this.Expiration.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
