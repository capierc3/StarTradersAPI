/* 
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * OpenAPI spec version: 2.3.0
 * Contact: joel@spacetraders.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IFleetApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Chart
        /// </summary>
        /// <remarks>
        /// Command a ship to chart the waypoint at its current location.  Most waypoints in the universe are uncharted by default. These waypoints have their traits hidden until they have been charted by a ship.  Charting a waypoint will record your agent as the one who created the chart, and all other agents would also be able to see the waypoint&#x27;s traits. Charting a waypoint gives you a one time reward of credits based on the rarity of the waypoint&#x27;s traits.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>InlineResponse2013</returns>
        InlineResponse2013 CreateChart (string shipSymbol);

        /// <summary>
        /// Create Chart
        /// </summary>
        /// <remarks>
        /// Command a ship to chart the waypoint at its current location.  Most waypoints in the universe are uncharted by default. These waypoints have their traits hidden until they have been charted by a ship.  Charting a waypoint will record your agent as the one who created the chart, and all other agents would also be able to see the waypoint&#x27;s traits. Charting a waypoint gives you a one time reward of credits based on the rarity of the waypoint&#x27;s traits.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>ApiResponse of InlineResponse2013</returns>
        ApiResponse<InlineResponse2013> CreateChartWithHttpInfo (string shipSymbol);
        /// <summary>
        /// Scan Ships
        /// </summary>
        /// <remarks>
        /// Scan for nearby ships, retrieving information for all ships in range.  Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>InlineResponse20110</returns>
        InlineResponse20110 CreateShipShipScan (string shipSymbol);

        /// <summary>
        /// Scan Ships
        /// </summary>
        /// <remarks>
        /// Scan for nearby ships, retrieving information for all ships in range.  Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>ApiResponse of InlineResponse20110</returns>
        ApiResponse<InlineResponse20110> CreateShipShipScanWithHttpInfo (string shipSymbol);
        /// <summary>
        /// Scan Systems
        /// </summary>
        /// <remarks>
        /// Scan for nearby systems, retrieving information on the systems&#x27; distance from the ship and their waypoints. Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>InlineResponse2018</returns>
        InlineResponse2018 CreateShipSystemScan (string shipSymbol);

        /// <summary>
        /// Scan Systems
        /// </summary>
        /// <remarks>
        /// Scan for nearby systems, retrieving information on the systems&#x27; distance from the ship and their waypoints. Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>ApiResponse of InlineResponse2018</returns>
        ApiResponse<InlineResponse2018> CreateShipSystemScanWithHttpInfo (string shipSymbol);
        /// <summary>
        /// Scan Waypoints
        /// </summary>
        /// <remarks>
        /// Scan for nearby waypoints, retrieving detailed information on each waypoint in range. Scanning uncharted waypoints will allow you to ignore their uncharted state and will list the waypoints&#x27; traits.  Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>InlineResponse2019</returns>
        InlineResponse2019 CreateShipWaypointScan (string shipSymbol);

        /// <summary>
        /// Scan Waypoints
        /// </summary>
        /// <remarks>
        /// Scan for nearby waypoints, retrieving detailed information on each waypoint in range. Scanning uncharted waypoints will allow you to ignore their uncharted state and will list the waypoints&#x27; traits.  Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>ApiResponse of InlineResponse2019</returns>
        ApiResponse<InlineResponse2019> CreateShipWaypointScanWithHttpInfo (string shipSymbol);
        /// <summary>
        /// Create Survey
        /// </summary>
        /// <remarks>
        /// Create surveys on a waypoint that can be extracted such as asteroid fields. A survey focuses on specific types of deposits from the extracted location. When ships extract using this survey, they are guaranteed to procure a high amount of one of the goods in the survey.  In order to use a survey, send the entire survey details in the body of the extract request.  Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.  Your ship will enter a cooldown after surveying in which it is unable to perform certain actions. Surveys will eventually expire after a period of time or will be exhausted after being extracted several times based on the survey&#x27;s size. Multiple ships can use the same survey for extraction.  A ship must have the &#x60;Surveyor&#x60; mount installed in order to use this function.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>InlineResponse2014</returns>
        InlineResponse2014 CreateSurvey (string shipSymbol);

        /// <summary>
        /// Create Survey
        /// </summary>
        /// <remarks>
        /// Create surveys on a waypoint that can be extracted such as asteroid fields. A survey focuses on specific types of deposits from the extracted location. When ships extract using this survey, they are guaranteed to procure a high amount of one of the goods in the survey.  In order to use a survey, send the entire survey details in the body of the extract request.  Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.  Your ship will enter a cooldown after surveying in which it is unable to perform certain actions. Surveys will eventually expire after a period of time or will be exhausted after being extracted several times based on the survey&#x27;s size. Multiple ships can use the same survey for extraction.  A ship must have the &#x60;Surveyor&#x60; mount installed in order to use this function.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>ApiResponse of InlineResponse2014</returns>
        ApiResponse<InlineResponse2014> CreateSurveyWithHttpInfo (string shipSymbol);
        /// <summary>
        /// Dock Ship
        /// </summary>
        /// <remarks>
        /// Attempt to dock your ship at its current location. Docking will only succeed if your ship is capable of docking at the time of the request.  Docked ships can access elements in their current location, such as the market or a shipyard, but cannot do actions that require the ship to be above surface such as navigating or extracting.  The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>DockShip200Response</returns>
        DockShip200Response DockShip (string shipSymbol);

        /// <summary>
        /// Dock Ship
        /// </summary>
        /// <remarks>
        /// Attempt to dock your ship at its current location. Docking will only succeed if your ship is capable of docking at the time of the request.  Docked ships can access elements in their current location, such as the market or a shipyard, but cannot do actions that require the ship to be above surface such as navigating or extracting.  The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>ApiResponse of DockShip200Response</returns>
        ApiResponse<DockShip200Response> DockShipWithHttpInfo (string shipSymbol);
        /// <summary>
        /// Extract Resources
        /// </summary>
        /// <remarks>
        /// Extract resources from a waypoint that can be extracted, such as asteroid fields, into your ship. Send an optional survey as the payload to target specific yields.  The ship must be in orbit to be able to extract and must have mining equipments installed that can extract goods, such as the &#x60;Gas Siphon&#x60; mount for gas-based goods or &#x60;Mining Laser&#x60; mount for ore-based goods.  The survey property is now deprecated. See the &#x60;extract/survey&#x60; endpoint for more details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InlineResponse2015</returns>
        InlineResponse2015 ExtractResources (string shipSymbol, ShipSymbolExtractBody body = null);

        /// <summary>
        /// Extract Resources
        /// </summary>
        /// <remarks>
        /// Extract resources from a waypoint that can be extracted, such as asteroid fields, into your ship. Send an optional survey as the payload to target specific yields.  The ship must be in orbit to be able to extract and must have mining equipments installed that can extract goods, such as the &#x60;Gas Siphon&#x60; mount for gas-based goods or &#x60;Mining Laser&#x60; mount for ore-based goods.  The survey property is now deprecated. See the &#x60;extract/survey&#x60; endpoint for more details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2015</returns>
        ApiResponse<InlineResponse2015> ExtractResourcesWithHttpInfo (string shipSymbol, ShipSymbolExtractBody body = null);
        /// <summary>
        /// Extract Resources with Survey
        /// </summary>
        /// <remarks>
        /// Use a survey when extracting resources from a waypoint. This endpoint requires a survey as the payload, which allows your ship to extract specific yields.  Send the full survey object as the payload which will be validated according to the signature. If the signature is invalid, or any properties of the survey are changed, the request will fail.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InlineResponse2017</returns>
        InlineResponse2017 ExtractResourcesWithSurvey (string shipSymbol, Survey body = null);

        /// <summary>
        /// Extract Resources with Survey
        /// </summary>
        /// <remarks>
        /// Use a survey when extracting resources from a waypoint. This endpoint requires a survey as the payload, which allows your ship to extract specific yields.  Send the full survey object as the payload which will be validated according to the signature. If the signature is invalid, or any properties of the survey are changed, the request will fail.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2017</returns>
        ApiResponse<InlineResponse2017> ExtractResourcesWithSurveyWithHttpInfo (string shipSymbol, Survey body = null);
        /// <summary>
        /// Get Mounts
        /// </summary>
        /// <remarks>
        /// Get the mounts installed on a ship.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#x27;s symbol.</param>
        /// <returns>GetMounts200Response</returns>
        GetMounts200Response GetMounts (string shipSymbol);

        /// <summary>
        /// Get Mounts
        /// </summary>
        /// <remarks>
        /// Get the mounts installed on a ship.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#x27;s symbol.</param>
        /// <returns>ApiResponse of GetMounts200Response</returns>
        ApiResponse<GetMounts200Response> GetMountsWithHttpInfo (string shipSymbol);
        /// <summary>
        /// Get Ship
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a ship under your agent&#x27;s ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>InlineResponse20019</returns>
        InlineResponse20019 GetMyShip (string shipSymbol);

        /// <summary>
        /// Get Ship
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a ship under your agent&#x27;s ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        ApiResponse<InlineResponse20019> GetMyShipWithHttpInfo (string shipSymbol);
        /// <summary>
        /// Get Ship Cargo
        /// </summary>
        /// <remarks>
        /// Retrieve the cargo of a ship under your agent&#x27;s ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>InlineResponse20020</returns>
        InlineResponse20020 GetMyShipCargo (string shipSymbol);

        /// <summary>
        /// Get Ship Cargo
        /// </summary>
        /// <remarks>
        /// Retrieve the cargo of a ship under your agent&#x27;s ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>ApiResponse of InlineResponse20020</returns>
        ApiResponse<InlineResponse20020> GetMyShipCargoWithHttpInfo (string shipSymbol);
        /// <summary>
        /// List Ships
        /// </summary>
        /// <remarks>
        /// Return a paginated list of all of ships under your agent&#x27;s ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <returns>InlineResponse20018</returns>
        InlineResponse20018 GetMyShips (int? page = null, int? limit = null);

        /// <summary>
        /// List Ships
        /// </summary>
        /// <remarks>
        /// Return a paginated list of all of ships under your agent&#x27;s ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <returns>ApiResponse of InlineResponse20018</returns>
        ApiResponse<InlineResponse20018> GetMyShipsWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get Repair Ship
        /// </summary>
        /// <remarks>
        /// Get the cost of repairing a ship.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>InlineResponse20031</returns>
        InlineResponse20031 GetRepairShip (string shipSymbol);

        /// <summary>
        /// Get Repair Ship
        /// </summary>
        /// <remarks>
        /// Get the cost of repairing a ship.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>ApiResponse of InlineResponse20031</returns>
        ApiResponse<InlineResponse20031> GetRepairShipWithHttpInfo (string shipSymbol);
        /// <summary>
        /// Get Scrap Ship
        /// </summary>
        /// <remarks>
        /// Get the amount of value that will be returned when scrapping a ship.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>InlineResponse20029</returns>
        InlineResponse20029 GetScrapShip (string shipSymbol);

        /// <summary>
        /// Get Scrap Ship
        /// </summary>
        /// <remarks>
        /// Get the amount of value that will be returned when scrapping a ship.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>ApiResponse of InlineResponse20029</returns>
        ApiResponse<InlineResponse20029> GetScrapShipWithHttpInfo (string shipSymbol);
        /// <summary>
        /// Get Ship Cooldown
        /// </summary>
        /// <remarks>
        /// Retrieve the details of your ship&#x27;s reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.  Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.  Response returns a 204 status code (no-content) when the ship has no cooldown.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>InlineResponse20021</returns>
        InlineResponse20021 GetShipCooldown (string shipSymbol);

        /// <summary>
        /// Get Ship Cooldown
        /// </summary>
        /// <remarks>
        /// Retrieve the details of your ship&#x27;s reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.  Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.  Response returns a 204 status code (no-content) when the ship has no cooldown.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>ApiResponse of InlineResponse20021</returns>
        ApiResponse<InlineResponse20021> GetShipCooldownWithHttpInfo (string shipSymbol);
        /// <summary>
        /// Get Ship Modules
        /// </summary>
        /// <remarks>
        /// Get the modules installed on a ship.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship</param>
        /// <returns>InlineResponse20034</returns>
        InlineResponse20034 GetShipModules (string shipSymbol);

        /// <summary>
        /// Get Ship Modules
        /// </summary>
        /// <remarks>
        /// Get the modules installed on a ship.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship</param>
        /// <returns>ApiResponse of InlineResponse20034</returns>
        ApiResponse<InlineResponse20034> GetShipModulesWithHttpInfo (string shipSymbol);
        /// <summary>
        /// Get Ship Nav
        /// </summary>
        /// <remarks>
        /// Get the current nav status of a ship.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>InlineResponse20025</returns>
        InlineResponse20025 GetShipNav (string shipSymbol);

        /// <summary>
        /// Get Ship Nav
        /// </summary>
        /// <remarks>
        /// Get the current nav status of a ship.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>ApiResponse of InlineResponse20025</returns>
        ApiResponse<InlineResponse20025> GetShipNavWithHttpInfo (string shipSymbol);
        /// <summary>
        /// Install Mount
        /// </summary>
        /// <remarks>
        /// Install a mount on a ship.  In order to install a mount, the ship must be docked and located in a waypoint that has a &#x60;Shipyard&#x60; trait. The ship also must have the mount to install in its cargo hold.  An installation fee will be deduced by the Shipyard for installing the mount on the ship. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#x27;s symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InstallMount201Response</returns>
        InstallMount201Response InstallMount (string shipSymbol, InstallMountRequest body = null);

        /// <summary>
        /// Install Mount
        /// </summary>
        /// <remarks>
        /// Install a mount on a ship.  In order to install a mount, the ship must be docked and located in a waypoint that has a &#x60;Shipyard&#x60; trait. The ship also must have the mount to install in its cargo hold.  An installation fee will be deduced by the Shipyard for installing the mount on the ship. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#x27;s symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InstallMount201Response</returns>
        ApiResponse<InstallMount201Response> InstallMountWithHttpInfo (string shipSymbol, InstallMountRequest body = null);
        /// <summary>
        /// Install Ship Module
        /// </summary>
        /// <remarks>
        /// Install a module on a ship. The module must be in your cargo.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InlineResponse20111</returns>
        InlineResponse20111 InstallShipModule (string shipSymbol, ModulesInstallBody body = null);

        /// <summary>
        /// Install Ship Module
        /// </summary>
        /// <remarks>
        /// Install a module on a ship. The module must be in your cargo.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20111</returns>
        ApiResponse<InlineResponse20111> InstallShipModuleWithHttpInfo (string shipSymbol, ModulesInstallBody body = null);
        /// <summary>
        /// Jettison Cargo
        /// </summary>
        /// <remarks>
        /// Jettison cargo from your ship&#x27;s cargo hold.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InlineResponse20022</returns>
        InlineResponse20022 Jettison (string shipSymbol, ShipSymbolJettisonBody body = null);

        /// <summary>
        /// Jettison Cargo
        /// </summary>
        /// <remarks>
        /// Jettison cargo from your ship&#x27;s cargo hold.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        ApiResponse<InlineResponse20022> JettisonWithHttpInfo (string shipSymbol, ShipSymbolJettisonBody body = null);
        /// <summary>
        /// Jump Ship
        /// </summary>
        /// <remarks>
        /// Jump your ship instantly to a target connected waypoint. The ship must be in orbit to execute a jump.  A unit of antimatter is purchased and consumed from the market when jumping. The price of antimatter is determined by the market and is subject to change. A ship can only jump to connected waypoints
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InlineResponse20023</returns>
        InlineResponse20023 JumpShip (string shipSymbol, ShipSymbolJumpBody body = null);

        /// <summary>
        /// Jump Ship
        /// </summary>
        /// <remarks>
        /// Jump your ship instantly to a target connected waypoint. The ship must be in orbit to execute a jump.  A unit of antimatter is purchased and consumed from the market when jumping. The price of antimatter is determined by the market and is subject to change. A ship can only jump to connected waypoints
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20023</returns>
        ApiResponse<InlineResponse20023> JumpShipWithHttpInfo (string shipSymbol, ShipSymbolJumpBody body = null);
        /// <summary>
        /// Navigate Ship
        /// </summary>
        /// <remarks>
        /// Navigate to a target destination. The ship must be in orbit to use this function. The destination waypoint must be within the same system as the ship&#x27;s current location. Navigating will consume the necessary fuel from the ship&#x27;s manifest based on the distance to the target waypoint.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it&#x27;s destination.  To travel between systems, see the ship&#x27;s Warp or Jump actions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InlineResponse20024</returns>
        InlineResponse20024 NavigateShip (string shipSymbol, ShipSymbolNavigateBody body = null);

        /// <summary>
        /// Navigate Ship
        /// </summary>
        /// <remarks>
        /// Navigate to a target destination. The ship must be in orbit to use this function. The destination waypoint must be within the same system as the ship&#x27;s current location. Navigating will consume the necessary fuel from the ship&#x27;s manifest based on the distance to the target waypoint.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it&#x27;s destination.  To travel between systems, see the ship&#x27;s Warp or Jump actions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20024</returns>
        ApiResponse<InlineResponse20024> NavigateShipWithHttpInfo (string shipSymbol, ShipSymbolNavigateBody body = null);
        /// <summary>
        /// Negotiate Contract
        /// </summary>
        /// <remarks>
        /// Negotiate a new contract with the HQ.  In order to negotiate a new contract, an agent must not have ongoing or offered contracts over the allowed maximum amount. Currently the maximum contracts an agent can have at a time is 1.  Once a contract is negotiated, it is added to the list of contracts offered to the agent, which the agent can then accept.   The ship must be present at any waypoint with a faction present to negotiate a contract with that faction.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#x27;s symbol.</param>
        /// <returns>NegotiateContract200Response</returns>
        NegotiateContract200Response NegotiateContract (string shipSymbol);

        /// <summary>
        /// Negotiate Contract
        /// </summary>
        /// <remarks>
        /// Negotiate a new contract with the HQ.  In order to negotiate a new contract, an agent must not have ongoing or offered contracts over the allowed maximum amount. Currently the maximum contracts an agent can have at a time is 1.  Once a contract is negotiated, it is added to the list of contracts offered to the agent, which the agent can then accept.   The ship must be present at any waypoint with a faction present to negotiate a contract with that faction.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#x27;s symbol.</param>
        /// <returns>ApiResponse of NegotiateContract200Response</returns>
        ApiResponse<NegotiateContract200Response> NegotiateContractWithHttpInfo (string shipSymbol);
        /// <summary>
        /// Orbit Ship
        /// </summary>
        /// <remarks>
        /// Attempt to move your ship into orbit at its current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.  Orbiting ships are able to do actions that require the ship to be above surface such as navigating or extracting, but cannot access elements in their current waypoint, such as the market or a shipyard.  The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>OrbitShip200Response</returns>
        OrbitShip200Response OrbitShip (string shipSymbol);

        /// <summary>
        /// Orbit Ship
        /// </summary>
        /// <remarks>
        /// Attempt to move your ship into orbit at its current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.  Orbiting ships are able to do actions that require the ship to be above surface such as navigating or extracting, but cannot access elements in their current waypoint, such as the market or a shipyard.  The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>ApiResponse of OrbitShip200Response</returns>
        ApiResponse<OrbitShip200Response> OrbitShipWithHttpInfo (string shipSymbol);
        /// <summary>
        /// Patch Ship Nav
        /// </summary>
        /// <remarks>
        /// Update the nav configuration of a ship.  Currently only supports configuring the Flight Mode of the ship, which affects its speed and fuel consumption.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InlineResponse20026</returns>
        InlineResponse20026 PatchShipNav (string shipSymbol, ShipSymbolNavBody body = null);

        /// <summary>
        /// Patch Ship Nav
        /// </summary>
        /// <remarks>
        /// Update the nav configuration of a ship.  Currently only supports configuring the Flight Mode of the ship, which affects its speed and fuel consumption.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20026</returns>
        ApiResponse<InlineResponse20026> PatchShipNavWithHttpInfo (string shipSymbol, ShipSymbolNavBody body = null);
        /// <summary>
        /// Purchase Cargo
        /// </summary>
        /// <remarks>
        /// Purchase cargo from a market.  The ship must be docked in a waypoint that has &#x60;Marketplace&#x60; trait, and the market must be selling a good to be able to purchase it.  The maximum amount of units of a good that can be purchased in each transaction are denoted by the &#x60;tradeVolume&#x60; value of the good, which can be viewed by using the Get Market action.  Purchased goods are added to the ship&#x27;s cargo hold.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#x27;s symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PurchaseCargo201Response</returns>
        PurchaseCargo201Response PurchaseCargo (string shipSymbol, PurchaseCargoRequest body = null);

        /// <summary>
        /// Purchase Cargo
        /// </summary>
        /// <remarks>
        /// Purchase cargo from a market.  The ship must be docked in a waypoint that has &#x60;Marketplace&#x60; trait, and the market must be selling a good to be able to purchase it.  The maximum amount of units of a good that can be purchased in each transaction are denoted by the &#x60;tradeVolume&#x60; value of the good, which can be viewed by using the Get Market action.  Purchased goods are added to the ship&#x27;s cargo hold.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#x27;s symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PurchaseCargo201Response</returns>
        ApiResponse<PurchaseCargo201Response> PurchaseCargoWithHttpInfo (string shipSymbol, PurchaseCargoRequest body = null);
        /// <summary>
        /// Purchase Ship
        /// </summary>
        /// <remarks>
        /// Purchase a ship from a Shipyard. In order to use this function, a ship under your agent&#x27;s ownership must be in a waypoint that has the &#x60;Shipyard&#x60; trait, and the Shipyard must sell the type of the desired ship.  Shipyards typically offer ship types, which are predefined templates of ships that have dedicated roles. A template comes with a preset of an engine, a reactor, and a frame. It may also include a few modules and mounts.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>InlineResponse2012</returns>
        InlineResponse2012 PurchaseShip (MyShipsBody body = null);

        /// <summary>
        /// Purchase Ship
        /// </summary>
        /// <remarks>
        /// Purchase a ship from a Shipyard. In order to use this function, a ship under your agent&#x27;s ownership must be in a waypoint that has the &#x60;Shipyard&#x60; trait, and the Shipyard must sell the type of the desired ship.  Shipyards typically offer ship types, which are predefined templates of ships that have dedicated roles. A template comes with a preset of an engine, a reactor, and a frame. It may also include a few modules and mounts.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2012</returns>
        ApiResponse<InlineResponse2012> PurchaseShipWithHttpInfo (MyShipsBody body = null);
        /// <summary>
        /// Refuel Ship
        /// </summary>
        /// <remarks>
        /// Refuel your ship by buying fuel from the local market.  Requires the ship to be docked in a waypoint that has the &#x60;Marketplace&#x60; trait, and the market must be selling fuel in order to refuel.  Each fuel bought from the market replenishes 100 units in your ship&#x27;s fuel.  Ships will always be refuel to their frame&#x27;s maximum fuel capacity when using this action.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InlineResponse20028</returns>
        InlineResponse20028 RefuelShip (string shipSymbol, ShipSymbolRefuelBody body = null);

        /// <summary>
        /// Refuel Ship
        /// </summary>
        /// <remarks>
        /// Refuel your ship by buying fuel from the local market.  Requires the ship to be docked in a waypoint that has the &#x60;Marketplace&#x60; trait, and the market must be selling fuel in order to refuel.  Each fuel bought from the market replenishes 100 units in your ship&#x27;s fuel.  Ships will always be refuel to their frame&#x27;s maximum fuel capacity when using this action.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20028</returns>
        ApiResponse<InlineResponse20028> RefuelShipWithHttpInfo (string shipSymbol, ShipSymbolRefuelBody body = null);
        /// <summary>
        /// Remove Mount
        /// </summary>
        /// <remarks>
        /// Remove a mount from a ship.  The ship must be docked in a waypoint that has the &#x60;Shipyard&#x60; trait, and must have the desired mount that it wish to remove installed.  A removal fee will be deduced from the agent by the Shipyard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#x27;s symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>RemoveMount201Response</returns>
        RemoveMount201Response RemoveMount (string shipSymbol, RemoveMountRequest body = null);

        /// <summary>
        /// Remove Mount
        /// </summary>
        /// <remarks>
        /// Remove a mount from a ship.  The ship must be docked in a waypoint that has the &#x60;Shipyard&#x60; trait, and must have the desired mount that it wish to remove installed.  A removal fee will be deduced from the agent by the Shipyard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#x27;s symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of RemoveMount201Response</returns>
        ApiResponse<RemoveMount201Response> RemoveMountWithHttpInfo (string shipSymbol, RemoveMountRequest body = null);
        /// <summary>
        /// Remove Ship Module
        /// </summary>
        /// <remarks>
        /// Remove a module from a ship. The module will be placed in cargo.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship</param>
        /// <param name="body"> (optional)</param>
        /// <returns>RemoveModule201Response</returns>
        RemoveModule201Response RemoveShipModule (string shipSymbol, ModulesRemoveBody body = null);

        /// <summary>
        /// Remove Ship Module
        /// </summary>
        /// <remarks>
        /// Remove a module from a ship. The module will be placed in cargo.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of RemoveModule201Response</returns>
        ApiResponse<RemoveModule201Response> RemoveShipModuleWithHttpInfo (string shipSymbol, ModulesRemoveBody body = null);
        /// <summary>
        /// Repair Ship
        /// </summary>
        /// <remarks>
        /// Repair a ship, restoring the ship to maximum condition. The ship must be docked at a waypoint that has the &#x60;Shipyard&#x60; trait in order to use this function. To preview the cost of repairing the ship, use the Get action.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>InlineResponse20032</returns>
        InlineResponse20032 RepairShip (string shipSymbol);

        /// <summary>
        /// Repair Ship
        /// </summary>
        /// <remarks>
        /// Repair a ship, restoring the ship to maximum condition. The ship must be docked at a waypoint that has the &#x60;Shipyard&#x60; trait in order to use this function. To preview the cost of repairing the ship, use the Get action.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>ApiResponse of InlineResponse20032</returns>
        ApiResponse<InlineResponse20032> RepairShipWithHttpInfo (string shipSymbol);
        /// <summary>
        /// Scrap Ship
        /// </summary>
        /// <remarks>
        /// Scrap a ship, removing it from the game and returning a portion of the ship&#x27;s value to the agent. The ship must be docked in a waypoint that has the &#x60;Shipyard&#x60; trait in order to use this function. To preview the amount of value that will be returned, use the Get Ship action.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>InlineResponse20030</returns>
        InlineResponse20030 ScrapShip (string shipSymbol);

        /// <summary>
        /// Scrap Ship
        /// </summary>
        /// <remarks>
        /// Scrap a ship, removing it from the game and returning a portion of the ship&#x27;s value to the agent. The ship must be docked in a waypoint that has the &#x60;Shipyard&#x60; trait in order to use this function. To preview the amount of value that will be returned, use the Get Ship action.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>ApiResponse of InlineResponse20030</returns>
        ApiResponse<InlineResponse20030> ScrapShipWithHttpInfo (string shipSymbol);
        /// <summary>
        /// Sell Cargo
        /// </summary>
        /// <remarks>
        /// Sell cargo in your ship to a market that trades this cargo. The ship must be docked in a waypoint that has the &#x60;Marketplace&#x60; trait in order to use this function.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">Symbol of a ship.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SellCargo201Response</returns>
        SellCargo201Response SellCargo (string shipSymbol, SellCargoRequest body = null);

        /// <summary>
        /// Sell Cargo
        /// </summary>
        /// <remarks>
        /// Sell cargo in your ship to a market that trades this cargo. The ship must be docked in a waypoint that has the &#x60;Marketplace&#x60; trait in order to use this function.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">Symbol of a ship.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SellCargo201Response</returns>
        ApiResponse<SellCargo201Response> SellCargoWithHttpInfo (string shipSymbol, SellCargoRequest body = null);
        /// <summary>
        /// Ship Refine
        /// </summary>
        /// <remarks>
        /// Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request. In order to be able to refine, a ship must have goods that can be refined and have installed a &#x60;Refinery&#x60; module that can refine it.  When refining, 100 basic goods will be converted into 10 processed goods.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ShipRefine201Response</returns>
        ShipRefine201Response ShipRefine (string shipSymbol, ShipSymbolRefineBody body = null);

        /// <summary>
        /// Ship Refine
        /// </summary>
        /// <remarks>
        /// Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request. In order to be able to refine, a ship must have goods that can be refined and have installed a &#x60;Refinery&#x60; module that can refine it.  When refining, 100 basic goods will be converted into 10 processed goods.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ShipRefine201Response</returns>
        ApiResponse<ShipRefine201Response> ShipRefineWithHttpInfo (string shipSymbol, ShipSymbolRefineBody body = null);
        /// <summary>
        /// Siphon Resources
        /// </summary>
        /// <remarks>
        /// Siphon gases or other resources from gas giants.  The ship must be in orbit to be able to siphon and must have siphon mounts and a gas processor installed.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>InlineResponse2016</returns>
        InlineResponse2016 SiphonResources (string shipSymbol);

        /// <summary>
        /// Siphon Resources
        /// </summary>
        /// <remarks>
        /// Siphon gases or other resources from gas giants.  The ship must be in orbit to be able to siphon and must have siphon mounts and a gas processor installed.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>ApiResponse of InlineResponse2016</returns>
        ApiResponse<InlineResponse2016> SiphonResourcesWithHttpInfo (string shipSymbol);
        /// <summary>
        /// Transfer Cargo
        /// </summary>
        /// <remarks>
        /// Transfer cargo between ships.  The receiving ship must be in the same waypoint as the transferring ship, and it must able to hold the additional cargo after the transfer is complete. Both ships also must be in the same state, either both are docked or both are orbiting.  The response body&#x27;s cargo shows the cargo of the transferring ship after the transfer is complete.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The transferring ship&#x27;s symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TransferCargo200Response</returns>
        TransferCargo200Response TransferCargo (string shipSymbol, TransferCargoRequest body = null);

        /// <summary>
        /// Transfer Cargo
        /// </summary>
        /// <remarks>
        /// Transfer cargo between ships.  The receiving ship must be in the same waypoint as the transferring ship, and it must able to hold the additional cargo after the transfer is complete. Both ships also must be in the same state, either both are docked or both are orbiting.  The response body&#x27;s cargo shows the cargo of the transferring ship after the transfer is complete.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The transferring ship&#x27;s symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TransferCargo200Response</returns>
        ApiResponse<TransferCargo200Response> TransferCargoWithHttpInfo (string shipSymbol, TransferCargoRequest body = null);
        /// <summary>
        /// Warp Ship
        /// </summary>
        /// <remarks>
        /// Warp your ship to a target destination in another system. The ship must be in orbit to use this function and must have the &#x60;Warp Drive&#x60; module installed. Warping will consume the necessary fuel from the ship&#x27;s manifest.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at its destination.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InlineResponse20027</returns>
        InlineResponse20027 WarpShip (string shipSymbol, ShipSymbolWarpBody body = null);

        /// <summary>
        /// Warp Ship
        /// </summary>
        /// <remarks>
        /// Warp your ship to a target destination in another system. The ship must be in orbit to use this function and must have the &#x60;Warp Drive&#x60; module installed. Warping will consume the necessary fuel from the ship&#x27;s manifest.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at its destination.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20027</returns>
        ApiResponse<InlineResponse20027> WarpShipWithHttpInfo (string shipSymbol, ShipSymbolWarpBody body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create Chart
        /// </summary>
        /// <remarks>
        /// Command a ship to chart the waypoint at its current location.  Most waypoints in the universe are uncharted by default. These waypoints have their traits hidden until they have been charted by a ship.  Charting a waypoint will record your agent as the one who created the chart, and all other agents would also be able to see the waypoint&#x27;s traits. Charting a waypoint gives you a one time reward of credits based on the rarity of the waypoint&#x27;s traits.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>Task of InlineResponse2013</returns>
        System.Threading.Tasks.Task<InlineResponse2013> CreateChartAsync (string shipSymbol);

        /// <summary>
        /// Create Chart
        /// </summary>
        /// <remarks>
        /// Command a ship to chart the waypoint at its current location.  Most waypoints in the universe are uncharted by default. These waypoints have their traits hidden until they have been charted by a ship.  Charting a waypoint will record your agent as the one who created the chart, and all other agents would also be able to see the waypoint&#x27;s traits. Charting a waypoint gives you a one time reward of credits based on the rarity of the waypoint&#x27;s traits.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>Task of ApiResponse (InlineResponse2013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2013>> CreateChartAsyncWithHttpInfo (string shipSymbol);
        /// <summary>
        /// Scan Ships
        /// </summary>
        /// <remarks>
        /// Scan for nearby ships, retrieving information for all ships in range.  Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Task of InlineResponse20110</returns>
        System.Threading.Tasks.Task<InlineResponse20110> CreateShipShipScanAsync (string shipSymbol);

        /// <summary>
        /// Scan Ships
        /// </summary>
        /// <remarks>
        /// Scan for nearby ships, retrieving information for all ships in range.  Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Task of ApiResponse (InlineResponse20110)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20110>> CreateShipShipScanAsyncWithHttpInfo (string shipSymbol);
        /// <summary>
        /// Scan Systems
        /// </summary>
        /// <remarks>
        /// Scan for nearby systems, retrieving information on the systems&#x27; distance from the ship and their waypoints. Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Task of InlineResponse2018</returns>
        System.Threading.Tasks.Task<InlineResponse2018> CreateShipSystemScanAsync (string shipSymbol);

        /// <summary>
        /// Scan Systems
        /// </summary>
        /// <remarks>
        /// Scan for nearby systems, retrieving information on the systems&#x27; distance from the ship and their waypoints. Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Task of ApiResponse (InlineResponse2018)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2018>> CreateShipSystemScanAsyncWithHttpInfo (string shipSymbol);
        /// <summary>
        /// Scan Waypoints
        /// </summary>
        /// <remarks>
        /// Scan for nearby waypoints, retrieving detailed information on each waypoint in range. Scanning uncharted waypoints will allow you to ignore their uncharted state and will list the waypoints&#x27; traits.  Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Task of InlineResponse2019</returns>
        System.Threading.Tasks.Task<InlineResponse2019> CreateShipWaypointScanAsync (string shipSymbol);

        /// <summary>
        /// Scan Waypoints
        /// </summary>
        /// <remarks>
        /// Scan for nearby waypoints, retrieving detailed information on each waypoint in range. Scanning uncharted waypoints will allow you to ignore their uncharted state and will list the waypoints&#x27; traits.  Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Task of ApiResponse (InlineResponse2019)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2019>> CreateShipWaypointScanAsyncWithHttpInfo (string shipSymbol);
        /// <summary>
        /// Create Survey
        /// </summary>
        /// <remarks>
        /// Create surveys on a waypoint that can be extracted such as asteroid fields. A survey focuses on specific types of deposits from the extracted location. When ships extract using this survey, they are guaranteed to procure a high amount of one of the goods in the survey.  In order to use a survey, send the entire survey details in the body of the extract request.  Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.  Your ship will enter a cooldown after surveying in which it is unable to perform certain actions. Surveys will eventually expire after a period of time or will be exhausted after being extracted several times based on the survey&#x27;s size. Multiple ships can use the same survey for extraction.  A ship must have the &#x60;Surveyor&#x60; mount installed in order to use this function.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>Task of InlineResponse2014</returns>
        System.Threading.Tasks.Task<InlineResponse2014> CreateSurveyAsync (string shipSymbol);

        /// <summary>
        /// Create Survey
        /// </summary>
        /// <remarks>
        /// Create surveys on a waypoint that can be extracted such as asteroid fields. A survey focuses on specific types of deposits from the extracted location. When ships extract using this survey, they are guaranteed to procure a high amount of one of the goods in the survey.  In order to use a survey, send the entire survey details in the body of the extract request.  Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.  Your ship will enter a cooldown after surveying in which it is unable to perform certain actions. Surveys will eventually expire after a period of time or will be exhausted after being extracted several times based on the survey&#x27;s size. Multiple ships can use the same survey for extraction.  A ship must have the &#x60;Surveyor&#x60; mount installed in order to use this function.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>Task of ApiResponse (InlineResponse2014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2014>> CreateSurveyAsyncWithHttpInfo (string shipSymbol);
        /// <summary>
        /// Dock Ship
        /// </summary>
        /// <remarks>
        /// Attempt to dock your ship at its current location. Docking will only succeed if your ship is capable of docking at the time of the request.  Docked ships can access elements in their current location, such as the market or a shipyard, but cannot do actions that require the ship to be above surface such as navigating or extracting.  The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>Task of DockShip200Response</returns>
        System.Threading.Tasks.Task<DockShip200Response> DockShipAsync (string shipSymbol);

        /// <summary>
        /// Dock Ship
        /// </summary>
        /// <remarks>
        /// Attempt to dock your ship at its current location. Docking will only succeed if your ship is capable of docking at the time of the request.  Docked ships can access elements in their current location, such as the market or a shipyard, but cannot do actions that require the ship to be above surface such as navigating or extracting.  The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>Task of ApiResponse (DockShip200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DockShip200Response>> DockShipAsyncWithHttpInfo (string shipSymbol);
        /// <summary>
        /// Extract Resources
        /// </summary>
        /// <remarks>
        /// Extract resources from a waypoint that can be extracted, such as asteroid fields, into your ship. Send an optional survey as the payload to target specific yields.  The ship must be in orbit to be able to extract and must have mining equipments installed that can extract goods, such as the &#x60;Gas Siphon&#x60; mount for gas-based goods or &#x60;Mining Laser&#x60; mount for ore-based goods.  The survey property is now deprecated. See the &#x60;extract/survey&#x60; endpoint for more details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of InlineResponse2015</returns>
        System.Threading.Tasks.Task<InlineResponse2015> ExtractResourcesAsync (string shipSymbol, ShipSymbolExtractBody body = null);

        /// <summary>
        /// Extract Resources
        /// </summary>
        /// <remarks>
        /// Extract resources from a waypoint that can be extracted, such as asteroid fields, into your ship. Send an optional survey as the payload to target specific yields.  The ship must be in orbit to be able to extract and must have mining equipments installed that can extract goods, such as the &#x60;Gas Siphon&#x60; mount for gas-based goods or &#x60;Mining Laser&#x60; mount for ore-based goods.  The survey property is now deprecated. See the &#x60;extract/survey&#x60; endpoint for more details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2015)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2015>> ExtractResourcesAsyncWithHttpInfo (string shipSymbol, ShipSymbolExtractBody body = null);
        /// <summary>
        /// Extract Resources with Survey
        /// </summary>
        /// <remarks>
        /// Use a survey when extracting resources from a waypoint. This endpoint requires a survey as the payload, which allows your ship to extract specific yields.  Send the full survey object as the payload which will be validated according to the signature. If the signature is invalid, or any properties of the survey are changed, the request will fail.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of InlineResponse2017</returns>
        System.Threading.Tasks.Task<InlineResponse2017> ExtractResourcesWithSurveyAsync (string shipSymbol, Survey body = null);

        /// <summary>
        /// Extract Resources with Survey
        /// </summary>
        /// <remarks>
        /// Use a survey when extracting resources from a waypoint. This endpoint requires a survey as the payload, which allows your ship to extract specific yields.  Send the full survey object as the payload which will be validated according to the signature. If the signature is invalid, or any properties of the survey are changed, the request will fail.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2017)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2017>> ExtractResourcesWithSurveyAsyncWithHttpInfo (string shipSymbol, Survey body = null);
        /// <summary>
        /// Get Mounts
        /// </summary>
        /// <remarks>
        /// Get the mounts installed on a ship.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#x27;s symbol.</param>
        /// <returns>Task of GetMounts200Response</returns>
        System.Threading.Tasks.Task<GetMounts200Response> GetMountsAsync (string shipSymbol);

        /// <summary>
        /// Get Mounts
        /// </summary>
        /// <remarks>
        /// Get the mounts installed on a ship.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#x27;s symbol.</param>
        /// <returns>Task of ApiResponse (GetMounts200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMounts200Response>> GetMountsAsyncWithHttpInfo (string shipSymbol);
        /// <summary>
        /// Get Ship
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a ship under your agent&#x27;s ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>Task of InlineResponse20019</returns>
        System.Threading.Tasks.Task<InlineResponse20019> GetMyShipAsync (string shipSymbol);

        /// <summary>
        /// Get Ship
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a ship under your agent&#x27;s ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> GetMyShipAsyncWithHttpInfo (string shipSymbol);
        /// <summary>
        /// Get Ship Cargo
        /// </summary>
        /// <remarks>
        /// Retrieve the cargo of a ship under your agent&#x27;s ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>Task of InlineResponse20020</returns>
        System.Threading.Tasks.Task<InlineResponse20020> GetMyShipCargoAsync (string shipSymbol);

        /// <summary>
        /// Get Ship Cargo
        /// </summary>
        /// <remarks>
        /// Retrieve the cargo of a ship under your agent&#x27;s ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>Task of ApiResponse (InlineResponse20020)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20020>> GetMyShipCargoAsyncWithHttpInfo (string shipSymbol);
        /// <summary>
        /// List Ships
        /// </summary>
        /// <remarks>
        /// Return a paginated list of all of ships under your agent&#x27;s ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <returns>Task of InlineResponse20018</returns>
        System.Threading.Tasks.Task<InlineResponse20018> GetMyShipsAsync (int? page = null, int? limit = null);

        /// <summary>
        /// List Ships
        /// </summary>
        /// <remarks>
        /// Return a paginated list of all of ships under your agent&#x27;s ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (InlineResponse20018)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20018>> GetMyShipsAsyncWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get Repair Ship
        /// </summary>
        /// <remarks>
        /// Get the cost of repairing a ship.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Task of InlineResponse20031</returns>
        System.Threading.Tasks.Task<InlineResponse20031> GetRepairShipAsync (string shipSymbol);

        /// <summary>
        /// Get Repair Ship
        /// </summary>
        /// <remarks>
        /// Get the cost of repairing a ship.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Task of ApiResponse (InlineResponse20031)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20031>> GetRepairShipAsyncWithHttpInfo (string shipSymbol);
        /// <summary>
        /// Get Scrap Ship
        /// </summary>
        /// <remarks>
        /// Get the amount of value that will be returned when scrapping a ship.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Task of InlineResponse20029</returns>
        System.Threading.Tasks.Task<InlineResponse20029> GetScrapShipAsync (string shipSymbol);

        /// <summary>
        /// Get Scrap Ship
        /// </summary>
        /// <remarks>
        /// Get the amount of value that will be returned when scrapping a ship.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Task of ApiResponse (InlineResponse20029)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20029>> GetScrapShipAsyncWithHttpInfo (string shipSymbol);
        /// <summary>
        /// Get Ship Cooldown
        /// </summary>
        /// <remarks>
        /// Retrieve the details of your ship&#x27;s reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.  Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.  Response returns a 204 status code (no-content) when the ship has no cooldown.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>Task of InlineResponse20021</returns>
        System.Threading.Tasks.Task<InlineResponse20021> GetShipCooldownAsync (string shipSymbol);

        /// <summary>
        /// Get Ship Cooldown
        /// </summary>
        /// <remarks>
        /// Retrieve the details of your ship&#x27;s reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.  Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.  Response returns a 204 status code (no-content) when the ship has no cooldown.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>Task of ApiResponse (InlineResponse20021)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20021>> GetShipCooldownAsyncWithHttpInfo (string shipSymbol);
        /// <summary>
        /// Get Ship Modules
        /// </summary>
        /// <remarks>
        /// Get the modules installed on a ship.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship</param>
        /// <returns>Task of InlineResponse20034</returns>
        System.Threading.Tasks.Task<InlineResponse20034> GetShipModulesAsync (string shipSymbol);

        /// <summary>
        /// Get Ship Modules
        /// </summary>
        /// <remarks>
        /// Get the modules installed on a ship.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship</param>
        /// <returns>Task of ApiResponse (InlineResponse20034)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20034>> GetShipModulesAsyncWithHttpInfo (string shipSymbol);
        /// <summary>
        /// Get Ship Nav
        /// </summary>
        /// <remarks>
        /// Get the current nav status of a ship.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Task of InlineResponse20025</returns>
        System.Threading.Tasks.Task<InlineResponse20025> GetShipNavAsync (string shipSymbol);

        /// <summary>
        /// Get Ship Nav
        /// </summary>
        /// <remarks>
        /// Get the current nav status of a ship.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Task of ApiResponse (InlineResponse20025)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20025>> GetShipNavAsyncWithHttpInfo (string shipSymbol);
        /// <summary>
        /// Install Mount
        /// </summary>
        /// <remarks>
        /// Install a mount on a ship.  In order to install a mount, the ship must be docked and located in a waypoint that has a &#x60;Shipyard&#x60; trait. The ship also must have the mount to install in its cargo hold.  An installation fee will be deduced by the Shipyard for installing the mount on the ship. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#x27;s symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of InstallMount201Response</returns>
        System.Threading.Tasks.Task<InstallMount201Response> InstallMountAsync (string shipSymbol, InstallMountRequest body = null);

        /// <summary>
        /// Install Mount
        /// </summary>
        /// <remarks>
        /// Install a mount on a ship.  In order to install a mount, the ship must be docked and located in a waypoint that has a &#x60;Shipyard&#x60; trait. The ship also must have the mount to install in its cargo hold.  An installation fee will be deduced by the Shipyard for installing the mount on the ship. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#x27;s symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (InstallMount201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InstallMount201Response>> InstallMountAsyncWithHttpInfo (string shipSymbol, InstallMountRequest body = null);
        /// <summary>
        /// Install Ship Module
        /// </summary>
        /// <remarks>
        /// Install a module on a ship. The module must be in your cargo.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of InlineResponse20111</returns>
        System.Threading.Tasks.Task<InlineResponse20111> InstallShipModuleAsync (string shipSymbol, ModulesInstallBody body = null);

        /// <summary>
        /// Install Ship Module
        /// </summary>
        /// <remarks>
        /// Install a module on a ship. The module must be in your cargo.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20111)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20111>> InstallShipModuleAsyncWithHttpInfo (string shipSymbol, ModulesInstallBody body = null);
        /// <summary>
        /// Jettison Cargo
        /// </summary>
        /// <remarks>
        /// Jettison cargo from your ship&#x27;s cargo hold.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of InlineResponse20022</returns>
        System.Threading.Tasks.Task<InlineResponse20022> JettisonAsync (string shipSymbol, ShipSymbolJettisonBody body = null);

        /// <summary>
        /// Jettison Cargo
        /// </summary>
        /// <remarks>
        /// Jettison cargo from your ship&#x27;s cargo hold.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20022>> JettisonAsyncWithHttpInfo (string shipSymbol, ShipSymbolJettisonBody body = null);
        /// <summary>
        /// Jump Ship
        /// </summary>
        /// <remarks>
        /// Jump your ship instantly to a target connected waypoint. The ship must be in orbit to execute a jump.  A unit of antimatter is purchased and consumed from the market when jumping. The price of antimatter is determined by the market and is subject to change. A ship can only jump to connected waypoints
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of InlineResponse20023</returns>
        System.Threading.Tasks.Task<InlineResponse20023> JumpShipAsync (string shipSymbol, ShipSymbolJumpBody body = null);

        /// <summary>
        /// Jump Ship
        /// </summary>
        /// <remarks>
        /// Jump your ship instantly to a target connected waypoint. The ship must be in orbit to execute a jump.  A unit of antimatter is purchased and consumed from the market when jumping. The price of antimatter is determined by the market and is subject to change. A ship can only jump to connected waypoints
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20023)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20023>> JumpShipAsyncWithHttpInfo (string shipSymbol, ShipSymbolJumpBody body = null);
        /// <summary>
        /// Navigate Ship
        /// </summary>
        /// <remarks>
        /// Navigate to a target destination. The ship must be in orbit to use this function. The destination waypoint must be within the same system as the ship&#x27;s current location. Navigating will consume the necessary fuel from the ship&#x27;s manifest based on the distance to the target waypoint.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it&#x27;s destination.  To travel between systems, see the ship&#x27;s Warp or Jump actions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of InlineResponse20024</returns>
        System.Threading.Tasks.Task<InlineResponse20024> NavigateShipAsync (string shipSymbol, ShipSymbolNavigateBody body = null);

        /// <summary>
        /// Navigate Ship
        /// </summary>
        /// <remarks>
        /// Navigate to a target destination. The ship must be in orbit to use this function. The destination waypoint must be within the same system as the ship&#x27;s current location. Navigating will consume the necessary fuel from the ship&#x27;s manifest based on the distance to the target waypoint.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it&#x27;s destination.  To travel between systems, see the ship&#x27;s Warp or Jump actions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20024)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20024>> NavigateShipAsyncWithHttpInfo (string shipSymbol, ShipSymbolNavigateBody body = null);
        /// <summary>
        /// Negotiate Contract
        /// </summary>
        /// <remarks>
        /// Negotiate a new contract with the HQ.  In order to negotiate a new contract, an agent must not have ongoing or offered contracts over the allowed maximum amount. Currently the maximum contracts an agent can have at a time is 1.  Once a contract is negotiated, it is added to the list of contracts offered to the agent, which the agent can then accept.   The ship must be present at any waypoint with a faction present to negotiate a contract with that faction.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#x27;s symbol.</param>
        /// <returns>Task of NegotiateContract200Response</returns>
        System.Threading.Tasks.Task<NegotiateContract200Response> NegotiateContractAsync (string shipSymbol);

        /// <summary>
        /// Negotiate Contract
        /// </summary>
        /// <remarks>
        /// Negotiate a new contract with the HQ.  In order to negotiate a new contract, an agent must not have ongoing or offered contracts over the allowed maximum amount. Currently the maximum contracts an agent can have at a time is 1.  Once a contract is negotiated, it is added to the list of contracts offered to the agent, which the agent can then accept.   The ship must be present at any waypoint with a faction present to negotiate a contract with that faction.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#x27;s symbol.</param>
        /// <returns>Task of ApiResponse (NegotiateContract200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<NegotiateContract200Response>> NegotiateContractAsyncWithHttpInfo (string shipSymbol);
        /// <summary>
        /// Orbit Ship
        /// </summary>
        /// <remarks>
        /// Attempt to move your ship into orbit at its current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.  Orbiting ships are able to do actions that require the ship to be above surface such as navigating or extracting, but cannot access elements in their current waypoint, such as the market or a shipyard.  The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>Task of OrbitShip200Response</returns>
        System.Threading.Tasks.Task<OrbitShip200Response> OrbitShipAsync (string shipSymbol);

        /// <summary>
        /// Orbit Ship
        /// </summary>
        /// <remarks>
        /// Attempt to move your ship into orbit at its current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.  Orbiting ships are able to do actions that require the ship to be above surface such as navigating or extracting, but cannot access elements in their current waypoint, such as the market or a shipyard.  The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>Task of ApiResponse (OrbitShip200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrbitShip200Response>> OrbitShipAsyncWithHttpInfo (string shipSymbol);
        /// <summary>
        /// Patch Ship Nav
        /// </summary>
        /// <remarks>
        /// Update the nav configuration of a ship.  Currently only supports configuring the Flight Mode of the ship, which affects its speed and fuel consumption.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of InlineResponse20026</returns>
        System.Threading.Tasks.Task<InlineResponse20026> PatchShipNavAsync (string shipSymbol, ShipSymbolNavBody body = null);

        /// <summary>
        /// Patch Ship Nav
        /// </summary>
        /// <remarks>
        /// Update the nav configuration of a ship.  Currently only supports configuring the Flight Mode of the ship, which affects its speed and fuel consumption.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20026)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20026>> PatchShipNavAsyncWithHttpInfo (string shipSymbol, ShipSymbolNavBody body = null);
        /// <summary>
        /// Purchase Cargo
        /// </summary>
        /// <remarks>
        /// Purchase cargo from a market.  The ship must be docked in a waypoint that has &#x60;Marketplace&#x60; trait, and the market must be selling a good to be able to purchase it.  The maximum amount of units of a good that can be purchased in each transaction are denoted by the &#x60;tradeVolume&#x60; value of the good, which can be viewed by using the Get Market action.  Purchased goods are added to the ship&#x27;s cargo hold.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#x27;s symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of PurchaseCargo201Response</returns>
        System.Threading.Tasks.Task<PurchaseCargo201Response> PurchaseCargoAsync (string shipSymbol, PurchaseCargoRequest body = null);

        /// <summary>
        /// Purchase Cargo
        /// </summary>
        /// <remarks>
        /// Purchase cargo from a market.  The ship must be docked in a waypoint that has &#x60;Marketplace&#x60; trait, and the market must be selling a good to be able to purchase it.  The maximum amount of units of a good that can be purchased in each transaction are denoted by the &#x60;tradeVolume&#x60; value of the good, which can be viewed by using the Get Market action.  Purchased goods are added to the ship&#x27;s cargo hold.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#x27;s symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (PurchaseCargo201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<PurchaseCargo201Response>> PurchaseCargoAsyncWithHttpInfo (string shipSymbol, PurchaseCargoRequest body = null);
        /// <summary>
        /// Purchase Ship
        /// </summary>
        /// <remarks>
        /// Purchase a ship from a Shipyard. In order to use this function, a ship under your agent&#x27;s ownership must be in a waypoint that has the &#x60;Shipyard&#x60; trait, and the Shipyard must sell the type of the desired ship.  Shipyards typically offer ship types, which are predefined templates of ships that have dedicated roles. A template comes with a preset of an engine, a reactor, and a frame. It may also include a few modules and mounts.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of InlineResponse2012</returns>
        System.Threading.Tasks.Task<InlineResponse2012> PurchaseShipAsync (MyShipsBody body = null);

        /// <summary>
        /// Purchase Ship
        /// </summary>
        /// <remarks>
        /// Purchase a ship from a Shipyard. In order to use this function, a ship under your agent&#x27;s ownership must be in a waypoint that has the &#x60;Shipyard&#x60; trait, and the Shipyard must sell the type of the desired ship.  Shipyards typically offer ship types, which are predefined templates of ships that have dedicated roles. A template comes with a preset of an engine, a reactor, and a frame. It may also include a few modules and mounts.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2012)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2012>> PurchaseShipAsyncWithHttpInfo (MyShipsBody body = null);
        /// <summary>
        /// Refuel Ship
        /// </summary>
        /// <remarks>
        /// Refuel your ship by buying fuel from the local market.  Requires the ship to be docked in a waypoint that has the &#x60;Marketplace&#x60; trait, and the market must be selling fuel in order to refuel.  Each fuel bought from the market replenishes 100 units in your ship&#x27;s fuel.  Ships will always be refuel to their frame&#x27;s maximum fuel capacity when using this action.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of InlineResponse20028</returns>
        System.Threading.Tasks.Task<InlineResponse20028> RefuelShipAsync (string shipSymbol, ShipSymbolRefuelBody body = null);

        /// <summary>
        /// Refuel Ship
        /// </summary>
        /// <remarks>
        /// Refuel your ship by buying fuel from the local market.  Requires the ship to be docked in a waypoint that has the &#x60;Marketplace&#x60; trait, and the market must be selling fuel in order to refuel.  Each fuel bought from the market replenishes 100 units in your ship&#x27;s fuel.  Ships will always be refuel to their frame&#x27;s maximum fuel capacity when using this action.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20028)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20028>> RefuelShipAsyncWithHttpInfo (string shipSymbol, ShipSymbolRefuelBody body = null);
        /// <summary>
        /// Remove Mount
        /// </summary>
        /// <remarks>
        /// Remove a mount from a ship.  The ship must be docked in a waypoint that has the &#x60;Shipyard&#x60; trait, and must have the desired mount that it wish to remove installed.  A removal fee will be deduced from the agent by the Shipyard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#x27;s symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of RemoveMount201Response</returns>
        System.Threading.Tasks.Task<RemoveMount201Response> RemoveMountAsync (string shipSymbol, RemoveMountRequest body = null);

        /// <summary>
        /// Remove Mount
        /// </summary>
        /// <remarks>
        /// Remove a mount from a ship.  The ship must be docked in a waypoint that has the &#x60;Shipyard&#x60; trait, and must have the desired mount that it wish to remove installed.  A removal fee will be deduced from the agent by the Shipyard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#x27;s symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (RemoveMount201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoveMount201Response>> RemoveMountAsyncWithHttpInfo (string shipSymbol, RemoveMountRequest body = null);
        /// <summary>
        /// Remove Ship Module
        /// </summary>
        /// <remarks>
        /// Remove a module from a ship. The module will be placed in cargo.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of RemoveModule201Response</returns>
        System.Threading.Tasks.Task<RemoveModule201Response> RemoveShipModuleAsync (string shipSymbol, ModulesRemoveBody body = null);

        /// <summary>
        /// Remove Ship Module
        /// </summary>
        /// <remarks>
        /// Remove a module from a ship. The module will be placed in cargo.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (RemoveModule201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoveModule201Response>> RemoveShipModuleAsyncWithHttpInfo (string shipSymbol, ModulesRemoveBody body = null);
        /// <summary>
        /// Repair Ship
        /// </summary>
        /// <remarks>
        /// Repair a ship, restoring the ship to maximum condition. The ship must be docked at a waypoint that has the &#x60;Shipyard&#x60; trait in order to use this function. To preview the cost of repairing the ship, use the Get action.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Task of InlineResponse20032</returns>
        System.Threading.Tasks.Task<InlineResponse20032> RepairShipAsync (string shipSymbol);

        /// <summary>
        /// Repair Ship
        /// </summary>
        /// <remarks>
        /// Repair a ship, restoring the ship to maximum condition. The ship must be docked at a waypoint that has the &#x60;Shipyard&#x60; trait in order to use this function. To preview the cost of repairing the ship, use the Get action.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Task of ApiResponse (InlineResponse20032)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20032>> RepairShipAsyncWithHttpInfo (string shipSymbol);
        /// <summary>
        /// Scrap Ship
        /// </summary>
        /// <remarks>
        /// Scrap a ship, removing it from the game and returning a portion of the ship&#x27;s value to the agent. The ship must be docked in a waypoint that has the &#x60;Shipyard&#x60; trait in order to use this function. To preview the amount of value that will be returned, use the Get Ship action.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Task of InlineResponse20030</returns>
        System.Threading.Tasks.Task<InlineResponse20030> ScrapShipAsync (string shipSymbol);

        /// <summary>
        /// Scrap Ship
        /// </summary>
        /// <remarks>
        /// Scrap a ship, removing it from the game and returning a portion of the ship&#x27;s value to the agent. The ship must be docked in a waypoint that has the &#x60;Shipyard&#x60; trait in order to use this function. To preview the amount of value that will be returned, use the Get Ship action.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Task of ApiResponse (InlineResponse20030)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20030>> ScrapShipAsyncWithHttpInfo (string shipSymbol);
        /// <summary>
        /// Sell Cargo
        /// </summary>
        /// <remarks>
        /// Sell cargo in your ship to a market that trades this cargo. The ship must be docked in a waypoint that has the &#x60;Marketplace&#x60; trait in order to use this function.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">Symbol of a ship.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of SellCargo201Response</returns>
        System.Threading.Tasks.Task<SellCargo201Response> SellCargoAsync (string shipSymbol, SellCargoRequest body = null);

        /// <summary>
        /// Sell Cargo
        /// </summary>
        /// <remarks>
        /// Sell cargo in your ship to a market that trades this cargo. The ship must be docked in a waypoint that has the &#x60;Marketplace&#x60; trait in order to use this function.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">Symbol of a ship.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (SellCargo201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SellCargo201Response>> SellCargoAsyncWithHttpInfo (string shipSymbol, SellCargoRequest body = null);
        /// <summary>
        /// Ship Refine
        /// </summary>
        /// <remarks>
        /// Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request. In order to be able to refine, a ship must have goods that can be refined and have installed a &#x60;Refinery&#x60; module that can refine it.  When refining, 100 basic goods will be converted into 10 processed goods.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ShipRefine201Response</returns>
        System.Threading.Tasks.Task<ShipRefine201Response> ShipRefineAsync (string shipSymbol, ShipSymbolRefineBody body = null);

        /// <summary>
        /// Ship Refine
        /// </summary>
        /// <remarks>
        /// Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request. In order to be able to refine, a ship must have goods that can be refined and have installed a &#x60;Refinery&#x60; module that can refine it.  When refining, 100 basic goods will be converted into 10 processed goods.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ShipRefine201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShipRefine201Response>> ShipRefineAsyncWithHttpInfo (string shipSymbol, ShipSymbolRefineBody body = null);
        /// <summary>
        /// Siphon Resources
        /// </summary>
        /// <remarks>
        /// Siphon gases or other resources from gas giants.  The ship must be in orbit to be able to siphon and must have siphon mounts and a gas processor installed.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Task of InlineResponse2016</returns>
        System.Threading.Tasks.Task<InlineResponse2016> SiphonResourcesAsync (string shipSymbol);

        /// <summary>
        /// Siphon Resources
        /// </summary>
        /// <remarks>
        /// Siphon gases or other resources from gas giants.  The ship must be in orbit to be able to siphon and must have siphon mounts and a gas processor installed.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Task of ApiResponse (InlineResponse2016)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2016>> SiphonResourcesAsyncWithHttpInfo (string shipSymbol);
        /// <summary>
        /// Transfer Cargo
        /// </summary>
        /// <remarks>
        /// Transfer cargo between ships.  The receiving ship must be in the same waypoint as the transferring ship, and it must able to hold the additional cargo after the transfer is complete. Both ships also must be in the same state, either both are docked or both are orbiting.  The response body&#x27;s cargo shows the cargo of the transferring ship after the transfer is complete.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The transferring ship&#x27;s symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of TransferCargo200Response</returns>
        System.Threading.Tasks.Task<TransferCargo200Response> TransferCargoAsync (string shipSymbol, TransferCargoRequest body = null);

        /// <summary>
        /// Transfer Cargo
        /// </summary>
        /// <remarks>
        /// Transfer cargo between ships.  The receiving ship must be in the same waypoint as the transferring ship, and it must able to hold the additional cargo after the transfer is complete. Both ships also must be in the same state, either both are docked or both are orbiting.  The response body&#x27;s cargo shows the cargo of the transferring ship after the transfer is complete.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The transferring ship&#x27;s symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (TransferCargo200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransferCargo200Response>> TransferCargoAsyncWithHttpInfo (string shipSymbol, TransferCargoRequest body = null);
        /// <summary>
        /// Warp Ship
        /// </summary>
        /// <remarks>
        /// Warp your ship to a target destination in another system. The ship must be in orbit to use this function and must have the &#x60;Warp Drive&#x60; module installed. Warping will consume the necessary fuel from the ship&#x27;s manifest.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at its destination.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of InlineResponse20027</returns>
        System.Threading.Tasks.Task<InlineResponse20027> WarpShipAsync (string shipSymbol, ShipSymbolWarpBody body = null);

        /// <summary>
        /// Warp Ship
        /// </summary>
        /// <remarks>
        /// Warp your ship to a target destination in another system. The ship must be in orbit to use this function and must have the &#x60;Warp Drive&#x60; module installed. Warping will consume the necessary fuel from the ship&#x27;s manifest.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at its destination.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20027)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20027>> WarpShipAsyncWithHttpInfo (string shipSymbol, ShipSymbolWarpBody body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class FleetApi : IFleetApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FleetApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FleetApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FleetApi"/> class
        /// </summary>
        /// <returns></returns>
        public FleetApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FleetApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FleetApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.Options.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create Chart Command a ship to chart the waypoint at its current location.  Most waypoints in the universe are uncharted by default. These waypoints have their traits hidden until they have been charted by a ship.  Charting a waypoint will record your agent as the one who created the chart, and all other agents would also be able to see the waypoint&#x27;s traits. Charting a waypoint gives you a one time reward of credits based on the rarity of the waypoint&#x27;s traits.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>InlineResponse2013</returns>
        public InlineResponse2013 CreateChart (string shipSymbol)
        {
             ApiResponse<InlineResponse2013> localVarResponse = CreateChartWithHttpInfo(shipSymbol);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Chart Command a ship to chart the waypoint at its current location.  Most waypoints in the universe are uncharted by default. These waypoints have their traits hidden until they have been charted by a ship.  Charting a waypoint will record your agent as the one who created the chart, and all other agents would also be able to see the waypoint&#x27;s traits. Charting a waypoint gives you a one time reward of credits based on the rarity of the waypoint&#x27;s traits.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>ApiResponse of InlineResponse2013</returns>
        public ApiResponse< InlineResponse2013 > CreateChartWithHttpInfo (string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->CreateChart");

            var localVarPath = "/my/ships/{shipSymbol}/chart";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateChart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2013) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2013)));
        }

        /// <summary>
        /// Create Chart Command a ship to chart the waypoint at its current location.  Most waypoints in the universe are uncharted by default. These waypoints have their traits hidden until they have been charted by a ship.  Charting a waypoint will record your agent as the one who created the chart, and all other agents would also be able to see the waypoint&#x27;s traits. Charting a waypoint gives you a one time reward of credits based on the rarity of the waypoint&#x27;s traits.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>Task of InlineResponse2013</returns>
        public async System.Threading.Tasks.Task<InlineResponse2013> CreateChartAsync (string shipSymbol)
        {
             ApiResponse<InlineResponse2013> localVarResponse = await CreateChartAsyncWithHttpInfo(shipSymbol);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Chart Command a ship to chart the waypoint at its current location.  Most waypoints in the universe are uncharted by default. These waypoints have their traits hidden until they have been charted by a ship.  Charting a waypoint will record your agent as the one who created the chart, and all other agents would also be able to see the waypoint&#x27;s traits. Charting a waypoint gives you a one time reward of credits based on the rarity of the waypoint&#x27;s traits.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>Task of ApiResponse (InlineResponse2013)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2013>> CreateChartAsyncWithHttpInfo (string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->CreateChart");

            var localVarPath = "/my/ships/{shipSymbol}/chart";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateChart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2013) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2013)));
        }

        /// <summary>
        /// Scan Ships Scan for nearby ships, retrieving information for all ships in range.  Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>InlineResponse20110</returns>
        public InlineResponse20110 CreateShipShipScan (string shipSymbol)
        {
             ApiResponse<InlineResponse20110> localVarResponse = CreateShipShipScanWithHttpInfo(shipSymbol);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Scan Ships Scan for nearby ships, retrieving information for all ships in range.  Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>ApiResponse of InlineResponse20110</returns>
        public ApiResponse< InlineResponse20110 > CreateShipShipScanWithHttpInfo (string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->CreateShipShipScan");

            var localVarPath = "/my/ships/{shipSymbol}/scan/ships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateShipShipScan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20110>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20110) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20110)));
        }

        /// <summary>
        /// Scan Ships Scan for nearby ships, retrieving information for all ships in range.  Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Task of InlineResponse20110</returns>
        public async System.Threading.Tasks.Task<InlineResponse20110> CreateShipShipScanAsync (string shipSymbol)
        {
             ApiResponse<InlineResponse20110> localVarResponse = await CreateShipShipScanAsyncWithHttpInfo(shipSymbol);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Scan Ships Scan for nearby ships, retrieving information for all ships in range.  Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Task of ApiResponse (InlineResponse20110)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20110>> CreateShipShipScanAsyncWithHttpInfo (string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->CreateShipShipScan");

            var localVarPath = "/my/ships/{shipSymbol}/scan/ships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateShipShipScan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20110>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20110) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20110)));
        }

        /// <summary>
        /// Scan Systems Scan for nearby systems, retrieving information on the systems&#x27; distance from the ship and their waypoints. Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>InlineResponse2018</returns>
        public InlineResponse2018 CreateShipSystemScan (string shipSymbol)
        {
             ApiResponse<InlineResponse2018> localVarResponse = CreateShipSystemScanWithHttpInfo(shipSymbol);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Scan Systems Scan for nearby systems, retrieving information on the systems&#x27; distance from the ship and their waypoints. Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>ApiResponse of InlineResponse2018</returns>
        public ApiResponse< InlineResponse2018 > CreateShipSystemScanWithHttpInfo (string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->CreateShipSystemScan");

            var localVarPath = "/my/ships/{shipSymbol}/scan/systems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateShipSystemScan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2018>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2018) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2018)));
        }

        /// <summary>
        /// Scan Systems Scan for nearby systems, retrieving information on the systems&#x27; distance from the ship and their waypoints. Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Task of InlineResponse2018</returns>
        public async System.Threading.Tasks.Task<InlineResponse2018> CreateShipSystemScanAsync (string shipSymbol)
        {
             ApiResponse<InlineResponse2018> localVarResponse = await CreateShipSystemScanAsyncWithHttpInfo(shipSymbol);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Scan Systems Scan for nearby systems, retrieving information on the systems&#x27; distance from the ship and their waypoints. Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Task of ApiResponse (InlineResponse2018)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2018>> CreateShipSystemScanAsyncWithHttpInfo (string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->CreateShipSystemScan");

            var localVarPath = "/my/ships/{shipSymbol}/scan/systems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateShipSystemScan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2018>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2018) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2018)));
        }

        /// <summary>
        /// Scan Waypoints Scan for nearby waypoints, retrieving detailed information on each waypoint in range. Scanning uncharted waypoints will allow you to ignore their uncharted state and will list the waypoints&#x27; traits.  Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>InlineResponse2019</returns>
        public InlineResponse2019 CreateShipWaypointScan (string shipSymbol)
        {
             ApiResponse<InlineResponse2019> localVarResponse = CreateShipWaypointScanWithHttpInfo(shipSymbol);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Scan Waypoints Scan for nearby waypoints, retrieving detailed information on each waypoint in range. Scanning uncharted waypoints will allow you to ignore their uncharted state and will list the waypoints&#x27; traits.  Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>ApiResponse of InlineResponse2019</returns>
        public ApiResponse< InlineResponse2019 > CreateShipWaypointScanWithHttpInfo (string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->CreateShipWaypointScan");

            var localVarPath = "/my/ships/{shipSymbol}/scan/waypoints";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateShipWaypointScan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2019>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2019) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2019)));
        }

        /// <summary>
        /// Scan Waypoints Scan for nearby waypoints, retrieving detailed information on each waypoint in range. Scanning uncharted waypoints will allow you to ignore their uncharted state and will list the waypoints&#x27; traits.  Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Task of InlineResponse2019</returns>
        public async System.Threading.Tasks.Task<InlineResponse2019> CreateShipWaypointScanAsync (string shipSymbol)
        {
             ApiResponse<InlineResponse2019> localVarResponse = await CreateShipWaypointScanAsyncWithHttpInfo(shipSymbol);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Scan Waypoints Scan for nearby waypoints, retrieving detailed information on each waypoint in range. Scanning uncharted waypoints will allow you to ignore their uncharted state and will list the waypoints&#x27; traits.  Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Task of ApiResponse (InlineResponse2019)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2019>> CreateShipWaypointScanAsyncWithHttpInfo (string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->CreateShipWaypointScan");

            var localVarPath = "/my/ships/{shipSymbol}/scan/waypoints";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateShipWaypointScan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2019>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2019) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2019)));
        }

        /// <summary>
        /// Create Survey Create surveys on a waypoint that can be extracted such as asteroid fields. A survey focuses on specific types of deposits from the extracted location. When ships extract using this survey, they are guaranteed to procure a high amount of one of the goods in the survey.  In order to use a survey, send the entire survey details in the body of the extract request.  Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.  Your ship will enter a cooldown after surveying in which it is unable to perform certain actions. Surveys will eventually expire after a period of time or will be exhausted after being extracted several times based on the survey&#x27;s size. Multiple ships can use the same survey for extraction.  A ship must have the &#x60;Surveyor&#x60; mount installed in order to use this function.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>InlineResponse2014</returns>
        public InlineResponse2014 CreateSurvey (string shipSymbol)
        {
             ApiResponse<InlineResponse2014> localVarResponse = CreateSurveyWithHttpInfo(shipSymbol);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Survey Create surveys on a waypoint that can be extracted such as asteroid fields. A survey focuses on specific types of deposits from the extracted location. When ships extract using this survey, they are guaranteed to procure a high amount of one of the goods in the survey.  In order to use a survey, send the entire survey details in the body of the extract request.  Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.  Your ship will enter a cooldown after surveying in which it is unable to perform certain actions. Surveys will eventually expire after a period of time or will be exhausted after being extracted several times based on the survey&#x27;s size. Multiple ships can use the same survey for extraction.  A ship must have the &#x60;Surveyor&#x60; mount installed in order to use this function.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>ApiResponse of InlineResponse2014</returns>
        public ApiResponse< InlineResponse2014 > CreateSurveyWithHttpInfo (string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->CreateSurvey");

            var localVarPath = "/my/ships/{shipSymbol}/survey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSurvey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2014) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2014)));
        }

        /// <summary>
        /// Create Survey Create surveys on a waypoint that can be extracted such as asteroid fields. A survey focuses on specific types of deposits from the extracted location. When ships extract using this survey, they are guaranteed to procure a high amount of one of the goods in the survey.  In order to use a survey, send the entire survey details in the body of the extract request.  Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.  Your ship will enter a cooldown after surveying in which it is unable to perform certain actions. Surveys will eventually expire after a period of time or will be exhausted after being extracted several times based on the survey&#x27;s size. Multiple ships can use the same survey for extraction.  A ship must have the &#x60;Surveyor&#x60; mount installed in order to use this function.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>Task of InlineResponse2014</returns>
        public async System.Threading.Tasks.Task<InlineResponse2014> CreateSurveyAsync (string shipSymbol)
        {
             ApiResponse<InlineResponse2014> localVarResponse = await CreateSurveyAsyncWithHttpInfo(shipSymbol);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Survey Create surveys on a waypoint that can be extracted such as asteroid fields. A survey focuses on specific types of deposits from the extracted location. When ships extract using this survey, they are guaranteed to procure a high amount of one of the goods in the survey.  In order to use a survey, send the entire survey details in the body of the extract request.  Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.  Your ship will enter a cooldown after surveying in which it is unable to perform certain actions. Surveys will eventually expire after a period of time or will be exhausted after being extracted several times based on the survey&#x27;s size. Multiple ships can use the same survey for extraction.  A ship must have the &#x60;Surveyor&#x60; mount installed in order to use this function.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>Task of ApiResponse (InlineResponse2014)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2014>> CreateSurveyAsyncWithHttpInfo (string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->CreateSurvey");

            var localVarPath = "/my/ships/{shipSymbol}/survey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSurvey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2014) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2014)));
        }

        /// <summary>
        /// Dock Ship Attempt to dock your ship at its current location. Docking will only succeed if your ship is capable of docking at the time of the request.  Docked ships can access elements in their current location, such as the market or a shipyard, but cannot do actions that require the ship to be above surface such as navigating or extracting.  The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>DockShip200Response</returns>
        public DockShip200Response DockShip (string shipSymbol)
        {
             ApiResponse<DockShip200Response> localVarResponse = DockShipWithHttpInfo(shipSymbol);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Dock Ship Attempt to dock your ship at its current location. Docking will only succeed if your ship is capable of docking at the time of the request.  Docked ships can access elements in their current location, such as the market or a shipyard, but cannot do actions that require the ship to be above surface such as navigating or extracting.  The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>ApiResponse of DockShip200Response</returns>
        public ApiResponse< DockShip200Response > DockShipWithHttpInfo (string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->DockShip");

            var localVarPath = "/my/ships/{shipSymbol}/dock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DockShip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DockShip200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DockShip200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DockShip200Response)));
        }

        /// <summary>
        /// Dock Ship Attempt to dock your ship at its current location. Docking will only succeed if your ship is capable of docking at the time of the request.  Docked ships can access elements in their current location, such as the market or a shipyard, but cannot do actions that require the ship to be above surface such as navigating or extracting.  The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>Task of DockShip200Response</returns>
        public async System.Threading.Tasks.Task<DockShip200Response> DockShipAsync (string shipSymbol)
        {
             ApiResponse<DockShip200Response> localVarResponse = await DockShipAsyncWithHttpInfo(shipSymbol);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Dock Ship Attempt to dock your ship at its current location. Docking will only succeed if your ship is capable of docking at the time of the request.  Docked ships can access elements in their current location, such as the market or a shipyard, but cannot do actions that require the ship to be above surface such as navigating or extracting.  The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>Task of ApiResponse (DockShip200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DockShip200Response>> DockShipAsyncWithHttpInfo (string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->DockShip");

            var localVarPath = "/my/ships/{shipSymbol}/dock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DockShip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DockShip200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DockShip200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DockShip200Response)));
        }

        /// <summary>
        /// Extract Resources Extract resources from a waypoint that can be extracted, such as asteroid fields, into your ship. Send an optional survey as the payload to target specific yields.  The ship must be in orbit to be able to extract and must have mining equipments installed that can extract goods, such as the &#x60;Gas Siphon&#x60; mount for gas-based goods or &#x60;Mining Laser&#x60; mount for ore-based goods.  The survey property is now deprecated. See the &#x60;extract/survey&#x60; endpoint for more details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InlineResponse2015</returns>
        public InlineResponse2015 ExtractResources (string shipSymbol, ShipSymbolExtractBody body = null)
        {
             ApiResponse<InlineResponse2015> localVarResponse = ExtractResourcesWithHttpInfo(shipSymbol, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Extract Resources Extract resources from a waypoint that can be extracted, such as asteroid fields, into your ship. Send an optional survey as the payload to target specific yields.  The ship must be in orbit to be able to extract and must have mining equipments installed that can extract goods, such as the &#x60;Gas Siphon&#x60; mount for gas-based goods or &#x60;Mining Laser&#x60; mount for ore-based goods.  The survey property is now deprecated. See the &#x60;extract/survey&#x60; endpoint for more details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2015</returns>
        public ApiResponse< InlineResponse2015 > ExtractResourcesWithHttpInfo (string shipSymbol, ShipSymbolExtractBody body = null)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->ExtractResources");

            var localVarPath = "/my/ships/{shipSymbol}/extract";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtractResources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2015) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2015)));
        }

        /// <summary>
        /// Extract Resources Extract resources from a waypoint that can be extracted, such as asteroid fields, into your ship. Send an optional survey as the payload to target specific yields.  The ship must be in orbit to be able to extract and must have mining equipments installed that can extract goods, such as the &#x60;Gas Siphon&#x60; mount for gas-based goods or &#x60;Mining Laser&#x60; mount for ore-based goods.  The survey property is now deprecated. See the &#x60;extract/survey&#x60; endpoint for more details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of InlineResponse2015</returns>
        public async System.Threading.Tasks.Task<InlineResponse2015> ExtractResourcesAsync (string shipSymbol, ShipSymbolExtractBody body = null)
        {
             ApiResponse<InlineResponse2015> localVarResponse = await ExtractResourcesAsyncWithHttpInfo(shipSymbol, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Extract Resources Extract resources from a waypoint that can be extracted, such as asteroid fields, into your ship. Send an optional survey as the payload to target specific yields.  The ship must be in orbit to be able to extract and must have mining equipments installed that can extract goods, such as the &#x60;Gas Siphon&#x60; mount for gas-based goods or &#x60;Mining Laser&#x60; mount for ore-based goods.  The survey property is now deprecated. See the &#x60;extract/survey&#x60; endpoint for more details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2015)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2015>> ExtractResourcesAsyncWithHttpInfo (string shipSymbol, ShipSymbolExtractBody body = null)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->ExtractResources");

            var localVarPath = "/my/ships/{shipSymbol}/extract";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtractResources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2015) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2015)));
        }

        /// <summary>
        /// Extract Resources with Survey Use a survey when extracting resources from a waypoint. This endpoint requires a survey as the payload, which allows your ship to extract specific yields.  Send the full survey object as the payload which will be validated according to the signature. If the signature is invalid, or any properties of the survey are changed, the request will fail.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InlineResponse2017</returns>
        public InlineResponse2017 ExtractResourcesWithSurvey (string shipSymbol, Survey body = null)
        {
             ApiResponse<InlineResponse2017> localVarResponse = ExtractResourcesWithSurveyWithHttpInfo(shipSymbol, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Extract Resources with Survey Use a survey when extracting resources from a waypoint. This endpoint requires a survey as the payload, which allows your ship to extract specific yields.  Send the full survey object as the payload which will be validated according to the signature. If the signature is invalid, or any properties of the survey are changed, the request will fail.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2017</returns>
        public ApiResponse< InlineResponse2017 > ExtractResourcesWithSurveyWithHttpInfo (string shipSymbol, Survey body = null)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->ExtractResourcesWithSurvey");

            var localVarPath = "/my/ships/{shipSymbol}/extract/survey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtractResourcesWithSurvey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2017>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2017) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2017)));
        }

        /// <summary>
        /// Extract Resources with Survey Use a survey when extracting resources from a waypoint. This endpoint requires a survey as the payload, which allows your ship to extract specific yields.  Send the full survey object as the payload which will be validated according to the signature. If the signature is invalid, or any properties of the survey are changed, the request will fail.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of InlineResponse2017</returns>
        public async System.Threading.Tasks.Task<InlineResponse2017> ExtractResourcesWithSurveyAsync (string shipSymbol, Survey body = null)
        {
             ApiResponse<InlineResponse2017> localVarResponse = await ExtractResourcesWithSurveyAsyncWithHttpInfo(shipSymbol, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Extract Resources with Survey Use a survey when extracting resources from a waypoint. This endpoint requires a survey as the payload, which allows your ship to extract specific yields.  Send the full survey object as the payload which will be validated according to the signature. If the signature is invalid, or any properties of the survey are changed, the request will fail.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2017)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2017>> ExtractResourcesWithSurveyAsyncWithHttpInfo (string shipSymbol, Survey body = null)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->ExtractResourcesWithSurvey");

            var localVarPath = "/my/ships/{shipSymbol}/extract/survey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtractResourcesWithSurvey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2017>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2017) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2017)));
        }

        /// <summary>
        /// Get Mounts Get the mounts installed on a ship.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#x27;s symbol.</param>
        /// <returns>GetMounts200Response</returns>
        public GetMounts200Response GetMounts (string shipSymbol)
        {
             ApiResponse<GetMounts200Response> localVarResponse = GetMountsWithHttpInfo(shipSymbol);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Mounts Get the mounts installed on a ship.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#x27;s symbol.</param>
        /// <returns>ApiResponse of GetMounts200Response</returns>
        public ApiResponse< GetMounts200Response > GetMountsWithHttpInfo (string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->GetMounts");

            var localVarPath = "/my/ships/{shipSymbol}/mounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMounts200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetMounts200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMounts200Response)));
        }

        /// <summary>
        /// Get Mounts Get the mounts installed on a ship.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#x27;s symbol.</param>
        /// <returns>Task of GetMounts200Response</returns>
        public async System.Threading.Tasks.Task<GetMounts200Response> GetMountsAsync (string shipSymbol)
        {
             ApiResponse<GetMounts200Response> localVarResponse = await GetMountsAsyncWithHttpInfo(shipSymbol);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Mounts Get the mounts installed on a ship.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#x27;s symbol.</param>
        /// <returns>Task of ApiResponse (GetMounts200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetMounts200Response>> GetMountsAsyncWithHttpInfo (string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->GetMounts");

            var localVarPath = "/my/ships/{shipSymbol}/mounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMounts200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetMounts200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMounts200Response)));
        }

        /// <summary>
        /// Get Ship Retrieve the details of a ship under your agent&#x27;s ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>InlineResponse20019</returns>
        public InlineResponse20019 GetMyShip (string shipSymbol)
        {
             ApiResponse<InlineResponse20019> localVarResponse = GetMyShipWithHttpInfo(shipSymbol);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Ship Retrieve the details of a ship under your agent&#x27;s ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        public ApiResponse< InlineResponse20019 > GetMyShipWithHttpInfo (string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->GetMyShip");

            var localVarPath = "/my/ships/{shipSymbol}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMyShip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20019>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20019) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20019)));
        }

        /// <summary>
        /// Get Ship Retrieve the details of a ship under your agent&#x27;s ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>Task of InlineResponse20019</returns>
        public async System.Threading.Tasks.Task<InlineResponse20019> GetMyShipAsync (string shipSymbol)
        {
             ApiResponse<InlineResponse20019> localVarResponse = await GetMyShipAsyncWithHttpInfo(shipSymbol);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Ship Retrieve the details of a ship under your agent&#x27;s ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> GetMyShipAsyncWithHttpInfo (string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->GetMyShip");

            var localVarPath = "/my/ships/{shipSymbol}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMyShip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20019>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20019) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20019)));
        }

        /// <summary>
        /// Get Ship Cargo Retrieve the cargo of a ship under your agent&#x27;s ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>InlineResponse20020</returns>
        public InlineResponse20020 GetMyShipCargo (string shipSymbol)
        {
             ApiResponse<InlineResponse20020> localVarResponse = GetMyShipCargoWithHttpInfo(shipSymbol);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Ship Cargo Retrieve the cargo of a ship under your agent&#x27;s ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>ApiResponse of InlineResponse20020</returns>
        public ApiResponse< InlineResponse20020 > GetMyShipCargoWithHttpInfo (string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->GetMyShipCargo");

            var localVarPath = "/my/ships/{shipSymbol}/cargo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMyShipCargo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20020>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20020) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20020)));
        }

        /// <summary>
        /// Get Ship Cargo Retrieve the cargo of a ship under your agent&#x27;s ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>Task of InlineResponse20020</returns>
        public async System.Threading.Tasks.Task<InlineResponse20020> GetMyShipCargoAsync (string shipSymbol)
        {
             ApiResponse<InlineResponse20020> localVarResponse = await GetMyShipCargoAsyncWithHttpInfo(shipSymbol);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Ship Cargo Retrieve the cargo of a ship under your agent&#x27;s ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>Task of ApiResponse (InlineResponse20020)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20020>> GetMyShipCargoAsyncWithHttpInfo (string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->GetMyShipCargo");

            var localVarPath = "/my/ships/{shipSymbol}/cargo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMyShipCargo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20020>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20020) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20020)));
        }

        /// <summary>
        /// List Ships Return a paginated list of all of ships under your agent&#x27;s ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <returns>InlineResponse20018</returns>
        public InlineResponse20018 GetMyShips (int? page = null, int? limit = null)
        {
             ApiResponse<InlineResponse20018> localVarResponse = GetMyShipsWithHttpInfo(page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Ships Return a paginated list of all of ships under your agent&#x27;s ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <returns>ApiResponse of InlineResponse20018</returns>
        public ApiResponse< InlineResponse20018 > GetMyShipsWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/my/ships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMyShips", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20018>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20018) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20018)));
        }

        /// <summary>
        /// List Ships Return a paginated list of all of ships under your agent&#x27;s ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <returns>Task of InlineResponse20018</returns>
        public async System.Threading.Tasks.Task<InlineResponse20018> GetMyShipsAsync (int? page = null, int? limit = null)
        {
             ApiResponse<InlineResponse20018> localVarResponse = await GetMyShipsAsyncWithHttpInfo(page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Ships Return a paginated list of all of ships under your agent&#x27;s ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (InlineResponse20018)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20018>> GetMyShipsAsyncWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/my/ships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMyShips", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20018>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20018) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20018)));
        }

        /// <summary>
        /// Get Repair Ship Get the cost of repairing a ship.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>InlineResponse20031</returns>
        public InlineResponse20031 GetRepairShip (string shipSymbol)
        {
             ApiResponse<InlineResponse20031> localVarResponse = GetRepairShipWithHttpInfo(shipSymbol);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Repair Ship Get the cost of repairing a ship.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>ApiResponse of InlineResponse20031</returns>
        public ApiResponse< InlineResponse20031 > GetRepairShipWithHttpInfo (string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->GetRepairShip");

            var localVarPath = "/my/ships/{shipSymbol}/repair";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRepairShip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20031>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20031) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20031)));
        }

        /// <summary>
        /// Get Repair Ship Get the cost of repairing a ship.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Task of InlineResponse20031</returns>
        public async System.Threading.Tasks.Task<InlineResponse20031> GetRepairShipAsync (string shipSymbol)
        {
             ApiResponse<InlineResponse20031> localVarResponse = await GetRepairShipAsyncWithHttpInfo(shipSymbol);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Repair Ship Get the cost of repairing a ship.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Task of ApiResponse (InlineResponse20031)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20031>> GetRepairShipAsyncWithHttpInfo (string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->GetRepairShip");

            var localVarPath = "/my/ships/{shipSymbol}/repair";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRepairShip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20031>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20031) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20031)));
        }

        /// <summary>
        /// Get Scrap Ship Get the amount of value that will be returned when scrapping a ship.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>InlineResponse20029</returns>
        public InlineResponse20029 GetScrapShip (string shipSymbol)
        {
             ApiResponse<InlineResponse20029> localVarResponse = GetScrapShipWithHttpInfo(shipSymbol);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Scrap Ship Get the amount of value that will be returned when scrapping a ship.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>ApiResponse of InlineResponse20029</returns>
        public ApiResponse< InlineResponse20029 > GetScrapShipWithHttpInfo (string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->GetScrapShip");

            var localVarPath = "/my/ships/{shipSymbol}/scrap";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScrapShip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20029>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20029) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20029)));
        }

        /// <summary>
        /// Get Scrap Ship Get the amount of value that will be returned when scrapping a ship.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Task of InlineResponse20029</returns>
        public async System.Threading.Tasks.Task<InlineResponse20029> GetScrapShipAsync (string shipSymbol)
        {
             ApiResponse<InlineResponse20029> localVarResponse = await GetScrapShipAsyncWithHttpInfo(shipSymbol);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Scrap Ship Get the amount of value that will be returned when scrapping a ship.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Task of ApiResponse (InlineResponse20029)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20029>> GetScrapShipAsyncWithHttpInfo (string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->GetScrapShip");

            var localVarPath = "/my/ships/{shipSymbol}/scrap";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScrapShip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20029>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20029) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20029)));
        }

        /// <summary>
        /// Get Ship Cooldown Retrieve the details of your ship&#x27;s reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.  Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.  Response returns a 204 status code (no-content) when the ship has no cooldown.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>InlineResponse20021</returns>
        public InlineResponse20021 GetShipCooldown (string shipSymbol)
        {
             ApiResponse<InlineResponse20021> localVarResponse = GetShipCooldownWithHttpInfo(shipSymbol);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Ship Cooldown Retrieve the details of your ship&#x27;s reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.  Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.  Response returns a 204 status code (no-content) when the ship has no cooldown.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>ApiResponse of InlineResponse20021</returns>
        public ApiResponse< InlineResponse20021 > GetShipCooldownWithHttpInfo (string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->GetShipCooldown");

            var localVarPath = "/my/ships/{shipSymbol}/cooldown";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShipCooldown", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20021>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20021) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20021)));
        }

        /// <summary>
        /// Get Ship Cooldown Retrieve the details of your ship&#x27;s reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.  Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.  Response returns a 204 status code (no-content) when the ship has no cooldown.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>Task of InlineResponse20021</returns>
        public async System.Threading.Tasks.Task<InlineResponse20021> GetShipCooldownAsync (string shipSymbol)
        {
             ApiResponse<InlineResponse20021> localVarResponse = await GetShipCooldownAsyncWithHttpInfo(shipSymbol);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Ship Cooldown Retrieve the details of your ship&#x27;s reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.  Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.  Response returns a 204 status code (no-content) when the ship has no cooldown.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>Task of ApiResponse (InlineResponse20021)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20021>> GetShipCooldownAsyncWithHttpInfo (string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->GetShipCooldown");

            var localVarPath = "/my/ships/{shipSymbol}/cooldown";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShipCooldown", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20021>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20021) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20021)));
        }

        /// <summary>
        /// Get Ship Modules Get the modules installed on a ship.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship</param>
        /// <returns>InlineResponse20034</returns>
        public InlineResponse20034 GetShipModules (string shipSymbol)
        {
             ApiResponse<InlineResponse20034> localVarResponse = GetShipModulesWithHttpInfo(shipSymbol);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Ship Modules Get the modules installed on a ship.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship</param>
        /// <returns>ApiResponse of InlineResponse20034</returns>
        public ApiResponse< InlineResponse20034 > GetShipModulesWithHttpInfo (string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->GetShipModules");

            var localVarPath = "/my/ships/{shipSymbol}/modules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            // authentication (AccountToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShipModules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20034>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20034) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20034)));
        }

        /// <summary>
        /// Get Ship Modules Get the modules installed on a ship.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship</param>
        /// <returns>Task of InlineResponse20034</returns>
        public async System.Threading.Tasks.Task<InlineResponse20034> GetShipModulesAsync (string shipSymbol)
        {
             ApiResponse<InlineResponse20034> localVarResponse = await GetShipModulesAsyncWithHttpInfo(shipSymbol);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Ship Modules Get the modules installed on a ship.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship</param>
        /// <returns>Task of ApiResponse (InlineResponse20034)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20034>> GetShipModulesAsyncWithHttpInfo (string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->GetShipModules");

            var localVarPath = "/my/ships/{shipSymbol}/modules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            // authentication (AccountToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShipModules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20034>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20034) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20034)));
        }

        /// <summary>
        /// Get Ship Nav Get the current nav status of a ship.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>InlineResponse20025</returns>
        public InlineResponse20025 GetShipNav (string shipSymbol)
        {
             ApiResponse<InlineResponse20025> localVarResponse = GetShipNavWithHttpInfo(shipSymbol);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Ship Nav Get the current nav status of a ship.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>ApiResponse of InlineResponse20025</returns>
        public ApiResponse< InlineResponse20025 > GetShipNavWithHttpInfo (string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->GetShipNav");

            var localVarPath = "/my/ships/{shipSymbol}/nav";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShipNav", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20025>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20025) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20025)));
        }

        /// <summary>
        /// Get Ship Nav Get the current nav status of a ship.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Task of InlineResponse20025</returns>
        public async System.Threading.Tasks.Task<InlineResponse20025> GetShipNavAsync (string shipSymbol)
        {
             ApiResponse<InlineResponse20025> localVarResponse = await GetShipNavAsyncWithHttpInfo(shipSymbol);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Ship Nav Get the current nav status of a ship.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Task of ApiResponse (InlineResponse20025)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20025>> GetShipNavAsyncWithHttpInfo (string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->GetShipNav");

            var localVarPath = "/my/ships/{shipSymbol}/nav";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShipNav", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20025>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20025) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20025)));
        }

        /// <summary>
        /// Install Mount Install a mount on a ship.  In order to install a mount, the ship must be docked and located in a waypoint that has a &#x60;Shipyard&#x60; trait. The ship also must have the mount to install in its cargo hold.  An installation fee will be deduced by the Shipyard for installing the mount on the ship. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#x27;s symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InstallMount201Response</returns>
        public InstallMount201Response InstallMount (string shipSymbol, InstallMountRequest body = null)
        {
             ApiResponse<InstallMount201Response> localVarResponse = InstallMountWithHttpInfo(shipSymbol, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Install Mount Install a mount on a ship.  In order to install a mount, the ship must be docked and located in a waypoint that has a &#x60;Shipyard&#x60; trait. The ship also must have the mount to install in its cargo hold.  An installation fee will be deduced by the Shipyard for installing the mount on the ship. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#x27;s symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InstallMount201Response</returns>
        public ApiResponse< InstallMount201Response > InstallMountWithHttpInfo (string shipSymbol, InstallMountRequest body = null)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->InstallMount");

            var localVarPath = "/my/ships/{shipSymbol}/mounts/install";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstallMount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InstallMount201Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InstallMount201Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InstallMount201Response)));
        }

        /// <summary>
        /// Install Mount Install a mount on a ship.  In order to install a mount, the ship must be docked and located in a waypoint that has a &#x60;Shipyard&#x60; trait. The ship also must have the mount to install in its cargo hold.  An installation fee will be deduced by the Shipyard for installing the mount on the ship. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#x27;s symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of InstallMount201Response</returns>
        public async System.Threading.Tasks.Task<InstallMount201Response> InstallMountAsync (string shipSymbol, InstallMountRequest body = null)
        {
             ApiResponse<InstallMount201Response> localVarResponse = await InstallMountAsyncWithHttpInfo(shipSymbol, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Install Mount Install a mount on a ship.  In order to install a mount, the ship must be docked and located in a waypoint that has a &#x60;Shipyard&#x60; trait. The ship also must have the mount to install in its cargo hold.  An installation fee will be deduced by the Shipyard for installing the mount on the ship. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#x27;s symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (InstallMount201Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InstallMount201Response>> InstallMountAsyncWithHttpInfo (string shipSymbol, InstallMountRequest body = null)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->InstallMount");

            var localVarPath = "/my/ships/{shipSymbol}/mounts/install";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstallMount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InstallMount201Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InstallMount201Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InstallMount201Response)));
        }

        /// <summary>
        /// Install Ship Module Install a module on a ship. The module must be in your cargo.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InlineResponse20111</returns>
        public InlineResponse20111 InstallShipModule (string shipSymbol, ModulesInstallBody body = null)
        {
             ApiResponse<InlineResponse20111> localVarResponse = InstallShipModuleWithHttpInfo(shipSymbol, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Install Ship Module Install a module on a ship. The module must be in your cargo.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20111</returns>
        public ApiResponse< InlineResponse20111 > InstallShipModuleWithHttpInfo (string shipSymbol, ModulesInstallBody body = null)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->InstallShipModule");

            var localVarPath = "/my/ships/{shipSymbol}/modules/install";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (AccountToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstallShipModule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20111>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20111) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20111)));
        }

        /// <summary>
        /// Install Ship Module Install a module on a ship. The module must be in your cargo.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of InlineResponse20111</returns>
        public async System.Threading.Tasks.Task<InlineResponse20111> InstallShipModuleAsync (string shipSymbol, ModulesInstallBody body = null)
        {
             ApiResponse<InlineResponse20111> localVarResponse = await InstallShipModuleAsyncWithHttpInfo(shipSymbol, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Install Ship Module Install a module on a ship. The module must be in your cargo.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20111)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20111>> InstallShipModuleAsyncWithHttpInfo (string shipSymbol, ModulesInstallBody body = null)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->InstallShipModule");

            var localVarPath = "/my/ships/{shipSymbol}/modules/install";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (AccountToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstallShipModule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20111>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20111) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20111)));
        }

        /// <summary>
        /// Jettison Cargo Jettison cargo from your ship&#x27;s cargo hold.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InlineResponse20022</returns>
        public InlineResponse20022 Jettison (string shipSymbol, ShipSymbolJettisonBody body = null)
        {
             ApiResponse<InlineResponse20022> localVarResponse = JettisonWithHttpInfo(shipSymbol, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Jettison Cargo Jettison cargo from your ship&#x27;s cargo hold.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        public ApiResponse< InlineResponse20022 > JettisonWithHttpInfo (string shipSymbol, ShipSymbolJettisonBody body = null)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->Jettison");

            var localVarPath = "/my/ships/{shipSymbol}/jettison";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Jettison", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20022>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20022) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20022)));
        }

        /// <summary>
        /// Jettison Cargo Jettison cargo from your ship&#x27;s cargo hold.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of InlineResponse20022</returns>
        public async System.Threading.Tasks.Task<InlineResponse20022> JettisonAsync (string shipSymbol, ShipSymbolJettisonBody body = null)
        {
             ApiResponse<InlineResponse20022> localVarResponse = await JettisonAsyncWithHttpInfo(shipSymbol, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Jettison Cargo Jettison cargo from your ship&#x27;s cargo hold.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20022>> JettisonAsyncWithHttpInfo (string shipSymbol, ShipSymbolJettisonBody body = null)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->Jettison");

            var localVarPath = "/my/ships/{shipSymbol}/jettison";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Jettison", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20022>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20022) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20022)));
        }

        /// <summary>
        /// Jump Ship Jump your ship instantly to a target connected waypoint. The ship must be in orbit to execute a jump.  A unit of antimatter is purchased and consumed from the market when jumping. The price of antimatter is determined by the market and is subject to change. A ship can only jump to connected waypoints
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InlineResponse20023</returns>
        public InlineResponse20023 JumpShip (string shipSymbol, ShipSymbolJumpBody body = null)
        {
             ApiResponse<InlineResponse20023> localVarResponse = JumpShipWithHttpInfo(shipSymbol, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Jump Ship Jump your ship instantly to a target connected waypoint. The ship must be in orbit to execute a jump.  A unit of antimatter is purchased and consumed from the market when jumping. The price of antimatter is determined by the market and is subject to change. A ship can only jump to connected waypoints
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20023</returns>
        public ApiResponse< InlineResponse20023 > JumpShipWithHttpInfo (string shipSymbol, ShipSymbolJumpBody body = null)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->JumpShip");

            var localVarPath = "/my/ships/{shipSymbol}/jump";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JumpShip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20023>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20023) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20023)));
        }

        /// <summary>
        /// Jump Ship Jump your ship instantly to a target connected waypoint. The ship must be in orbit to execute a jump.  A unit of antimatter is purchased and consumed from the market when jumping. The price of antimatter is determined by the market and is subject to change. A ship can only jump to connected waypoints
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of InlineResponse20023</returns>
        public async System.Threading.Tasks.Task<InlineResponse20023> JumpShipAsync (string shipSymbol, ShipSymbolJumpBody body = null)
        {
             ApiResponse<InlineResponse20023> localVarResponse = await JumpShipAsyncWithHttpInfo(shipSymbol, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Jump Ship Jump your ship instantly to a target connected waypoint. The ship must be in orbit to execute a jump.  A unit of antimatter is purchased and consumed from the market when jumping. The price of antimatter is determined by the market and is subject to change. A ship can only jump to connected waypoints
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20023)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20023>> JumpShipAsyncWithHttpInfo (string shipSymbol, ShipSymbolJumpBody body = null)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->JumpShip");

            var localVarPath = "/my/ships/{shipSymbol}/jump";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JumpShip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20023>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20023) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20023)));
        }

        /// <summary>
        /// Navigate Ship Navigate to a target destination. The ship must be in orbit to use this function. The destination waypoint must be within the same system as the ship&#x27;s current location. Navigating will consume the necessary fuel from the ship&#x27;s manifest based on the distance to the target waypoint.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it&#x27;s destination.  To travel between systems, see the ship&#x27;s Warp or Jump actions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InlineResponse20024</returns>
        public InlineResponse20024 NavigateShip (string shipSymbol, ShipSymbolNavigateBody body = null)
        {
             ApiResponse<InlineResponse20024> localVarResponse = NavigateShipWithHttpInfo(shipSymbol, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Navigate Ship Navigate to a target destination. The ship must be in orbit to use this function. The destination waypoint must be within the same system as the ship&#x27;s current location. Navigating will consume the necessary fuel from the ship&#x27;s manifest based on the distance to the target waypoint.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it&#x27;s destination.  To travel between systems, see the ship&#x27;s Warp or Jump actions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20024</returns>
        public ApiResponse< InlineResponse20024 > NavigateShipWithHttpInfo (string shipSymbol, ShipSymbolNavigateBody body = null)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->NavigateShip");

            var localVarPath = "/my/ships/{shipSymbol}/navigate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NavigateShip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20024>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20024) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20024)));
        }

        /// <summary>
        /// Navigate Ship Navigate to a target destination. The ship must be in orbit to use this function. The destination waypoint must be within the same system as the ship&#x27;s current location. Navigating will consume the necessary fuel from the ship&#x27;s manifest based on the distance to the target waypoint.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it&#x27;s destination.  To travel between systems, see the ship&#x27;s Warp or Jump actions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of InlineResponse20024</returns>
        public async System.Threading.Tasks.Task<InlineResponse20024> NavigateShipAsync (string shipSymbol, ShipSymbolNavigateBody body = null)
        {
             ApiResponse<InlineResponse20024> localVarResponse = await NavigateShipAsyncWithHttpInfo(shipSymbol, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Navigate Ship Navigate to a target destination. The ship must be in orbit to use this function. The destination waypoint must be within the same system as the ship&#x27;s current location. Navigating will consume the necessary fuel from the ship&#x27;s manifest based on the distance to the target waypoint.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it&#x27;s destination.  To travel between systems, see the ship&#x27;s Warp or Jump actions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20024)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20024>> NavigateShipAsyncWithHttpInfo (string shipSymbol, ShipSymbolNavigateBody body = null)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->NavigateShip");

            var localVarPath = "/my/ships/{shipSymbol}/navigate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NavigateShip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20024>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20024) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20024)));
        }

        /// <summary>
        /// Negotiate Contract Negotiate a new contract with the HQ.  In order to negotiate a new contract, an agent must not have ongoing or offered contracts over the allowed maximum amount. Currently the maximum contracts an agent can have at a time is 1.  Once a contract is negotiated, it is added to the list of contracts offered to the agent, which the agent can then accept.   The ship must be present at any waypoint with a faction present to negotiate a contract with that faction.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#x27;s symbol.</param>
        /// <returns>NegotiateContract200Response</returns>
        public NegotiateContract200Response NegotiateContract (string shipSymbol)
        {
             ApiResponse<NegotiateContract200Response> localVarResponse = NegotiateContractWithHttpInfo(shipSymbol);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Negotiate Contract Negotiate a new contract with the HQ.  In order to negotiate a new contract, an agent must not have ongoing or offered contracts over the allowed maximum amount. Currently the maximum contracts an agent can have at a time is 1.  Once a contract is negotiated, it is added to the list of contracts offered to the agent, which the agent can then accept.   The ship must be present at any waypoint with a faction present to negotiate a contract with that faction.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#x27;s symbol.</param>
        /// <returns>ApiResponse of NegotiateContract200Response</returns>
        public ApiResponse< NegotiateContract200Response > NegotiateContractWithHttpInfo (string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->NegotiateContract");

            var localVarPath = "/my/ships/{shipSymbol}/negotiate/contract";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NegotiateContract", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NegotiateContract200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NegotiateContract200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NegotiateContract200Response)));
        }

        /// <summary>
        /// Negotiate Contract Negotiate a new contract with the HQ.  In order to negotiate a new contract, an agent must not have ongoing or offered contracts over the allowed maximum amount. Currently the maximum contracts an agent can have at a time is 1.  Once a contract is negotiated, it is added to the list of contracts offered to the agent, which the agent can then accept.   The ship must be present at any waypoint with a faction present to negotiate a contract with that faction.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#x27;s symbol.</param>
        /// <returns>Task of NegotiateContract200Response</returns>
        public async System.Threading.Tasks.Task<NegotiateContract200Response> NegotiateContractAsync (string shipSymbol)
        {
             ApiResponse<NegotiateContract200Response> localVarResponse = await NegotiateContractAsyncWithHttpInfo(shipSymbol);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Negotiate Contract Negotiate a new contract with the HQ.  In order to negotiate a new contract, an agent must not have ongoing or offered contracts over the allowed maximum amount. Currently the maximum contracts an agent can have at a time is 1.  Once a contract is negotiated, it is added to the list of contracts offered to the agent, which the agent can then accept.   The ship must be present at any waypoint with a faction present to negotiate a contract with that faction.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#x27;s symbol.</param>
        /// <returns>Task of ApiResponse (NegotiateContract200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NegotiateContract200Response>> NegotiateContractAsyncWithHttpInfo (string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->NegotiateContract");

            var localVarPath = "/my/ships/{shipSymbol}/negotiate/contract";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NegotiateContract", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NegotiateContract200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NegotiateContract200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NegotiateContract200Response)));
        }

        /// <summary>
        /// Orbit Ship Attempt to move your ship into orbit at its current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.  Orbiting ships are able to do actions that require the ship to be above surface such as navigating or extracting, but cannot access elements in their current waypoint, such as the market or a shipyard.  The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>OrbitShip200Response</returns>
        public OrbitShip200Response OrbitShip (string shipSymbol)
        {
             ApiResponse<OrbitShip200Response> localVarResponse = OrbitShipWithHttpInfo(shipSymbol);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Orbit Ship Attempt to move your ship into orbit at its current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.  Orbiting ships are able to do actions that require the ship to be above surface such as navigating or extracting, but cannot access elements in their current waypoint, such as the market or a shipyard.  The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>ApiResponse of OrbitShip200Response</returns>
        public ApiResponse< OrbitShip200Response > OrbitShipWithHttpInfo (string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->OrbitShip");

            var localVarPath = "/my/ships/{shipSymbol}/orbit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrbitShip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrbitShip200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrbitShip200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrbitShip200Response)));
        }

        /// <summary>
        /// Orbit Ship Attempt to move your ship into orbit at its current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.  Orbiting ships are able to do actions that require the ship to be above surface such as navigating or extracting, but cannot access elements in their current waypoint, such as the market or a shipyard.  The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>Task of OrbitShip200Response</returns>
        public async System.Threading.Tasks.Task<OrbitShip200Response> OrbitShipAsync (string shipSymbol)
        {
             ApiResponse<OrbitShip200Response> localVarResponse = await OrbitShipAsyncWithHttpInfo(shipSymbol);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Orbit Ship Attempt to move your ship into orbit at its current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.  Orbiting ships are able to do actions that require the ship to be above surface such as navigating or extracting, but cannot access elements in their current waypoint, such as the market or a shipyard.  The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>Task of ApiResponse (OrbitShip200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrbitShip200Response>> OrbitShipAsyncWithHttpInfo (string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->OrbitShip");

            var localVarPath = "/my/ships/{shipSymbol}/orbit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrbitShip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrbitShip200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrbitShip200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrbitShip200Response)));
        }

        /// <summary>
        /// Patch Ship Nav Update the nav configuration of a ship.  Currently only supports configuring the Flight Mode of the ship, which affects its speed and fuel consumption.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InlineResponse20026</returns>
        public InlineResponse20026 PatchShipNav (string shipSymbol, ShipSymbolNavBody body = null)
        {
             ApiResponse<InlineResponse20026> localVarResponse = PatchShipNavWithHttpInfo(shipSymbol, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Patch Ship Nav Update the nav configuration of a ship.  Currently only supports configuring the Flight Mode of the ship, which affects its speed and fuel consumption.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20026</returns>
        public ApiResponse< InlineResponse20026 > PatchShipNavWithHttpInfo (string shipSymbol, ShipSymbolNavBody body = null)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->PatchShipNav");

            var localVarPath = "/my/ships/{shipSymbol}/nav";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchShipNav", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20026>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20026) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20026)));
        }

        /// <summary>
        /// Patch Ship Nav Update the nav configuration of a ship.  Currently only supports configuring the Flight Mode of the ship, which affects its speed and fuel consumption.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of InlineResponse20026</returns>
        public async System.Threading.Tasks.Task<InlineResponse20026> PatchShipNavAsync (string shipSymbol, ShipSymbolNavBody body = null)
        {
             ApiResponse<InlineResponse20026> localVarResponse = await PatchShipNavAsyncWithHttpInfo(shipSymbol, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Patch Ship Nav Update the nav configuration of a ship.  Currently only supports configuring the Flight Mode of the ship, which affects its speed and fuel consumption.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20026)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20026>> PatchShipNavAsyncWithHttpInfo (string shipSymbol, ShipSymbolNavBody body = null)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->PatchShipNav");

            var localVarPath = "/my/ships/{shipSymbol}/nav";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchShipNav", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20026>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20026) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20026)));
        }

        /// <summary>
        /// Purchase Cargo Purchase cargo from a market.  The ship must be docked in a waypoint that has &#x60;Marketplace&#x60; trait, and the market must be selling a good to be able to purchase it.  The maximum amount of units of a good that can be purchased in each transaction are denoted by the &#x60;tradeVolume&#x60; value of the good, which can be viewed by using the Get Market action.  Purchased goods are added to the ship&#x27;s cargo hold.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#x27;s symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PurchaseCargo201Response</returns>
        public PurchaseCargo201Response PurchaseCargo (string shipSymbol, PurchaseCargoRequest body = null)
        {
             ApiResponse<PurchaseCargo201Response> localVarResponse = PurchaseCargoWithHttpInfo(shipSymbol, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Purchase Cargo Purchase cargo from a market.  The ship must be docked in a waypoint that has &#x60;Marketplace&#x60; trait, and the market must be selling a good to be able to purchase it.  The maximum amount of units of a good that can be purchased in each transaction are denoted by the &#x60;tradeVolume&#x60; value of the good, which can be viewed by using the Get Market action.  Purchased goods are added to the ship&#x27;s cargo hold.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#x27;s symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PurchaseCargo201Response</returns>
        public ApiResponse< PurchaseCargo201Response > PurchaseCargoWithHttpInfo (string shipSymbol, PurchaseCargoRequest body = null)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->PurchaseCargo");

            var localVarPath = "/my/ships/{shipSymbol}/purchase";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseCargo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PurchaseCargo201Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PurchaseCargo201Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PurchaseCargo201Response)));
        }

        /// <summary>
        /// Purchase Cargo Purchase cargo from a market.  The ship must be docked in a waypoint that has &#x60;Marketplace&#x60; trait, and the market must be selling a good to be able to purchase it.  The maximum amount of units of a good that can be purchased in each transaction are denoted by the &#x60;tradeVolume&#x60; value of the good, which can be viewed by using the Get Market action.  Purchased goods are added to the ship&#x27;s cargo hold.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#x27;s symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of PurchaseCargo201Response</returns>
        public async System.Threading.Tasks.Task<PurchaseCargo201Response> PurchaseCargoAsync (string shipSymbol, PurchaseCargoRequest body = null)
        {
             ApiResponse<PurchaseCargo201Response> localVarResponse = await PurchaseCargoAsyncWithHttpInfo(shipSymbol, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Purchase Cargo Purchase cargo from a market.  The ship must be docked in a waypoint that has &#x60;Marketplace&#x60; trait, and the market must be selling a good to be able to purchase it.  The maximum amount of units of a good that can be purchased in each transaction are denoted by the &#x60;tradeVolume&#x60; value of the good, which can be viewed by using the Get Market action.  Purchased goods are added to the ship&#x27;s cargo hold.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#x27;s symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (PurchaseCargo201Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PurchaseCargo201Response>> PurchaseCargoAsyncWithHttpInfo (string shipSymbol, PurchaseCargoRequest body = null)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->PurchaseCargo");

            var localVarPath = "/my/ships/{shipSymbol}/purchase";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseCargo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PurchaseCargo201Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PurchaseCargo201Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PurchaseCargo201Response)));
        }

        /// <summary>
        /// Purchase Ship Purchase a ship from a Shipyard. In order to use this function, a ship under your agent&#x27;s ownership must be in a waypoint that has the &#x60;Shipyard&#x60; trait, and the Shipyard must sell the type of the desired ship.  Shipyards typically offer ship types, which are predefined templates of ships that have dedicated roles. A template comes with a preset of an engine, a reactor, and a frame. It may also include a few modules and mounts.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>InlineResponse2012</returns>
        public InlineResponse2012 PurchaseShip (MyShipsBody body = null)
        {
             ApiResponse<InlineResponse2012> localVarResponse = PurchaseShipWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Purchase Ship Purchase a ship from a Shipyard. In order to use this function, a ship under your agent&#x27;s ownership must be in a waypoint that has the &#x60;Shipyard&#x60; trait, and the Shipyard must sell the type of the desired ship.  Shipyards typically offer ship types, which are predefined templates of ships that have dedicated roles. A template comes with a preset of an engine, a reactor, and a frame. It may also include a few modules and mounts.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2012</returns>
        public ApiResponse< InlineResponse2012 > PurchaseShipWithHttpInfo (MyShipsBody body = null)
        {

            var localVarPath = "/my/ships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseShip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2012>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2012) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2012)));
        }

        /// <summary>
        /// Purchase Ship Purchase a ship from a Shipyard. In order to use this function, a ship under your agent&#x27;s ownership must be in a waypoint that has the &#x60;Shipyard&#x60; trait, and the Shipyard must sell the type of the desired ship.  Shipyards typically offer ship types, which are predefined templates of ships that have dedicated roles. A template comes with a preset of an engine, a reactor, and a frame. It may also include a few modules and mounts.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of InlineResponse2012</returns>
        public async System.Threading.Tasks.Task<InlineResponse2012> PurchaseShipAsync (MyShipsBody body = null)
        {
             ApiResponse<InlineResponse2012> localVarResponse = await PurchaseShipAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Purchase Ship Purchase a ship from a Shipyard. In order to use this function, a ship under your agent&#x27;s ownership must be in a waypoint that has the &#x60;Shipyard&#x60; trait, and the Shipyard must sell the type of the desired ship.  Shipyards typically offer ship types, which are predefined templates of ships that have dedicated roles. A template comes with a preset of an engine, a reactor, and a frame. It may also include a few modules and mounts.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2012)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2012>> PurchaseShipAsyncWithHttpInfo (MyShipsBody body = null)
        {

            var localVarPath = "/my/ships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseShip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2012>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2012) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2012)));
        }

        /// <summary>
        /// Refuel Ship Refuel your ship by buying fuel from the local market.  Requires the ship to be docked in a waypoint that has the &#x60;Marketplace&#x60; trait, and the market must be selling fuel in order to refuel.  Each fuel bought from the market replenishes 100 units in your ship&#x27;s fuel.  Ships will always be refuel to their frame&#x27;s maximum fuel capacity when using this action.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InlineResponse20028</returns>
        public InlineResponse20028 RefuelShip (string shipSymbol, ShipSymbolRefuelBody body = null)
        {
             ApiResponse<InlineResponse20028> localVarResponse = RefuelShipWithHttpInfo(shipSymbol, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Refuel Ship Refuel your ship by buying fuel from the local market.  Requires the ship to be docked in a waypoint that has the &#x60;Marketplace&#x60; trait, and the market must be selling fuel in order to refuel.  Each fuel bought from the market replenishes 100 units in your ship&#x27;s fuel.  Ships will always be refuel to their frame&#x27;s maximum fuel capacity when using this action.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20028</returns>
        public ApiResponse< InlineResponse20028 > RefuelShipWithHttpInfo (string shipSymbol, ShipSymbolRefuelBody body = null)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->RefuelShip");

            var localVarPath = "/my/ships/{shipSymbol}/refuel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RefuelShip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20028>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20028) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20028)));
        }

        /// <summary>
        /// Refuel Ship Refuel your ship by buying fuel from the local market.  Requires the ship to be docked in a waypoint that has the &#x60;Marketplace&#x60; trait, and the market must be selling fuel in order to refuel.  Each fuel bought from the market replenishes 100 units in your ship&#x27;s fuel.  Ships will always be refuel to their frame&#x27;s maximum fuel capacity when using this action.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of InlineResponse20028</returns>
        public async System.Threading.Tasks.Task<InlineResponse20028> RefuelShipAsync (string shipSymbol, ShipSymbolRefuelBody body = null)
        {
             ApiResponse<InlineResponse20028> localVarResponse = await RefuelShipAsyncWithHttpInfo(shipSymbol, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Refuel Ship Refuel your ship by buying fuel from the local market.  Requires the ship to be docked in a waypoint that has the &#x60;Marketplace&#x60; trait, and the market must be selling fuel in order to refuel.  Each fuel bought from the market replenishes 100 units in your ship&#x27;s fuel.  Ships will always be refuel to their frame&#x27;s maximum fuel capacity when using this action.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20028)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20028>> RefuelShipAsyncWithHttpInfo (string shipSymbol, ShipSymbolRefuelBody body = null)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->RefuelShip");

            var localVarPath = "/my/ships/{shipSymbol}/refuel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RefuelShip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20028>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20028) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20028)));
        }

        /// <summary>
        /// Remove Mount Remove a mount from a ship.  The ship must be docked in a waypoint that has the &#x60;Shipyard&#x60; trait, and must have the desired mount that it wish to remove installed.  A removal fee will be deduced from the agent by the Shipyard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#x27;s symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>RemoveMount201Response</returns>
        public RemoveMount201Response RemoveMount (string shipSymbol, RemoveMountRequest body = null)
        {
             ApiResponse<RemoveMount201Response> localVarResponse = RemoveMountWithHttpInfo(shipSymbol, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Mount Remove a mount from a ship.  The ship must be docked in a waypoint that has the &#x60;Shipyard&#x60; trait, and must have the desired mount that it wish to remove installed.  A removal fee will be deduced from the agent by the Shipyard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#x27;s symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of RemoveMount201Response</returns>
        public ApiResponse< RemoveMount201Response > RemoveMountWithHttpInfo (string shipSymbol, RemoveMountRequest body = null)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->RemoveMount");

            var localVarPath = "/my/ships/{shipSymbol}/mounts/remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveMount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveMount201Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RemoveMount201Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoveMount201Response)));
        }

        /// <summary>
        /// Remove Mount Remove a mount from a ship.  The ship must be docked in a waypoint that has the &#x60;Shipyard&#x60; trait, and must have the desired mount that it wish to remove installed.  A removal fee will be deduced from the agent by the Shipyard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#x27;s symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of RemoveMount201Response</returns>
        public async System.Threading.Tasks.Task<RemoveMount201Response> RemoveMountAsync (string shipSymbol, RemoveMountRequest body = null)
        {
             ApiResponse<RemoveMount201Response> localVarResponse = await RemoveMountAsyncWithHttpInfo(shipSymbol, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove Mount Remove a mount from a ship.  The ship must be docked in a waypoint that has the &#x60;Shipyard&#x60; trait, and must have the desired mount that it wish to remove installed.  A removal fee will be deduced from the agent by the Shipyard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#x27;s symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (RemoveMount201Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemoveMount201Response>> RemoveMountAsyncWithHttpInfo (string shipSymbol, RemoveMountRequest body = null)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->RemoveMount");

            var localVarPath = "/my/ships/{shipSymbol}/mounts/remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveMount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveMount201Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RemoveMount201Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoveMount201Response)));
        }

        /// <summary>
        /// Remove Ship Module Remove a module from a ship. The module will be placed in cargo.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship</param>
        /// <param name="body"> (optional)</param>
        /// <returns>RemoveModule201Response</returns>
        public RemoveModule201Response RemoveShipModule (string shipSymbol, ModulesRemoveBody body = null)
        {
             ApiResponse<RemoveModule201Response> localVarResponse = RemoveShipModuleWithHttpInfo(shipSymbol, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Ship Module Remove a module from a ship. The module will be placed in cargo.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of RemoveModule201Response</returns>
        public ApiResponse< RemoveModule201Response > RemoveShipModuleWithHttpInfo (string shipSymbol, ModulesRemoveBody body = null)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->RemoveShipModule");

            var localVarPath = "/my/ships/{shipSymbol}/modules/remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (AccountToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveShipModule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveModule201Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RemoveModule201Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoveModule201Response)));
        }

        /// <summary>
        /// Remove Ship Module Remove a module from a ship. The module will be placed in cargo.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of RemoveModule201Response</returns>
        public async System.Threading.Tasks.Task<RemoveModule201Response> RemoveShipModuleAsync (string shipSymbol, ModulesRemoveBody body = null)
        {
             ApiResponse<RemoveModule201Response> localVarResponse = await RemoveShipModuleAsyncWithHttpInfo(shipSymbol, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove Ship Module Remove a module from a ship. The module will be placed in cargo.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (RemoveModule201Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemoveModule201Response>> RemoveShipModuleAsyncWithHttpInfo (string shipSymbol, ModulesRemoveBody body = null)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->RemoveShipModule");

            var localVarPath = "/my/ships/{shipSymbol}/modules/remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (AccountToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveShipModule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveModule201Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RemoveModule201Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoveModule201Response)));
        }

        /// <summary>
        /// Repair Ship Repair a ship, restoring the ship to maximum condition. The ship must be docked at a waypoint that has the &#x60;Shipyard&#x60; trait in order to use this function. To preview the cost of repairing the ship, use the Get action.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>InlineResponse20032</returns>
        public InlineResponse20032 RepairShip (string shipSymbol)
        {
             ApiResponse<InlineResponse20032> localVarResponse = RepairShipWithHttpInfo(shipSymbol);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Repair Ship Repair a ship, restoring the ship to maximum condition. The ship must be docked at a waypoint that has the &#x60;Shipyard&#x60; trait in order to use this function. To preview the cost of repairing the ship, use the Get action.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>ApiResponse of InlineResponse20032</returns>
        public ApiResponse< InlineResponse20032 > RepairShipWithHttpInfo (string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->RepairShip");

            var localVarPath = "/my/ships/{shipSymbol}/repair";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepairShip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20032>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20032) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20032)));
        }

        /// <summary>
        /// Repair Ship Repair a ship, restoring the ship to maximum condition. The ship must be docked at a waypoint that has the &#x60;Shipyard&#x60; trait in order to use this function. To preview the cost of repairing the ship, use the Get action.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Task of InlineResponse20032</returns>
        public async System.Threading.Tasks.Task<InlineResponse20032> RepairShipAsync (string shipSymbol)
        {
             ApiResponse<InlineResponse20032> localVarResponse = await RepairShipAsyncWithHttpInfo(shipSymbol);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Repair Ship Repair a ship, restoring the ship to maximum condition. The ship must be docked at a waypoint that has the &#x60;Shipyard&#x60; trait in order to use this function. To preview the cost of repairing the ship, use the Get action.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Task of ApiResponse (InlineResponse20032)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20032>> RepairShipAsyncWithHttpInfo (string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->RepairShip");

            var localVarPath = "/my/ships/{shipSymbol}/repair";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepairShip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20032>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20032) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20032)));
        }

        /// <summary>
        /// Scrap Ship Scrap a ship, removing it from the game and returning a portion of the ship&#x27;s value to the agent. The ship must be docked in a waypoint that has the &#x60;Shipyard&#x60; trait in order to use this function. To preview the amount of value that will be returned, use the Get Ship action.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>InlineResponse20030</returns>
        public InlineResponse20030 ScrapShip (string shipSymbol)
        {
             ApiResponse<InlineResponse20030> localVarResponse = ScrapShipWithHttpInfo(shipSymbol);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Scrap Ship Scrap a ship, removing it from the game and returning a portion of the ship&#x27;s value to the agent. The ship must be docked in a waypoint that has the &#x60;Shipyard&#x60; trait in order to use this function. To preview the amount of value that will be returned, use the Get Ship action.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>ApiResponse of InlineResponse20030</returns>
        public ApiResponse< InlineResponse20030 > ScrapShipWithHttpInfo (string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->ScrapShip");

            var localVarPath = "/my/ships/{shipSymbol}/scrap";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ScrapShip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20030>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20030) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20030)));
        }

        /// <summary>
        /// Scrap Ship Scrap a ship, removing it from the game and returning a portion of the ship&#x27;s value to the agent. The ship must be docked in a waypoint that has the &#x60;Shipyard&#x60; trait in order to use this function. To preview the amount of value that will be returned, use the Get Ship action.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Task of InlineResponse20030</returns>
        public async System.Threading.Tasks.Task<InlineResponse20030> ScrapShipAsync (string shipSymbol)
        {
             ApiResponse<InlineResponse20030> localVarResponse = await ScrapShipAsyncWithHttpInfo(shipSymbol);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Scrap Ship Scrap a ship, removing it from the game and returning a portion of the ship&#x27;s value to the agent. The ship must be docked in a waypoint that has the &#x60;Shipyard&#x60; trait in order to use this function. To preview the amount of value that will be returned, use the Get Ship action.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Task of ApiResponse (InlineResponse20030)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20030>> ScrapShipAsyncWithHttpInfo (string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->ScrapShip");

            var localVarPath = "/my/ships/{shipSymbol}/scrap";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ScrapShip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20030>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20030) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20030)));
        }

        /// <summary>
        /// Sell Cargo Sell cargo in your ship to a market that trades this cargo. The ship must be docked in a waypoint that has the &#x60;Marketplace&#x60; trait in order to use this function.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">Symbol of a ship.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SellCargo201Response</returns>
        public SellCargo201Response SellCargo (string shipSymbol, SellCargoRequest body = null)
        {
             ApiResponse<SellCargo201Response> localVarResponse = SellCargoWithHttpInfo(shipSymbol, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sell Cargo Sell cargo in your ship to a market that trades this cargo. The ship must be docked in a waypoint that has the &#x60;Marketplace&#x60; trait in order to use this function.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">Symbol of a ship.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SellCargo201Response</returns>
        public ApiResponse< SellCargo201Response > SellCargoWithHttpInfo (string shipSymbol, SellCargoRequest body = null)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->SellCargo");

            var localVarPath = "/my/ships/{shipSymbol}/sell";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SellCargo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SellCargo201Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SellCargo201Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SellCargo201Response)));
        }

        /// <summary>
        /// Sell Cargo Sell cargo in your ship to a market that trades this cargo. The ship must be docked in a waypoint that has the &#x60;Marketplace&#x60; trait in order to use this function.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">Symbol of a ship.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of SellCargo201Response</returns>
        public async System.Threading.Tasks.Task<SellCargo201Response> SellCargoAsync (string shipSymbol, SellCargoRequest body = null)
        {
             ApiResponse<SellCargo201Response> localVarResponse = await SellCargoAsyncWithHttpInfo(shipSymbol, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sell Cargo Sell cargo in your ship to a market that trades this cargo. The ship must be docked in a waypoint that has the &#x60;Marketplace&#x60; trait in order to use this function.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">Symbol of a ship.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (SellCargo201Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SellCargo201Response>> SellCargoAsyncWithHttpInfo (string shipSymbol, SellCargoRequest body = null)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->SellCargo");

            var localVarPath = "/my/ships/{shipSymbol}/sell";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SellCargo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SellCargo201Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SellCargo201Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SellCargo201Response)));
        }

        /// <summary>
        /// Ship Refine Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request. In order to be able to refine, a ship must have goods that can be refined and have installed a &#x60;Refinery&#x60; module that can refine it.  When refining, 100 basic goods will be converted into 10 processed goods.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ShipRefine201Response</returns>
        public ShipRefine201Response ShipRefine (string shipSymbol, ShipSymbolRefineBody body = null)
        {
             ApiResponse<ShipRefine201Response> localVarResponse = ShipRefineWithHttpInfo(shipSymbol, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Ship Refine Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request. In order to be able to refine, a ship must have goods that can be refined and have installed a &#x60;Refinery&#x60; module that can refine it.  When refining, 100 basic goods will be converted into 10 processed goods.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ShipRefine201Response</returns>
        public ApiResponse< ShipRefine201Response > ShipRefineWithHttpInfo (string shipSymbol, ShipSymbolRefineBody body = null)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->ShipRefine");

            var localVarPath = "/my/ships/{shipSymbol}/refine";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShipRefine", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShipRefine201Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ShipRefine201Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShipRefine201Response)));
        }

        /// <summary>
        /// Ship Refine Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request. In order to be able to refine, a ship must have goods that can be refined and have installed a &#x60;Refinery&#x60; module that can refine it.  When refining, 100 basic goods will be converted into 10 processed goods.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ShipRefine201Response</returns>
        public async System.Threading.Tasks.Task<ShipRefine201Response> ShipRefineAsync (string shipSymbol, ShipSymbolRefineBody body = null)
        {
             ApiResponse<ShipRefine201Response> localVarResponse = await ShipRefineAsyncWithHttpInfo(shipSymbol, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Ship Refine Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request. In order to be able to refine, a ship must have goods that can be refined and have installed a &#x60;Refinery&#x60; module that can refine it.  When refining, 100 basic goods will be converted into 10 processed goods.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ShipRefine201Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ShipRefine201Response>> ShipRefineAsyncWithHttpInfo (string shipSymbol, ShipSymbolRefineBody body = null)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->ShipRefine");

            var localVarPath = "/my/ships/{shipSymbol}/refine";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShipRefine", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShipRefine201Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ShipRefine201Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShipRefine201Response)));
        }

        /// <summary>
        /// Siphon Resources Siphon gases or other resources from gas giants.  The ship must be in orbit to be able to siphon and must have siphon mounts and a gas processor installed.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>InlineResponse2016</returns>
        public InlineResponse2016 SiphonResources (string shipSymbol)
        {
             ApiResponse<InlineResponse2016> localVarResponse = SiphonResourcesWithHttpInfo(shipSymbol);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Siphon Resources Siphon gases or other resources from gas giants.  The ship must be in orbit to be able to siphon and must have siphon mounts and a gas processor installed.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>ApiResponse of InlineResponse2016</returns>
        public ApiResponse< InlineResponse2016 > SiphonResourcesWithHttpInfo (string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->SiphonResources");

            var localVarPath = "/my/ships/{shipSymbol}/siphon";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SiphonResources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2016>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2016) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2016)));
        }

        /// <summary>
        /// Siphon Resources Siphon gases or other resources from gas giants.  The ship must be in orbit to be able to siphon and must have siphon mounts and a gas processor installed.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Task of InlineResponse2016</returns>
        public async System.Threading.Tasks.Task<InlineResponse2016> SiphonResourcesAsync (string shipSymbol)
        {
             ApiResponse<InlineResponse2016> localVarResponse = await SiphonResourcesAsyncWithHttpInfo(shipSymbol);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Siphon Resources Siphon gases or other resources from gas giants.  The ship must be in orbit to be able to siphon and must have siphon mounts and a gas processor installed.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Task of ApiResponse (InlineResponse2016)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2016>> SiphonResourcesAsyncWithHttpInfo (string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->SiphonResources");

            var localVarPath = "/my/ships/{shipSymbol}/siphon";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SiphonResources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2016>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2016) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2016)));
        }

        /// <summary>
        /// Transfer Cargo Transfer cargo between ships.  The receiving ship must be in the same waypoint as the transferring ship, and it must able to hold the additional cargo after the transfer is complete. Both ships also must be in the same state, either both are docked or both are orbiting.  The response body&#x27;s cargo shows the cargo of the transferring ship after the transfer is complete.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The transferring ship&#x27;s symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TransferCargo200Response</returns>
        public TransferCargo200Response TransferCargo (string shipSymbol, TransferCargoRequest body = null)
        {
             ApiResponse<TransferCargo200Response> localVarResponse = TransferCargoWithHttpInfo(shipSymbol, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer Cargo Transfer cargo between ships.  The receiving ship must be in the same waypoint as the transferring ship, and it must able to hold the additional cargo after the transfer is complete. Both ships also must be in the same state, either both are docked or both are orbiting.  The response body&#x27;s cargo shows the cargo of the transferring ship after the transfer is complete.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The transferring ship&#x27;s symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TransferCargo200Response</returns>
        public ApiResponse< TransferCargo200Response > TransferCargoWithHttpInfo (string shipSymbol, TransferCargoRequest body = null)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->TransferCargo");

            var localVarPath = "/my/ships/{shipSymbol}/transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransferCargo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransferCargo200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransferCargo200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransferCargo200Response)));
        }

        /// <summary>
        /// Transfer Cargo Transfer cargo between ships.  The receiving ship must be in the same waypoint as the transferring ship, and it must able to hold the additional cargo after the transfer is complete. Both ships also must be in the same state, either both are docked or both are orbiting.  The response body&#x27;s cargo shows the cargo of the transferring ship after the transfer is complete.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The transferring ship&#x27;s symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of TransferCargo200Response</returns>
        public async System.Threading.Tasks.Task<TransferCargo200Response> TransferCargoAsync (string shipSymbol, TransferCargoRequest body = null)
        {
             ApiResponse<TransferCargo200Response> localVarResponse = await TransferCargoAsyncWithHttpInfo(shipSymbol, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Transfer Cargo Transfer cargo between ships.  The receiving ship must be in the same waypoint as the transferring ship, and it must able to hold the additional cargo after the transfer is complete. Both ships also must be in the same state, either both are docked or both are orbiting.  The response body&#x27;s cargo shows the cargo of the transferring ship after the transfer is complete.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The transferring ship&#x27;s symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (TransferCargo200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransferCargo200Response>> TransferCargoAsyncWithHttpInfo (string shipSymbol, TransferCargoRequest body = null)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->TransferCargo");

            var localVarPath = "/my/ships/{shipSymbol}/transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransferCargo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransferCargo200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransferCargo200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransferCargo200Response)));
        }

        /// <summary>
        /// Warp Ship Warp your ship to a target destination in another system. The ship must be in orbit to use this function and must have the &#x60;Warp Drive&#x60; module installed. Warping will consume the necessary fuel from the ship&#x27;s manifest.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at its destination.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InlineResponse20027</returns>
        public InlineResponse20027 WarpShip (string shipSymbol, ShipSymbolWarpBody body = null)
        {
             ApiResponse<InlineResponse20027> localVarResponse = WarpShipWithHttpInfo(shipSymbol, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Warp Ship Warp your ship to a target destination in another system. The ship must be in orbit to use this function and must have the &#x60;Warp Drive&#x60; module installed. Warping will consume the necessary fuel from the ship&#x27;s manifest.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at its destination.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20027</returns>
        public ApiResponse< InlineResponse20027 > WarpShipWithHttpInfo (string shipSymbol, ShipSymbolWarpBody body = null)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->WarpShip");

            var localVarPath = "/my/ships/{shipSymbol}/warp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WarpShip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20027>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20027) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20027)));
        }

        /// <summary>
        /// Warp Ship Warp your ship to a target destination in another system. The ship must be in orbit to use this function and must have the &#x60;Warp Drive&#x60; module installed. Warping will consume the necessary fuel from the ship&#x27;s manifest.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at its destination.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of InlineResponse20027</returns>
        public async System.Threading.Tasks.Task<InlineResponse20027> WarpShipAsync (string shipSymbol, ShipSymbolWarpBody body = null)
        {
             ApiResponse<InlineResponse20027> localVarResponse = await WarpShipAsyncWithHttpInfo(shipSymbol, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Warp Ship Warp your ship to a target destination in another system. The ship must be in orbit to use this function and must have the &#x60;Warp Drive&#x60; module installed. Warping will consume the necessary fuel from the ship&#x27;s manifest.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at its destination.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20027)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20027>> WarpShipAsyncWithHttpInfo (string shipSymbol, ShipSymbolWarpBody body = null)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->WarpShip");

            var localVarPath = "/my/ships/{shipSymbol}/warp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipSymbol != null) localVarPathParams.Add("shipSymbol", this.Configuration.ApiClient.ParameterToString(shipSymbol)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WarpShip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20027>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20027) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20027)));
        }

    }
}
