/* 
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * OpenAPI spec version: 2.3.0
 * Contact: joel@spacetraders.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ISystemsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Construction Site
        /// </summary>
        /// <remarks>
        /// Get construction details for a waypoint. Requires a waypoint with a property of &#x60;isUnderConstruction&#x60; to be true.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>InlineResponse2008</returns>
        InlineResponse2008 GetConstruction (string systemSymbol, string waypointSymbol);

        /// <summary>
        /// Get Construction Site
        /// </summary>
        /// <remarks>
        /// Get construction details for a waypoint. Requires a waypoint with a property of &#x60;isUnderConstruction&#x60; to be true.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        ApiResponse<InlineResponse2008> GetConstructionWithHttpInfo (string systemSymbol, string waypointSymbol);
        /// <summary>
        /// Get Jump Gate
        /// </summary>
        /// <remarks>
        /// Get jump gate details for a waypoint. Requires a waypoint of type &#x60;JUMP_GATE&#x60; to use.  Waypoints connected to this jump gate can be 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>InlineResponse2007</returns>
        InlineResponse2007 GetJumpGate (string systemSymbol, string waypointSymbol);

        /// <summary>
        /// Get Jump Gate
        /// </summary>
        /// <remarks>
        /// Get jump gate details for a waypoint. Requires a waypoint of type &#x60;JUMP_GATE&#x60; to use.  Waypoints connected to this jump gate can be 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        ApiResponse<InlineResponse2007> GetJumpGateWithHttpInfo (string systemSymbol, string waypointSymbol);
        /// <summary>
        /// Get Market
        /// </summary>
        /// <remarks>
        /// Retrieve imports, exports and exchange data from a marketplace. Requires a waypoint that has the &#x60;Marketplace&#x60; trait to use.  Send a ship to the waypoint to access trade good prices and recent transactions. Refer to the [Market Overview page](https://docs.spacetraders.io/game-concepts/markets) to gain better a understanding of the market in the game.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>InlineResponse2005</returns>
        InlineResponse2005 GetMarket (string systemSymbol, string waypointSymbol);

        /// <summary>
        /// Get Market
        /// </summary>
        /// <remarks>
        /// Retrieve imports, exports and exchange data from a marketplace. Requires a waypoint that has the &#x60;Marketplace&#x60; trait to use.  Send a ship to the waypoint to access trade good prices and recent transactions. Refer to the [Market Overview page](https://docs.spacetraders.io/game-concepts/markets) to gain better a understanding of the market in the game.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        ApiResponse<InlineResponse2005> GetMarketWithHttpInfo (string systemSymbol, string waypointSymbol);
        /// <summary>
        /// Get Shipyard
        /// </summary>
        /// <remarks>
        /// Get the shipyard for a waypoint. Requires a waypoint that has the &#x60;Shipyard&#x60; trait to use. Send a ship to the waypoint to access data on ships that are currently available for purchase and recent transactions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 GetShipyard (string systemSymbol, string waypointSymbol);

        /// <summary>
        /// Get Shipyard
        /// </summary>
        /// <remarks>
        /// Get the shipyard for a waypoint. Requires a waypoint that has the &#x60;Shipyard&#x60; trait to use. Send a ship to the waypoint to access data on ships that are currently available for purchase and recent transactions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> GetShipyardWithHttpInfo (string systemSymbol, string waypointSymbol);
        /// <summary>
        /// Get System
        /// </summary>
        /// <remarks>
        /// Get the details of a system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 GetSystem (string systemSymbol);

        /// <summary>
        /// Get System
        /// </summary>
        /// <remarks>
        /// Get the details of a system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> GetSystemWithHttpInfo (string systemSymbol);
        /// <summary>
        /// List Waypoints in System
        /// </summary>
        /// <remarks>
        /// Return a paginated list of all of the waypoints for a given system.  If a waypoint is uncharted, it will return the &#x60;Uncharted&#x60; trait instead of its actual traits.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <param name="type">Filter waypoints by type. (optional)</param>
        /// <param name="traits">Filter waypoints by one or more traits. (optional)</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 GetSystemWaypoints (string systemSymbol, int? page = null, int? limit = null, WaypointType type = WaypointType.NULL, Traits traits = null);

        /// <summary>
        /// List Waypoints in System
        /// </summary>
        /// <remarks>
        /// Return a paginated list of all of the waypoints for a given system.  If a waypoint is uncharted, it will return the &#x60;Uncharted&#x60; trait instead of its actual traits.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <param name="type">Filter waypoints by type. (optional)</param>
        /// <param name="traits">Filter waypoints by one or more traits. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> GetSystemWaypointsWithHttpInfo (string systemSymbol, int? page = null, int? limit = null, WaypointType type = WaypointType.NULL, Traits traits = null);
        /// <summary>
        /// List Systems
        /// </summary>
        /// <remarks>
        /// Return a paginated list of all systems.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 GetSystems (int? page = null, int? limit = null);

        /// <summary>
        /// List Systems
        /// </summary>
        /// <remarks>
        /// Return a paginated list of all systems.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> GetSystemsWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get Waypoint
        /// </summary>
        /// <remarks>
        /// View the details of a waypoint.  If the waypoint is uncharted, it will return the &#x27;Uncharted&#x27; trait instead of its actual traits.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 GetWaypoint (string systemSymbol, string waypointSymbol);

        /// <summary>
        /// Get Waypoint
        /// </summary>
        /// <remarks>
        /// View the details of a waypoint.  If the waypoint is uncharted, it will return the &#x27;Uncharted&#x27; trait instead of its actual traits.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> GetWaypointWithHttpInfo (string systemSymbol, string waypointSymbol);
        /// <summary>
        /// Supply Construction Site
        /// </summary>
        /// <remarks>
        /// Supply a construction site with the specified good. Requires a waypoint with a property of &#x60;isUnderConstruction&#x60; to be true.  The good must be in your ship&#x27;s cargo. The good will be removed from your ship&#x27;s cargo and added to the construction site&#x27;s materials.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InlineResponse2011</returns>
        InlineResponse2011 SupplyConstruction (string systemSymbol, string waypointSymbol, ConstructionSupplyBody body = null);

        /// <summary>
        /// Supply Construction Site
        /// </summary>
        /// <remarks>
        /// Supply a construction site with the specified good. Requires a waypoint with a property of &#x60;isUnderConstruction&#x60; to be true.  The good must be in your ship&#x27;s cargo. The good will be removed from your ship&#x27;s cargo and added to the construction site&#x27;s materials.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2011</returns>
        ApiResponse<InlineResponse2011> SupplyConstructionWithHttpInfo (string systemSymbol, string waypointSymbol, ConstructionSupplyBody body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Construction Site
        /// </summary>
        /// <remarks>
        /// Get construction details for a waypoint. Requires a waypoint with a property of &#x60;isUnderConstruction&#x60; to be true.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>Task of InlineResponse2008</returns>
        System.Threading.Tasks.Task<InlineResponse2008> GetConstructionAsync (string systemSymbol, string waypointSymbol);

        /// <summary>
        /// Get Construction Site
        /// </summary>
        /// <remarks>
        /// Get construction details for a waypoint. Requires a waypoint with a property of &#x60;isUnderConstruction&#x60; to be true.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> GetConstructionAsyncWithHttpInfo (string systemSymbol, string waypointSymbol);
        /// <summary>
        /// Get Jump Gate
        /// </summary>
        /// <remarks>
        /// Get jump gate details for a waypoint. Requires a waypoint of type &#x60;JUMP_GATE&#x60; to use.  Waypoints connected to this jump gate can be 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>Task of InlineResponse2007</returns>
        System.Threading.Tasks.Task<InlineResponse2007> GetJumpGateAsync (string systemSymbol, string waypointSymbol);

        /// <summary>
        /// Get Jump Gate
        /// </summary>
        /// <remarks>
        /// Get jump gate details for a waypoint. Requires a waypoint of type &#x60;JUMP_GATE&#x60; to use.  Waypoints connected to this jump gate can be 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> GetJumpGateAsyncWithHttpInfo (string systemSymbol, string waypointSymbol);
        /// <summary>
        /// Get Market
        /// </summary>
        /// <remarks>
        /// Retrieve imports, exports and exchange data from a marketplace. Requires a waypoint that has the &#x60;Marketplace&#x60; trait to use.  Send a ship to the waypoint to access trade good prices and recent transactions. Refer to the [Market Overview page](https://docs.spacetraders.io/game-concepts/markets) to gain better a understanding of the market in the game.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>Task of InlineResponse2005</returns>
        System.Threading.Tasks.Task<InlineResponse2005> GetMarketAsync (string systemSymbol, string waypointSymbol);

        /// <summary>
        /// Get Market
        /// </summary>
        /// <remarks>
        /// Retrieve imports, exports and exchange data from a marketplace. Requires a waypoint that has the &#x60;Marketplace&#x60; trait to use.  Send a ship to the waypoint to access trade good prices and recent transactions. Refer to the [Market Overview page](https://docs.spacetraders.io/game-concepts/markets) to gain better a understanding of the market in the game.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> GetMarketAsyncWithHttpInfo (string systemSymbol, string waypointSymbol);
        /// <summary>
        /// Get Shipyard
        /// </summary>
        /// <remarks>
        /// Get the shipyard for a waypoint. Requires a waypoint that has the &#x60;Shipyard&#x60; trait to use. Send a ship to the waypoint to access data on ships that are currently available for purchase and recent transactions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> GetShipyardAsync (string systemSymbol, string waypointSymbol);

        /// <summary>
        /// Get Shipyard
        /// </summary>
        /// <remarks>
        /// Get the shipyard for a waypoint. Requires a waypoint that has the &#x60;Shipyard&#x60; trait to use. Send a ship to the waypoint to access data on ships that are currently available for purchase and recent transactions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> GetShipyardAsyncWithHttpInfo (string systemSymbol, string waypointSymbol);
        /// <summary>
        /// Get System
        /// </summary>
        /// <remarks>
        /// Get the details of a system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> GetSystemAsync (string systemSymbol);

        /// <summary>
        /// Get System
        /// </summary>
        /// <remarks>
        /// Get the details of a system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> GetSystemAsyncWithHttpInfo (string systemSymbol);
        /// <summary>
        /// List Waypoints in System
        /// </summary>
        /// <remarks>
        /// Return a paginated list of all of the waypoints for a given system.  If a waypoint is uncharted, it will return the &#x60;Uncharted&#x60; trait instead of its actual traits.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <param name="type">Filter waypoints by type. (optional)</param>
        /// <param name="traits">Filter waypoints by one or more traits. (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> GetSystemWaypointsAsync (string systemSymbol, int? page = null, int? limit = null, WaypointType type = WaypointType.NULL, Traits traits = null);

        /// <summary>
        /// List Waypoints in System
        /// </summary>
        /// <remarks>
        /// Return a paginated list of all of the waypoints for a given system.  If a waypoint is uncharted, it will return the &#x60;Uncharted&#x60; trait instead of its actual traits.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <param name="type">Filter waypoints by type. (optional)</param>
        /// <param name="traits">Filter waypoints by one or more traits. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> GetSystemWaypointsAsyncWithHttpInfo (string systemSymbol, int? page = null, int? limit = null, WaypointType type = WaypointType.NULL, Traits traits = null);
        /// <summary>
        /// List Systems
        /// </summary>
        /// <remarks>
        /// Return a paginated list of all systems.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> GetSystemsAsync (int? page = null, int? limit = null);

        /// <summary>
        /// List Systems
        /// </summary>
        /// <remarks>
        /// Return a paginated list of all systems.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetSystemsAsyncWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get Waypoint
        /// </summary>
        /// <remarks>
        /// View the details of a waypoint.  If the waypoint is uncharted, it will return the &#x27;Uncharted&#x27; trait instead of its actual traits.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> GetWaypointAsync (string systemSymbol, string waypointSymbol);

        /// <summary>
        /// Get Waypoint
        /// </summary>
        /// <remarks>
        /// View the details of a waypoint.  If the waypoint is uncharted, it will return the &#x27;Uncharted&#x27; trait instead of its actual traits.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> GetWaypointAsyncWithHttpInfo (string systemSymbol, string waypointSymbol);
        /// <summary>
        /// Supply Construction Site
        /// </summary>
        /// <remarks>
        /// Supply a construction site with the specified good. Requires a waypoint with a property of &#x60;isUnderConstruction&#x60; to be true.  The good must be in your ship&#x27;s cargo. The good will be removed from your ship&#x27;s cargo and added to the construction site&#x27;s materials.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of InlineResponse2011</returns>
        System.Threading.Tasks.Task<InlineResponse2011> SupplyConstructionAsync (string systemSymbol, string waypointSymbol, ConstructionSupplyBody body = null);

        /// <summary>
        /// Supply Construction Site
        /// </summary>
        /// <remarks>
        /// Supply a construction site with the specified good. Requires a waypoint with a property of &#x60;isUnderConstruction&#x60; to be true.  The good must be in your ship&#x27;s cargo. The good will be removed from your ship&#x27;s cargo and added to the construction site&#x27;s materials.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2011)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2011>> SupplyConstructionAsyncWithHttpInfo (string systemSymbol, string waypointSymbol, ConstructionSupplyBody body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class SystemsApi : ISystemsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SystemsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SystemsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SystemsApi"/> class
        /// </summary>
        /// <returns></returns>
        public SystemsApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SystemsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SystemsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.Options.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Construction Site Get construction details for a waypoint. Requires a waypoint with a property of &#x60;isUnderConstruction&#x60; to be true.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>InlineResponse2008</returns>
        public InlineResponse2008 GetConstruction (string systemSymbol, string waypointSymbol)
        {
             ApiResponse<InlineResponse2008> localVarResponse = GetConstructionWithHttpInfo(systemSymbol, waypointSymbol);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Construction Site Get construction details for a waypoint. Requires a waypoint with a property of &#x60;isUnderConstruction&#x60; to be true.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        public ApiResponse< InlineResponse2008 > GetConstructionWithHttpInfo (string systemSymbol, string waypointSymbol)
        {
            // verify the required parameter 'systemSymbol' is set
            if (systemSymbol == null)
                throw new ApiException(400, "Missing required parameter 'systemSymbol' when calling SystemsApi->GetConstruction");
            // verify the required parameter 'waypointSymbol' is set
            if (waypointSymbol == null)
                throw new ApiException(400, "Missing required parameter 'waypointSymbol' when calling SystemsApi->GetConstruction");

            var localVarPath = "/systems/{systemSymbol}/waypoints/{waypointSymbol}/construction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (systemSymbol != null) localVarPathParams.Add("systemSymbol", this.Configuration.ApiClient.ParameterToString(systemSymbol)); // path parameter
            if (waypointSymbol != null) localVarPathParams.Add("waypointSymbol", this.Configuration.ApiClient.ParameterToString(waypointSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConstruction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2008>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2008) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2008)));
        }

        /// <summary>
        /// Get Construction Site Get construction details for a waypoint. Requires a waypoint with a property of &#x60;isUnderConstruction&#x60; to be true.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>Task of InlineResponse2008</returns>
        public async System.Threading.Tasks.Task<InlineResponse2008> GetConstructionAsync (string systemSymbol, string waypointSymbol)
        {
             ApiResponse<InlineResponse2008> localVarResponse = await GetConstructionAsyncWithHttpInfo(systemSymbol, waypointSymbol);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Construction Site Get construction details for a waypoint. Requires a waypoint with a property of &#x60;isUnderConstruction&#x60; to be true.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> GetConstructionAsyncWithHttpInfo (string systemSymbol, string waypointSymbol)
        {
            // verify the required parameter 'systemSymbol' is set
            if (systemSymbol == null)
                throw new ApiException(400, "Missing required parameter 'systemSymbol' when calling SystemsApi->GetConstruction");
            // verify the required parameter 'waypointSymbol' is set
            if (waypointSymbol == null)
                throw new ApiException(400, "Missing required parameter 'waypointSymbol' when calling SystemsApi->GetConstruction");

            var localVarPath = "/systems/{systemSymbol}/waypoints/{waypointSymbol}/construction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (systemSymbol != null) localVarPathParams.Add("systemSymbol", this.Configuration.ApiClient.ParameterToString(systemSymbol)); // path parameter
            if (waypointSymbol != null) localVarPathParams.Add("waypointSymbol", this.Configuration.ApiClient.ParameterToString(waypointSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConstruction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2008>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2008) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2008)));
        }

        /// <summary>
        /// Get Jump Gate Get jump gate details for a waypoint. Requires a waypoint of type &#x60;JUMP_GATE&#x60; to use.  Waypoints connected to this jump gate can be 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>InlineResponse2007</returns>
        public InlineResponse2007 GetJumpGate (string systemSymbol, string waypointSymbol)
        {
             ApiResponse<InlineResponse2007> localVarResponse = GetJumpGateWithHttpInfo(systemSymbol, waypointSymbol);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Jump Gate Get jump gate details for a waypoint. Requires a waypoint of type &#x60;JUMP_GATE&#x60; to use.  Waypoints connected to this jump gate can be 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        public ApiResponse< InlineResponse2007 > GetJumpGateWithHttpInfo (string systemSymbol, string waypointSymbol)
        {
            // verify the required parameter 'systemSymbol' is set
            if (systemSymbol == null)
                throw new ApiException(400, "Missing required parameter 'systemSymbol' when calling SystemsApi->GetJumpGate");
            // verify the required parameter 'waypointSymbol' is set
            if (waypointSymbol == null)
                throw new ApiException(400, "Missing required parameter 'waypointSymbol' when calling SystemsApi->GetJumpGate");

            var localVarPath = "/systems/{systemSymbol}/waypoints/{waypointSymbol}/jump-gate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (systemSymbol != null) localVarPathParams.Add("systemSymbol", this.Configuration.ApiClient.ParameterToString(systemSymbol)); // path parameter
            if (waypointSymbol != null) localVarPathParams.Add("waypointSymbol", this.Configuration.ApiClient.ParameterToString(waypointSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJumpGate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2007>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2007) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2007)));
        }

        /// <summary>
        /// Get Jump Gate Get jump gate details for a waypoint. Requires a waypoint of type &#x60;JUMP_GATE&#x60; to use.  Waypoints connected to this jump gate can be 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>Task of InlineResponse2007</returns>
        public async System.Threading.Tasks.Task<InlineResponse2007> GetJumpGateAsync (string systemSymbol, string waypointSymbol)
        {
             ApiResponse<InlineResponse2007> localVarResponse = await GetJumpGateAsyncWithHttpInfo(systemSymbol, waypointSymbol);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Jump Gate Get jump gate details for a waypoint. Requires a waypoint of type &#x60;JUMP_GATE&#x60; to use.  Waypoints connected to this jump gate can be 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> GetJumpGateAsyncWithHttpInfo (string systemSymbol, string waypointSymbol)
        {
            // verify the required parameter 'systemSymbol' is set
            if (systemSymbol == null)
                throw new ApiException(400, "Missing required parameter 'systemSymbol' when calling SystemsApi->GetJumpGate");
            // verify the required parameter 'waypointSymbol' is set
            if (waypointSymbol == null)
                throw new ApiException(400, "Missing required parameter 'waypointSymbol' when calling SystemsApi->GetJumpGate");

            var localVarPath = "/systems/{systemSymbol}/waypoints/{waypointSymbol}/jump-gate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (systemSymbol != null) localVarPathParams.Add("systemSymbol", this.Configuration.ApiClient.ParameterToString(systemSymbol)); // path parameter
            if (waypointSymbol != null) localVarPathParams.Add("waypointSymbol", this.Configuration.ApiClient.ParameterToString(waypointSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJumpGate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2007>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2007) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2007)));
        }

        /// <summary>
        /// Get Market Retrieve imports, exports and exchange data from a marketplace. Requires a waypoint that has the &#x60;Marketplace&#x60; trait to use.  Send a ship to the waypoint to access trade good prices and recent transactions. Refer to the [Market Overview page](https://docs.spacetraders.io/game-concepts/markets) to gain better a understanding of the market in the game.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>InlineResponse2005</returns>
        public InlineResponse2005 GetMarket (string systemSymbol, string waypointSymbol)
        {
             ApiResponse<InlineResponse2005> localVarResponse = GetMarketWithHttpInfo(systemSymbol, waypointSymbol);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Market Retrieve imports, exports and exchange data from a marketplace. Requires a waypoint that has the &#x60;Marketplace&#x60; trait to use.  Send a ship to the waypoint to access trade good prices and recent transactions. Refer to the [Market Overview page](https://docs.spacetraders.io/game-concepts/markets) to gain better a understanding of the market in the game.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        public ApiResponse< InlineResponse2005 > GetMarketWithHttpInfo (string systemSymbol, string waypointSymbol)
        {
            // verify the required parameter 'systemSymbol' is set
            if (systemSymbol == null)
                throw new ApiException(400, "Missing required parameter 'systemSymbol' when calling SystemsApi->GetMarket");
            // verify the required parameter 'waypointSymbol' is set
            if (waypointSymbol == null)
                throw new ApiException(400, "Missing required parameter 'waypointSymbol' when calling SystemsApi->GetMarket");

            var localVarPath = "/systems/{systemSymbol}/waypoints/{waypointSymbol}/market";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (systemSymbol != null) localVarPathParams.Add("systemSymbol", this.Configuration.ApiClient.ParameterToString(systemSymbol)); // path parameter
            if (waypointSymbol != null) localVarPathParams.Add("waypointSymbol", this.Configuration.ApiClient.ParameterToString(waypointSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMarket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2005>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2005) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2005)));
        }

        /// <summary>
        /// Get Market Retrieve imports, exports and exchange data from a marketplace. Requires a waypoint that has the &#x60;Marketplace&#x60; trait to use.  Send a ship to the waypoint to access trade good prices and recent transactions. Refer to the [Market Overview page](https://docs.spacetraders.io/game-concepts/markets) to gain better a understanding of the market in the game.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>Task of InlineResponse2005</returns>
        public async System.Threading.Tasks.Task<InlineResponse2005> GetMarketAsync (string systemSymbol, string waypointSymbol)
        {
             ApiResponse<InlineResponse2005> localVarResponse = await GetMarketAsyncWithHttpInfo(systemSymbol, waypointSymbol);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Market Retrieve imports, exports and exchange data from a marketplace. Requires a waypoint that has the &#x60;Marketplace&#x60; trait to use.  Send a ship to the waypoint to access trade good prices and recent transactions. Refer to the [Market Overview page](https://docs.spacetraders.io/game-concepts/markets) to gain better a understanding of the market in the game.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> GetMarketAsyncWithHttpInfo (string systemSymbol, string waypointSymbol)
        {
            // verify the required parameter 'systemSymbol' is set
            if (systemSymbol == null)
                throw new ApiException(400, "Missing required parameter 'systemSymbol' when calling SystemsApi->GetMarket");
            // verify the required parameter 'waypointSymbol' is set
            if (waypointSymbol == null)
                throw new ApiException(400, "Missing required parameter 'waypointSymbol' when calling SystemsApi->GetMarket");

            var localVarPath = "/systems/{systemSymbol}/waypoints/{waypointSymbol}/market";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (systemSymbol != null) localVarPathParams.Add("systemSymbol", this.Configuration.ApiClient.ParameterToString(systemSymbol)); // path parameter
            if (waypointSymbol != null) localVarPathParams.Add("waypointSymbol", this.Configuration.ApiClient.ParameterToString(waypointSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMarket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2005>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2005) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2005)));
        }

        /// <summary>
        /// Get Shipyard Get the shipyard for a waypoint. Requires a waypoint that has the &#x60;Shipyard&#x60; trait to use. Send a ship to the waypoint to access data on ships that are currently available for purchase and recent transactions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 GetShipyard (string systemSymbol, string waypointSymbol)
        {
             ApiResponse<InlineResponse2006> localVarResponse = GetShipyardWithHttpInfo(systemSymbol, waypointSymbol);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Shipyard Get the shipyard for a waypoint. Requires a waypoint that has the &#x60;Shipyard&#x60; trait to use. Send a ship to the waypoint to access data on ships that are currently available for purchase and recent transactions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public ApiResponse< InlineResponse2006 > GetShipyardWithHttpInfo (string systemSymbol, string waypointSymbol)
        {
            // verify the required parameter 'systemSymbol' is set
            if (systemSymbol == null)
                throw new ApiException(400, "Missing required parameter 'systemSymbol' when calling SystemsApi->GetShipyard");
            // verify the required parameter 'waypointSymbol' is set
            if (waypointSymbol == null)
                throw new ApiException(400, "Missing required parameter 'waypointSymbol' when calling SystemsApi->GetShipyard");

            var localVarPath = "/systems/{systemSymbol}/waypoints/{waypointSymbol}/shipyard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (systemSymbol != null) localVarPathParams.Add("systemSymbol", this.Configuration.ApiClient.ParameterToString(systemSymbol)); // path parameter
            if (waypointSymbol != null) localVarPathParams.Add("waypointSymbol", this.Configuration.ApiClient.ParameterToString(waypointSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShipyard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2006) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        /// Get Shipyard Get the shipyard for a waypoint. Requires a waypoint that has the &#x60;Shipyard&#x60; trait to use. Send a ship to the waypoint to access data on ships that are currently available for purchase and recent transactions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006> GetShipyardAsync (string systemSymbol, string waypointSymbol)
        {
             ApiResponse<InlineResponse2006> localVarResponse = await GetShipyardAsyncWithHttpInfo(systemSymbol, waypointSymbol);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Shipyard Get the shipyard for a waypoint. Requires a waypoint that has the &#x60;Shipyard&#x60; trait to use. Send a ship to the waypoint to access data on ships that are currently available for purchase and recent transactions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> GetShipyardAsyncWithHttpInfo (string systemSymbol, string waypointSymbol)
        {
            // verify the required parameter 'systemSymbol' is set
            if (systemSymbol == null)
                throw new ApiException(400, "Missing required parameter 'systemSymbol' when calling SystemsApi->GetShipyard");
            // verify the required parameter 'waypointSymbol' is set
            if (waypointSymbol == null)
                throw new ApiException(400, "Missing required parameter 'waypointSymbol' when calling SystemsApi->GetShipyard");

            var localVarPath = "/systems/{systemSymbol}/waypoints/{waypointSymbol}/shipyard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (systemSymbol != null) localVarPathParams.Add("systemSymbol", this.Configuration.ApiClient.ParameterToString(systemSymbol)); // path parameter
            if (waypointSymbol != null) localVarPathParams.Add("waypointSymbol", this.Configuration.ApiClient.ParameterToString(waypointSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShipyard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2006) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        /// Get System Get the details of a system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 GetSystem (string systemSymbol)
        {
             ApiResponse<InlineResponse2002> localVarResponse = GetSystemWithHttpInfo(systemSymbol);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get System Get the details of a system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse< InlineResponse2002 > GetSystemWithHttpInfo (string systemSymbol)
        {
            // verify the required parameter 'systemSymbol' is set
            if (systemSymbol == null)
                throw new ApiException(400, "Missing required parameter 'systemSymbol' when calling SystemsApi->GetSystem");

            var localVarPath = "/systems/{systemSymbol}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (systemSymbol != null) localVarPathParams.Add("systemSymbol", this.Configuration.ApiClient.ParameterToString(systemSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2002) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

        /// <summary>
        /// Get System Get the details of a system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> GetSystemAsync (string systemSymbol)
        {
             ApiResponse<InlineResponse2002> localVarResponse = await GetSystemAsyncWithHttpInfo(systemSymbol);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get System Get the details of a system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> GetSystemAsyncWithHttpInfo (string systemSymbol)
        {
            // verify the required parameter 'systemSymbol' is set
            if (systemSymbol == null)
                throw new ApiException(400, "Missing required parameter 'systemSymbol' when calling SystemsApi->GetSystem");

            var localVarPath = "/systems/{systemSymbol}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (systemSymbol != null) localVarPathParams.Add("systemSymbol", this.Configuration.ApiClient.ParameterToString(systemSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2002) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

        /// <summary>
        /// List Waypoints in System Return a paginated list of all of the waypoints for a given system.  If a waypoint is uncharted, it will return the &#x60;Uncharted&#x60; trait instead of its actual traits.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <param name="type">Filter waypoints by type. (optional)</param>
        /// <param name="traits">Filter waypoints by one or more traits. (optional)</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 GetSystemWaypoints (string systemSymbol, int? page = null, int? limit = null, WaypointType type = WaypointType.NULL, Traits traits = null)
        {
             ApiResponse<InlineResponse2003> localVarResponse = GetSystemWaypointsWithHttpInfo(systemSymbol, page, limit, type, traits);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Waypoints in System Return a paginated list of all of the waypoints for a given system.  If a waypoint is uncharted, it will return the &#x60;Uncharted&#x60; trait instead of its actual traits.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <param name="type">Filter waypoints by type. (optional)</param>
        /// <param name="traits">Filter waypoints by one or more traits. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse< InlineResponse2003 > GetSystemWaypointsWithHttpInfo (string systemSymbol, int? page = null, int? limit = null, WaypointType type = WaypointType.NULL, Traits traits = null)
        {
            // verify the required parameter 'systemSymbol' is set
            if (systemSymbol == null)
                throw new ApiException(400, "Missing required parameter 'systemSymbol' when calling SystemsApi->GetSystemWaypoints");

            var localVarPath = "/systems/{systemSymbol}/waypoints";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (systemSymbol != null) localVarPathParams.Add("systemSymbol", this.Configuration.ApiClient.ParameterToString(systemSymbol)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (type != WaypointType.NULL) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (traits != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "traits", traits)); // query parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSystemWaypoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2003) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        /// List Waypoints in System Return a paginated list of all of the waypoints for a given system.  If a waypoint is uncharted, it will return the &#x60;Uncharted&#x60; trait instead of its actual traits.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <param name="type">Filter waypoints by type. (optional)</param>
        /// <param name="traits">Filter waypoints by one or more traits. (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> GetSystemWaypointsAsync (string systemSymbol, int? page = null, int? limit = null, WaypointType type = WaypointType.NULL, Traits traits = null)
        {
             ApiResponse<InlineResponse2003> localVarResponse = await GetSystemWaypointsAsyncWithHttpInfo(systemSymbol, page, limit, type, traits);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Waypoints in System Return a paginated list of all of the waypoints for a given system.  If a waypoint is uncharted, it will return the &#x60;Uncharted&#x60; trait instead of its actual traits.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <param name="type">Filter waypoints by type. (optional)</param>
        /// <param name="traits">Filter waypoints by one or more traits. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> GetSystemWaypointsAsyncWithHttpInfo (string systemSymbol, int? page = null, int? limit = null, WaypointType type = WaypointType.NULL, Traits traits = null)
        {
            // verify the required parameter 'systemSymbol' is set
            if (systemSymbol == null)
                throw new ApiException(400, "Missing required parameter 'systemSymbol' when calling SystemsApi->GetSystemWaypoints");

            var localVarPath = "/systems/{systemSymbol}/waypoints";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (systemSymbol != null) localVarPathParams.Add("systemSymbol", this.Configuration.ApiClient.ParameterToString(systemSymbol)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (type != WaypointType.NULL) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (traits != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "traits", traits)); // query parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSystemWaypoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2003) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        /// List Systems Return a paginated list of all systems.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 GetSystems (int? page = null, int? limit = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = GetSystemsWithHttpInfo(page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Systems Return a paginated list of all systems.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > GetSystemsWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/systems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSystems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2001) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// List Systems Return a paginated list of all systems.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> GetSystemsAsync (int? page = null, int? limit = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await GetSystemsAsyncWithHttpInfo(page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Systems Return a paginated list of all systems.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetSystemsAsyncWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/systems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSystems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2001) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Get Waypoint View the details of a waypoint.  If the waypoint is uncharted, it will return the &#x27;Uncharted&#x27; trait instead of its actual traits.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 GetWaypoint (string systemSymbol, string waypointSymbol)
        {
             ApiResponse<InlineResponse2004> localVarResponse = GetWaypointWithHttpInfo(systemSymbol, waypointSymbol);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Waypoint View the details of a waypoint.  If the waypoint is uncharted, it will return the &#x27;Uncharted&#x27; trait instead of its actual traits.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public ApiResponse< InlineResponse2004 > GetWaypointWithHttpInfo (string systemSymbol, string waypointSymbol)
        {
            // verify the required parameter 'systemSymbol' is set
            if (systemSymbol == null)
                throw new ApiException(400, "Missing required parameter 'systemSymbol' when calling SystemsApi->GetWaypoint");
            // verify the required parameter 'waypointSymbol' is set
            if (waypointSymbol == null)
                throw new ApiException(400, "Missing required parameter 'waypointSymbol' when calling SystemsApi->GetWaypoint");

            var localVarPath = "/systems/{systemSymbol}/waypoints/{waypointSymbol}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (systemSymbol != null) localVarPathParams.Add("systemSymbol", this.Configuration.ApiClient.ParameterToString(systemSymbol)); // path parameter
            if (waypointSymbol != null) localVarPathParams.Add("waypointSymbol", this.Configuration.ApiClient.ParameterToString(waypointSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWaypoint", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2004) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
        }

        /// <summary>
        /// Get Waypoint View the details of a waypoint.  If the waypoint is uncharted, it will return the &#x27;Uncharted&#x27; trait instead of its actual traits.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004> GetWaypointAsync (string systemSymbol, string waypointSymbol)
        {
             ApiResponse<InlineResponse2004> localVarResponse = await GetWaypointAsyncWithHttpInfo(systemSymbol, waypointSymbol);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Waypoint View the details of a waypoint.  If the waypoint is uncharted, it will return the &#x27;Uncharted&#x27; trait instead of its actual traits.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> GetWaypointAsyncWithHttpInfo (string systemSymbol, string waypointSymbol)
        {
            // verify the required parameter 'systemSymbol' is set
            if (systemSymbol == null)
                throw new ApiException(400, "Missing required parameter 'systemSymbol' when calling SystemsApi->GetWaypoint");
            // verify the required parameter 'waypointSymbol' is set
            if (waypointSymbol == null)
                throw new ApiException(400, "Missing required parameter 'waypointSymbol' when calling SystemsApi->GetWaypoint");

            var localVarPath = "/systems/{systemSymbol}/waypoints/{waypointSymbol}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (systemSymbol != null) localVarPathParams.Add("systemSymbol", this.Configuration.ApiClient.ParameterToString(systemSymbol)); // path parameter
            if (waypointSymbol != null) localVarPathParams.Add("waypointSymbol", this.Configuration.ApiClient.ParameterToString(waypointSymbol)); // path parameter
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWaypoint", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2004) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
        }

        /// <summary>
        /// Supply Construction Site Supply a construction site with the specified good. Requires a waypoint with a property of &#x60;isUnderConstruction&#x60; to be true.  The good must be in your ship&#x27;s cargo. The good will be removed from your ship&#x27;s cargo and added to the construction site&#x27;s materials.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InlineResponse2011</returns>
        public InlineResponse2011 SupplyConstruction (string systemSymbol, string waypointSymbol, ConstructionSupplyBody body = null)
        {
             ApiResponse<InlineResponse2011> localVarResponse = SupplyConstructionWithHttpInfo(systemSymbol, waypointSymbol, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Supply Construction Site Supply a construction site with the specified good. Requires a waypoint with a property of &#x60;isUnderConstruction&#x60; to be true.  The good must be in your ship&#x27;s cargo. The good will be removed from your ship&#x27;s cargo and added to the construction site&#x27;s materials.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2011</returns>
        public ApiResponse< InlineResponse2011 > SupplyConstructionWithHttpInfo (string systemSymbol, string waypointSymbol, ConstructionSupplyBody body = null)
        {
            // verify the required parameter 'systemSymbol' is set
            if (systemSymbol == null)
                throw new ApiException(400, "Missing required parameter 'systemSymbol' when calling SystemsApi->SupplyConstruction");
            // verify the required parameter 'waypointSymbol' is set
            if (waypointSymbol == null)
                throw new ApiException(400, "Missing required parameter 'waypointSymbol' when calling SystemsApi->SupplyConstruction");

            var localVarPath = "/systems/{systemSymbol}/waypoints/{waypointSymbol}/construction/supply";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (systemSymbol != null) localVarPathParams.Add("systemSymbol", this.Configuration.ApiClient.ParameterToString(systemSymbol)); // path parameter
            if (waypointSymbol != null) localVarPathParams.Add("waypointSymbol", this.Configuration.ApiClient.ParameterToString(waypointSymbol)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SupplyConstruction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2011>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2011) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2011)));
        }

        /// <summary>
        /// Supply Construction Site Supply a construction site with the specified good. Requires a waypoint with a property of &#x60;isUnderConstruction&#x60; to be true.  The good must be in your ship&#x27;s cargo. The good will be removed from your ship&#x27;s cargo and added to the construction site&#x27;s materials.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of InlineResponse2011</returns>
        public async System.Threading.Tasks.Task<InlineResponse2011> SupplyConstructionAsync (string systemSymbol, string waypointSymbol, ConstructionSupplyBody body = null)
        {
             ApiResponse<InlineResponse2011> localVarResponse = await SupplyConstructionAsyncWithHttpInfo(systemSymbol, waypointSymbol, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Supply Construction Site Supply a construction site with the specified good. Requires a waypoint with a property of &#x60;isUnderConstruction&#x60; to be true.  The good must be in your ship&#x27;s cargo. The good will be removed from your ship&#x27;s cargo and added to the construction site&#x27;s materials.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2011)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2011>> SupplyConstructionAsyncWithHttpInfo (string systemSymbol, string waypointSymbol, ConstructionSupplyBody body = null)
        {
            // verify the required parameter 'systemSymbol' is set
            if (systemSymbol == null)
                throw new ApiException(400, "Missing required parameter 'systemSymbol' when calling SystemsApi->SupplyConstruction");
            // verify the required parameter 'waypointSymbol' is set
            if (waypointSymbol == null)
                throw new ApiException(400, "Missing required parameter 'waypointSymbol' when calling SystemsApi->SupplyConstruction");

            var localVarPath = "/systems/{systemSymbol}/waypoints/{waypointSymbol}/construction/supply";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (systemSymbol != null) localVarPathParams.Add("systemSymbol", this.Configuration.ApiClient.ParameterToString(systemSymbol)); // path parameter
            if (waypointSymbol != null) localVarPathParams.Add("waypointSymbol", this.Configuration.ApiClient.ParameterToString(waypointSymbol)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (AgentToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SupplyConstruction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2011>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2011) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2011)));
        }

    }
}
